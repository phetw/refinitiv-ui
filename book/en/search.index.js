Pandora.book._.searchIndex = [{"title":"Element Framework","filename":"index.html","contents":[{"text":"Element Framework provides components and tooling aligned with Refinitiv's design system to help developers build applications faster and more efficiently.","tagName":"h3"},{"text":"Components are flexible, cohesive and simple to use. They can work in any framework, or by themselves.","tagName":"p"},{"text":"Theming is fully compliant with Refinitiv's Halo product design system","tagName":"p"},{"text":"Performance is superior with render times and load speeds, using shared resources across components.","tagName":"p"},{"text":"\n            \n      Get Started","tagName":"a"}]},{"title":"Installation","filename":"start/installation.html","contents":[{"text":"Element Framework (EF) is reusable UI components which is part of Refinitiv Workspace's SDK family. EF provides a collection of UI elements that includes theming capability with the Refinitiv's design system. ","tagName":"p"},{"text":"Refinitiv Workspace","tagName":"a"},{"text":"It aims to create a consistent approach to building, reusing and sharing UI components in a modular way to reduce duplication of effort and increase efficiency.","tagName":"p"},{"text":"EF elements are built with web components which is a standard web technology that can be utilized across all browsers and can be used with any JavaScript frameworks.","tagName":"p"},{"text":"EF elements are published as one package. You are also require to install theme package as it will provide essential native styles for typography, theme css variables, etc.","tagName":"p"},{"text":"npm install @refinitiv-ui/elements\nnpm install @refinitiv-ui/halo-theme","tagName":"pre"},{"text":"Start using an element by importing the element and its theme in your app.","tagName":"p"},{"text":"// import element\nimport '@refinitiv-ui/elements/lib/button';\nimport '@refinitiv-ui/elements/lib/panel';\n\n// import native styles for typography, css variables, etc.\nimport '@refinitiv-ui/halo-theme/dark/imports/native-elements';\n\n// import element's Halo dark theme\nimport '@refinitiv-ui/elements/lib/button/themes/halo/dark';\nimport '@refinitiv-ui/elements/lib/panel/themes/halo/dark';","tagName":"pre"},{"text":"Now, you can use the elements in your app.","tagName":"p"},{"text":".content {\n    width:100%;\n    height: 500px;\n}","tagName":"pre"},{"text":"<ef-panel class=\"content\" spacing>\n    <h2>Hello EF!</h2>\n    <ef-button cta>OK</ef-button>\n</ef-panel>","tagName":"pre"},{"text":"The font \"Proxima Nova Fin\" shall only be used within Refinitiv products or services. The copyright owner must approve any use of such font outside of Refinitiv products or services, which may be subject to a fee. Please see https://www.fontspring.com/lic/fontspring/webfont#license_text","tagName":"p"},{"text":"https://www.fontspring.com/lic/fontspring/webfont#license_text","tagName":"a"},{"text":"Font styles in Halo theme are only Regular, Semi Bold and Bold. Do not use 'Itatic' style due to the license on Proxima Nova Fin font.","tagName":"p"},{"text":"Start building your first application using EF with your favourite frameworks: Angular, React, Vue or without using framework, Vanilla.","tagName":"p"},{"text":"Angular","tagName":"a"},{"text":"React","tagName":"a"},{"text":"Vue","tagName":"a"},{"text":"Vanilla","tagName":"a"}]},{"title":"Browser Support","filename":"start/browser-support.html","contents":[{"text":"EF elements are built as web components and are natively supported in Chrome, Firefox, Chromium Edge and Safari (including iOS). For browsers without native support, a small polyfill can be applied with little performance overhead.","tagName":"p"},{"text":"CSS styles of elements are prefixed to work across browsers. The elements are published with ES2015 syntax which is already supported in all modern browsers. You will need to transpile element code to ES5 only if you need to support IE11.","tagName":"p"},{"text":"\n\n\n\n\n\n\n","tagName":"tr"},{"text":"\nChrome 61+\nSafari 11+\nFirefox 63+\nEdge 79+\nElectron\nIE11*\n","tagName":"tr"},{"text":"IE Support","tagName":"h2"},{"text":"In order for EF elements to work on Internet Explorer 11 or browsers that do not support web components natively, a few polyfills are required. EF provides minimal set of polyfills.","tagName":"p"},{"text":"Install polyfills that are curated by EF.","tagName":"p"},{"text":"npm install @refinitiv-ui/polyfills","tagName":"pre"},{"text":"To use the minimal polyfills in your application, ensure that the polyfills are loaded before any EF elements.","tagName":"p"},{"text":"import '@refinitiv-ui/polyfills/minimal';","tagName":"pre"},{"text":"When using EF elements without modern Javascript frameworks, polyfills for ES2015 features may not be automatically added by the framework. In that case, you will need more polyfills.","tagName":"p"},{"text":"A more comprehensive set of polyfills can be added.","tagName":"p"},{"text":"import '@refinitiv-ui/polyfills';","tagName":"pre"},{"text":"Transpilation","tagName":"h3"},{"text":"EF elements use features of ES2015 which modern browsers support natively, without having to transpile down to ES5. ","tagName":"p"},{"text":"However, in order for EF elements to work on Internet Explorer 11, they have to be transpiled using Babel. Modern frameworks commonly use Webpack, which provides a Babel loader for transpiling code.","tagName":"p"},{"text":"Babel","tagName":"a"},{"text":"See more detail about supporting IE11 in Angular, Vue, React or Vanilla if you don't use framework and need to create webpack configuration file with babel and polyfills.","tagName":"p"},{"text":"Angular","tagName":"a"},{"text":"Vue","tagName":"a"},{"text":"React","tagName":"a"},{"text":"Vanilla","tagName":"a"}]},{"title":"Theming","filename":"start/theming.html","contents":[{"text":"Applications in Refinitiv Workspace should use the Halo Design System theme to be fully compliant with branding guidelines. EF elements require their theme to initialize itself successfully in the application that they are used in.","tagName":"p"},{"text":"Halo Theme","tagName":"h2"},{"text":"The Halo Deisgn System theme is provided with two variants; light and dark. An application can have only one variant while the app is running. See Theme Switching to learn how to toggle between light and dark themes in your application.","tagName":"p"},{"text":"Theme Switching","tagName":"a"},{"text":"<ef-header>52-WEEK RANGE</ef-header>\n<coral-panel>\n  <div id=\"wrapper\">$75.25<ef-led-gauge id=\"led\" top-label=\"$150.50\" top-value=\"70.00\"></ef-led-gauge>$205.25</div>\n</coral-panel>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"#wrapper {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n#led {\n  flex-basis: 80%;\n}","tagName":"pre"},{"text":"<ef-header>52-WEEK RANGE</ef-header>\n<coral-panel>\n  <div id=\"wrapper\">$75.25<ef-led-gauge id=\"led\" top-label=\"$150.50\" top-value=\"70.00\"></ef-led-gauge>$205.25</div>\n</coral-panel>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"#wrapper {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n#led {\n  flex-basis: 80%;\n}","tagName":"pre"},{"text":"Native Styles","tagName":"h2"},{"text":"The application is required to import native styles so that the correct typography and EF's global CSS variables are applied in an application.","tagName":"p"},{"text":"import '@refinitiv-ui/halo-theme/dark/imports/native-elements';","tagName":"pre"},{"text":"This package also includes some native element styles such as heading, a link, table, etc. They are prepended to a document's head section so they can be overridden later at the application level.","tagName":"p"}]},{"title":"Roadmap","filename":"start/roadmap.html","contents":[{"text":"","tagName":"p"},{"text":"<p class=\"header\">2021</p>\n<roadmap-event header=\"Q2\" color=\"#001EFF\">\n  <roadmap-item header=\"EF version 5\" status=\"Released\">\n    Release Element Framework version 5 on NPM public.\n  </roadmap-item>\n</roadmap-event>\n<roadmap-event header=\"Q3\" color=\"#001EFF\">\n  <roadmap-item header=\"Responsive Layout Pattern\" status=\"Defining\">\n    Introducing a responsive grid layout system that comforms an official design system by UX team.\n  </roadmap-item>\n  <roadmap-item header=\"Hybrid Theme\" status=\"Defining\">\n    New capability that allows developers to greater customize component&apos;s theme individually at application level. This will support external component to theme EF components (including Atlas components) to following their branding guideline.\n  </roadmap-item>\n  <roadmap-item header=\"Atlas Element Integration with Refinitiv SDK\" status=\"Defining\">\n    Atlas Element can access data in Refinitiv Data Platform by using Refinitiv SDK so it can be used by external developer without dependency with Refinitiv Workspace&apos;s container.\n  </roadmap-item>\n  <roadmap-item header=\"Publish Atlas Elements to External Developers\" status=\"Defining\">\n    Make Atlas Elements available to external developers.\n  </roadmap-item>\n</roadmap-event>\n<roadmap-event header=\"Q4\" color=\"#001EFF\">\n  <roadmap-item header=\"Open Source EF\" status=\"Defining\">\n    Moves to public GitHub and open source EF.\n  </roadmap-item>\n  <roadmap-item header=\"Accessibility Improvements\" status=\"Defining\">\n    Improvement accessibility in EF components.\n  </roadmap-item>\n</roadmap-event>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":".header {\n  text-align: center;\n  font-weight: 400;\n  font-size: 40px;\n  letter-spacing: 3px;\n  margin: 10px;\n}","tagName":"pre"}]},{"title":"Button","filename":"elements/button.html","contents":[{"text":"<ef-button>Button</ef-button>\n<ef-button cta>Button</ef-button>\n<ef-button disabled>Disabled</ef-button>\n<ef-button toggles active>Toggle</ef-button>\n<ef-button icon=\"tick\">Button</ef-button>\n<ef-button icon=\"tick\" textpos=\"before\">Button</ef-button>\n<ef-button icon=\"tick\"></ef-button>\n<ef-button icon=\"tick\" transparent></ef-button>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"Use ef-button for actions in forms, dialogs, etc. with support for different states and styles.","tagName":"p"},{"text":"Basic usage","tagName":"h3"},{"text":"ef-button can be used similarly to button. Styling and sizing are managed by the theme but can be customized using CSS.","tagName":"p"},{"text":"<ef-button>Default</ef-button>\n<ef-button class=\"large\">Large</ef-button>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":".large {\n  height: 60px;\n  min-width: 140px;\n  font-size: 140%;\n}","tagName":"pre"},{"text":".large {\n  height: 33px;\n  min-width: 100px;\n  font-size: 140%;\n}","tagName":"pre"},{"text":"<ef-button>Default</ef-button>\n<ef-button class=\"large\">Large</ef-button>","tagName":"pre"},{"text":"Change styles and types","tagName":"h3"},{"text":" ef-button provides various styles to use for different scenarios, for example, call-to-action, disabled, toggles. To use a style, add its attribute to the ef-button.","tagName":"p"},{"text":"<ef-button>Button</ef-button>\n<ef-button disabled>Button</ef-button>\n<ef-button cta>OK</ef-button>\n<ef-button cta disabled>OK</ef-button>\n<ef-button toggles>Toggle button</ef-button>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"<ef-button>Button</ef-button>\n<ef-button disabled>Button</ef-button>\n<ef-button cta>OK</ef-button>\n<ef-button cta disabled>OK</ef-button>\n<ef-button toggles>Toggle button</ef-button>","tagName":"pre"},{"text":"Inline icon","tagName":"h3"},{"text":"To show an icon inside ef-button, use the icon attribute. Supported icons depend on the theme and can be seen on the icons page. Text can be configured to display before or after the icon using the textpos attribute.","tagName":"p"},{"text":"<ef-button icon=\"tick\"></ef-button>\n<ef-button icon=\"tick\">Button</ef-button>\n<ef-button icon=\"tick\" textpos=\"before\">Button</ef-button>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"<ef-button icon=\"tick\"></ef-button>\n<ef-button icon=\"tick\">Button</ef-button>\n<ef-button icon=\"tick\" textpos=\"before\">Button</ef-button>","tagName":"pre"},{"text":"More contents in button","tagName":"h3"},{"text":"If the button width needs to be fixed, and content requires more than one line, set height: auto; to ensure content displays correctly inside the button.","tagName":"p"},{"text":"<ef-button icon=\"tick\" class=\"lines\">Fixed width 180px and more contents in button</ef-button>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":".lines {\n  height: auto;\n  width: 180px;\n}","tagName":"pre"},{"text":".lines {\n  height: auto;\n  width: 180px;\n}","tagName":"pre"},{"text":"<ef-button icon=\"tick\" class=\"lines\">Fixed width 180px and more contents in button</ef-button>","tagName":"pre"},{"text":"Switching icon on mouse over","tagName":"h3"},{"text":"ef-button can display an icon for mouse hover by using hover-icon attribute.","tagName":"p"},{"text":"<ef-button icon=\"tick\" hover-icon=\"cross\"></ef-button>\n<ef-button icon=\"cross\" hover-icon=\"tick\"></ef-button>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"<ef-button icon=\"tick\" hover-icon=\"cross\"></ef-button>\n<ef-button icon=\"cross\" hover-icon=\"tick\"></ef-button>","tagName":"pre"},{"text":"Handling click events on desktop and mobile","tagName":"h3"},{"text":"ef-button provides events that work on both desktop and mobile. Use tap to ensure that the event will work on different platforms.","tagName":"p"},{"text":"<div class=\"container\">\n  <ef-button id=\"button\">Tap / Click Me</ef-button>\n  <span id=\"text\"></span>\n</div>","tagName":"pre"},{"text":"var btn = document.getElementById('button');\nbtn.addEventListener('tap', function() {\n  document.getElementById('text').textContent = 'Got event tap!';\n});","tagName":"pre"},{"text":".container {\n  display: inline-flex;\n  align-items: center;\n  justify-content: flex-start;\n}\n\n#text {\n  padding-left: 10px;\n}","tagName":"pre"},{"text":"<ef-button id=\"button\">Click Me</ef-button>","tagName":"pre"},{"text":"var btn = document.getElementById('button');\nbtn.addEventListener('tap', function () {\n  document.getElementById('text').textContent = 'Clicked!';\n});","tagName":"pre"},{"text":"API Reference","tagName":"h2"},{"text":"Attributes","tagName":"h3"},{"text":"Properties","tagName":"h3"},{"text":"Events","tagName":"h3"}]},{"title":"Button Bar","filename":"elements/button-bar.html","contents":[{"text":"<div style=\"display:flex; flex-direction:column;\">\n  <ef-button-bar>\n    <ef-button>One</ef-button>\n    <ef-button>Two</ef-button>\n    <ef-button>Three</ef-button>\n    <ef-button>Four</ef-button>\n    <ef-button>Five</ef-button>\n  </ef-button-bar>\n\n  <ef-button-bar managed>\n    <ef-button active toggles>One</ef-button>\n    <ef-button toggles>Two</ef-button>\n    <ef-button toggles>Three</ef-button>\n    <ef-button toggles>Four</ef-button>\n    <ef-button toggles>Five</ef-button>\n  </ef-button-bar>\n\n  <ef-button-bar>\n    <ef-button toggles active icon=\"bold\"></ef-button>\n    <ef-button toggles icon=\"italic\"></ef-button>\n    <ef-button toggles icon=\"underline\"></ef-button>\n    <ef-button-bar managed>\n      <ef-button toggles active icon=\"text-left\"></ef-button>\n      <ef-button toggles icon=\"text-center\"></ef-button>\n      <ef-button toggles icon=\"text-right\"></ef-button>\n      <ef-button toggles icon=\"text-center\"></ef-button>\n    </ef-button-bar>\n    <ef-button icon=\"increase-indent\"></ef-button>\n    <ef-button icon=\"decrease-indent\"></ef-button>\n    <ef-button icon=\"image\"></ef-button>\n    <ef-button icon=\"print\"></ef-button>\n  </ef-button-bar>\n</div>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"ef-button-bar is used to display multiple buttons to create a list of commands bar.","tagName":"p"},{"text":"Basic usage","tagName":"h2"},{"text":"Button Bar can be created by using ef-button as content inside ef-button-bar. You can use it to create a button with an additional menu on the side, or to create different styles of toolbar control.","tagName":"p"},{"text":"The Button Bar control aims to provide a simple array of buttons. You can use it together with Overlay Menu to create a dropdown menu.","tagName":"p"},{"text":"<ef-button-bar>\n  <ef-button>Reply All</ef-button>\n  <ef-button icon=\"down\"></ef-button>\n</ef-button-bar>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"<ef-button-bar>\n  <ef-button>Reply All</ef-button>\n  <ef-button icon=\"down\"></ef-button>\n</ef-button-bar>","tagName":"pre"},{"text":"Creating multiple buttons toolbar","tagName":"h3"},{"text":"You can use Button Bar to create a simple toolbar.","tagName":"p"},{"text":"<ef-button-bar>\n  <ef-button icon=\"skip-to-start\"></ef-button>\n  <ef-button icon=\"play\"></ef-button>\n  <ef-button icon=\"skip-to-end\"></ef-button>\n  <ef-button icon=\"sound-mute\"></ef-button>\n  <ef-button icon=\"sound-decrease\"></ef-button>\n  <ef-button icon=\"sound-increase\"></ef-button>\n  <ef-button icon=\"sound-on\"></ef-button>\n</ef-button-bar>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"<ef-button-bar>\n  <ef-button icon=\"skip-to-start\"></ef-button>\n  <ef-button icon=\"play\"></ef-button>\n  <ef-button icon=\"skip-to-end\"></ef-button>\n  <ef-button icon=\"sound-mute\"></ef-button>\n  <ef-button icon=\"sound-decrease\"></ef-button>\n  <ef-button icon=\"sound-increase\"></ef-button>\n  <ef-button icon=\"sound-on\"></ef-button>\n</ef-button-bar>","tagName":"pre"},{"text":"Toggle buttons","tagName":"h3"},{"text":"Buttons can be set to a toggled mode by using the toggles attribute. Each button can be toggled independently.","tagName":"p"},{"text":"<ef-button-bar>\n  <ef-button toggles icon=\"candle-chart\"></ef-button>\n  <ef-button toggles icon=\"chart-line-bar\"></ef-button>\n  <ef-button toggles icon=\"pie-chart\"></ef-button>\n  <ef-button toggles icon=\"grid\"></ef-button>\n</ef-button-bar>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"<ef-button-bar>\n  <ef-button toggles icon=\"candle-chart\"></ef-button>\n  <ef-button toggles icon=\"chart-line-bar\"></ef-button>\n  <ef-button toggles icon=\"pie-chart\"></ef-button>\n  <ef-button toggles icon=\"grid\"></ef-button>\n</ef-button-bar>","tagName":"pre"},{"text":"If only one button can be active at a time, add the managed attribute to ef-button-bar.","tagName":"p"},{"text":"<ef-button-bar managed>\n  <ef-button toggles icon=\"candle-chart\"></ef-button>\n  <ef-button toggles icon=\"chart-line-bar\"></ef-button>\n  <ef-button toggles icon=\"pie-chart\"></ef-button>\n  <ef-button toggles icon=\"grid\"></ef-button>\n</ef-button-bar>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"<ef-button-bar managed>\n  <ef-button toggles icon=\"candle-chart\"></ef-button>\n  <ef-button toggles icon=\"chart-line-bar\"></ef-button>\n  <ef-button toggles icon=\"pie-chart\"></ef-button>\n  <ef-button toggles icon=\"grid\"></ef-button>\n</ef-button-bar>","tagName":"pre"},{"text":"Mixing different styles","tagName":"h3"},{"text":"ef-button-bar supports more complex use cases, such as including managed buttons along with other types.","tagName":"p"},{"text":"<ef-button-bar>\n  <ef-button toggles active icon=\"bold\"></ef-button>\n  <ef-button toggles icon=\"italic\"></ef-button>\n  <ef-button toggles icon=\"underline\"></ef-button>\n  <ef-button-bar managed>\n    <ef-button toggles active icon=\"text-left\"></ef-button>\n    <ef-button toggles icon=\"text-center\"></ef-button>\n    <ef-button toggles icon=\"text-right\"></ef-button>\n    <ef-button toggles icon=\"text-center\"></ef-button>\n  </ef-button-bar>\n  <ef-button icon=\"increase-indent\"></ef-button>\n  <ef-button icon=\"decrease-indent\"></ef-button>\n  <ef-button icon=\"image\"></ef-button>\n  <ef-button icon=\"print\"></ef-button>\n</ef-button-bar>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"<ef-button-bar>\n  <ef-button toggles active icon=\"bold\"></ef-button>\n  <ef-button toggles icon=\"italic\"></ef-button>\n  <ef-button toggles icon=\"underline\"></ef-button>\n  <ef-button-bar managed>\n    <ef-button toggles active icon=\"text-left\"></ef-button>\n    <ef-button toggles icon=\"text-center\"></ef-button>\n    <ef-button toggles icon=\"text-right\"></ef-button>\n    <ef-button toggles icon=\"text-center\"></ef-button>\n  </ef-button-bar>\n  <ef-button icon=\"increase-indent\"></ef-button>\n  <ef-button icon=\"decrease-indent\"></ef-button>\n  <ef-button icon=\"image\"></ef-button>\n  <ef-button icon=\"print\"></ef-button>\n</ef-button-bar>","tagName":"pre"},{"text":"Events","tagName":"h3"},{"text":"To listen to the tap event on the button, add the tap event listener to an individual ef-button or ef-button-bar.","tagName":"p"},{"text":"<div class=\"container\">\n  <ef-button-bar id=\"button-bar\" managed>\n    <ef-button id=\"Dislike\" icon=\"dislike-empty\"></ef-button>\n    <ef-button id=\"Like\" icon=\"like-empty\"></ef-button>\n  </ef-button-bar>\n  <span id=\"text\"></span>\n</div>","tagName":"pre"},{"text":"const buttonBar = document.getElementById('button-bar');\nbuttonBar.addEventListener('tap', function(e) {\n  console.log(e.target.getAttribute('id'));\n});","tagName":"pre"},{"text":".container {\n  display: inline-flex;\n  align-items: center;\n}\n\n#text {\n  padding-left: 20px;\n}","tagName":"pre"},{"text":"<ef-button-bar id=\"button-bar\" managed>\n    <ef-button id=\"Dislike\" icon=\"dislike-empty\"></ef-button>\n    <ef-button id=\"Like\" icon=\"like-empty\"></ef-button>\n</ef-button-bar>","tagName":"pre"},{"text":"const buttonBar = document.getElementById('button-bar');\nbuttonBar.addEventListener('tap', function (e) {\n  console.log(e.target.getAttribute('id'));\n});","tagName":"pre"},{"text":"API Reference","tagName":"h2"},{"text":"Attributes","tagName":"h3"},{"text":"Properties","tagName":"h3"}]},{"title":"Pagination","filename":"elements/pagination.html","contents":[{"text":"<div id=\"wrapper\">\n  <ef-pagination page-size=\"5\" total-items=\"32\"></ef-pagination>\n</div>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"#wrapper {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 120px;\n  margin-right: 100px;\n}","tagName":"pre"},{"text":"ef-pagination is used when content is divided into separate pages to display the page numbers and enable navigation between them. The component should be positioned at the bottom right of the content.","tagName":"p"},{"text":"Basic usage","tagName":"h3"},{"text":"The pagination component requires the mandatory attributes, page-size and total-items. It will use these to calculate the number of total pages.","tagName":"p"},{"text":"By default, pagination will set the initial page to the first page but you can change that using the page attribute.","tagName":"p"},{"text":"<div id=\"wrapper\">\n  <ef-pagination page=\"3\" page-size=\"5\" total-items=\"32\"></ef-pagination>\n</div>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"#wrapper {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 120px;\n  margin-right: 100px;\n}","tagName":"pre"},{"text":"<ef-pagination page=\"3\" page-size=\"5\" total-items=\"32\"></ef-pagination>","tagName":"pre"},{"text":"Disabled","tagName":"h3"},{"text":"To disable pagination, use the disabled attribute.","tagName":"p"},{"text":"<div id=\"wrapper\">\n  <ef-pagination disabled page-size=\"5\" total-items=\"32\"></ef-pagination>\n</div>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"#wrapper {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 120px;\n  margin-right: 100px;\n}","tagName":"pre"},{"text":"<ef-pagination disabled page-size=\"5\" total-items=\"32\"></ef-pagination>","tagName":"pre"},{"text":"Responsive width","tagName":"h3"},{"text":"The page description section will be hidden if the width of the component is less than the break point, defined by the theme. You can override this value using the CSS variable, --responsive-width.","tagName":"p"},{"text":"For example, to hide the page description when the width is less than 400px;","tagName":"p"},{"text":"<div id=\"wrapper\">\n  <ef-pagination page-size=\"5\" total-items=\"32\"></ef-pagination>\n</div>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"#wrapper {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 120px;\n  margin-right: 100px;\n}\n\nef-pagination {\n  width: 390px;\n  ---responsive-width: 400;\n}","tagName":"pre"},{"text":"  ef-pagination {\n    ---responsive-width: 400;\n  }","tagName":"pre"},{"text":"Page changed","tagName":"h3"},{"text":"The pagination component will fire page-changed with the value of the new page in e.detail.value.","tagName":"p"},{"text":"<div id=\"wrapper\">\n  <ef-pagination id=\"pagination\" page-size=\"5\" total-items=\"32\"></ef-pagination>\n</div>\n<div id=\"console\">\n  Page =&#xA0;<span id=\"text\"></span>\n</div>","tagName":"pre"},{"text":"var pagination = document.getElementById('pagination');\npagination.addEventListener('page-changed', function(e) {\n  var text = document.getElementById('text');\n  text.textContent = e.detail.value;\n});","tagName":"pre"},{"text":"#wrapper {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 120px;\n  margin-right: 100px;\n}\n\n#console {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}","tagName":"pre"},{"text":"<ef-pagination id=\"pagination\" page-size=\"5\" total-items=\"32\"></ef-pagination>\n<script>\n  var pagination = document.getElementById('pagination');\n  pagination.addEventListener('page-changed', function (e) { console.log(e.detail.value) });\n</script>","tagName":"pre"},{"text":"API Reference","tagName":"h2"},{"text":"Attributes","tagName":"h3"},{"text":"Properties","tagName":"h3"},{"text":"Methods","tagName":"h3"},{"text":"Events","tagName":"h3"}]},{"title":"Pill","filename":"elements/pill.html","contents":[{"text":"<ef-pill>Default</ef-pill>\n<ef-pill toggles>Toggles</ef-pill>\n<ef-pill clears>Clear</ef-pill>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"ef-pill is a small button style component which is used to show one or multiple selected items. It is nearly always used to visualize multiple item selections inside UI components.","tagName":"p"},{"text":"Basic usage","tagName":"h3"},{"text":"You can display a pill with text inside.","tagName":"p"},{"text":"<ef-pill>Banana</ef-pill>\n<ef-pill>Raspberry</ef-pill>\n<ef-pill>Mango</ef-pill>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"<ef-pill>Banana</ef-pill>\n<ef-pill>Raspberry</ef-pill>\n<ef-pill>Mango</ef-pill>","tagName":"pre"},{"text":"Toggle pills","tagName":"h3"},{"text":"Toggle pills are used to switch between two states. To create a toggle pill, add the toggles attribute.","tagName":"p"},{"text":"<ef-pill toggles>Toggles</ef-pill>\n<ef-pill toggles active>Active Toggles</ef-pill>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"<ef-pill toggles>Toggles</ef-pill>\n<ef-pill toggles active>Active Toggles</ef-pill>","tagName":"pre"},{"text":"Pill with clear button","tagName":"h3"},{"text":"A pill can display a clear button, or a small cross icon, when the clears attribute is added. You can also add an event listener for when the clear button is clicked.","tagName":"p"},{"text":"<ef-pill>Default</ef-pill>\n<ef-pill clears>Clears Pill</ef-pill>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"<ef-pill>Default</ef-pill>\n<ef-pill clears>Clears Pill</ef-pill>","tagName":"pre"},{"text":"Events","tagName":"h3"},{"text":"To get a notification when the toggle pill state changes, you can add the click event listener to the pill and check the state from the active property.","tagName":"p"},{"text":"<div class=\"container\">\n  <ef-pill id=\"Banana\">Banana</ef-pill>\n  <ef-pill id=\"Raspberry\">Raspberry</ef-pill>\n  <ef-pill id=\"Mango\">Mango</ef-pill>\n  <span id=\"text\"></span>\n</div>","tagName":"pre"},{"text":"var elementsArray = document.querySelectorAll('ef-pill');\nfor (var i = 0; i < elementsArray.length; i++) {\n  elementsArray[i].addEventListener('click', function(e) {\n    document.getElementById('text').textContent = e.target.id + ' is clicked!';\n  });\n};","tagName":"pre"},{"text":".container {\n  display: inline-flex;\n  align-items: center;\n}\n\n#text {\n  padding-left: 20px;\n}","tagName":"pre"},{"text":"<ef-pill id=\"Banana\">Banana</ef-pill>\n<ef-pill id=\"Raspberry\">Raspberry</ef-pill>\n<ef-pill id=\"Mango\">Mango</ef-pill>","tagName":"pre"},{"text":"var elementsArray = document.querySelectorAll('ef-pill');\nfor (var i=0; i < elementsArray.length; i++) {\n  elementsArray[i].addEventListener('click', function (e) {\n    document.getElementById('text').textContent = e.target.id + ' is clicked!';\n  });\n};","tagName":"pre"},{"text":"API Reference","tagName":"h2"},{"text":"Attributes","tagName":"h3"},{"text":"Properties","tagName":"h3"},{"text":"Events","tagName":"h3"}]},{"title":"Tab","filename":"elements/tab.html","contents":[{"text":"<div class=\"tab-container\">\n  <ef-tab label=\"Tab\"></ef-tab>\n  <ef-tab label=\"Icon Tab\" icon=\"chart-area\" active></ef-tab>\n  <ef-tab label=\"Icon Tab\" icon=\"chart-area\"></ef-tab>\n  <ef-tab label=\"Active Tab\" active></ef-tab>\n  <ef-tab label=\"Disabled Tab\" disabled></ef-tab>\n  <ef-tab label=\"Icon Tab\" icon=\"chart-area\" disabled></ef-tab>\n</div>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":".tab-container {\n  display: flex;\n}\n\nef-tab {\n  margin-right: 3px;\n  min-width: 90px;\n}","tagName":"pre"},{"text":"A basic building block of tab navigation controls.","tagName":"p"},{"text":"Basic usage","tagName":"h2"},{"text":"ef-tab is used for creating an individual tab item. It's purposely built as a building block, so you should consider using it with Tab Bar to create standard tab navigation controls.","tagName":"p"},{"text":"Tab Bar","tagName":"a"},{"text":"<ef-tab label=\"Tab1\"></ef-tab>\n<ef-tab label=\"Tab2\"></ef-tab>\n<ef-tab label=\"Tab3\"></ef-tab>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"<ef-tab label=\"Tab1\"></ef-tab>\n<ef-tab label=\"Tab2\"></ef-tab>\n<ef-tab label=\"Tab3\"></ef-tab>","tagName":"pre"},{"text":"Label","tagName":"h2"},{"text":"ef-tab provides label and sub-label attributes for displaying hierarchical text. If the width of label and sub-label is longer than the ef-tab width, both automatically truncate with ellipsis.","tagName":"p"},{"text":"<ef-tab label=\"Label\" sub-label=\"Secondary info\"></ef-tab>\n<ef-tab label=\"Label Two\" sub-label=\"A long secondary info\"></ef-tab>\n<ef-tab style=\"max-width: 100px;\" label=\"A Very Long Label\" sub-label=\"A long secondary info\"></ef-tab>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"<ef-tab label=\"Label\" sub-label=\"Secondary info\"></ef-tab>\n<ef-tab label=\"Label Two\" sub-label=\"A long secondary info\"></ef-tab>\n<ef-tab style=\"max-width: 100px;\" label=\"A Very Long Label\" sub-label=\"A long secondary info\"></ef-tab>","tagName":"pre"},{"text":"Both label and sub-label will not display if ef-tab has children.","tagName":"p"},{"text":"<ef-tab label=\"Tab1\" sub-label=\"Secondary long text\">\n  Custom Content\n  <span class=\"suffix\">EXCLUSIVE</span>\n</ef-tab>\n<ef-tab label=\"Tab2\" sub-label=\"Secondary long text\" clears>\n  Custom Content With Clears\n  <sup class=\"suffix\">EXCLUSIVE</sup>\n</ef-tab>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":".suffix {\n  color: #334BFF;\n}\n\nef-tab:hover .suffix {\n  color: #FFE999;\n}","tagName":"pre"},{"text":"<ef-tab label=\"Tab1\" sub-label=\"Secondary long text\">\n Custom Content\n <span class=\"suffix\">EXCLUSIVE</span>\n</ef-tab>\n<ef-tab label=\"Tab2\" sub-label=\"Secondary long text\" clears>\n Custom Content With Clears\n <sup class=\"suffix\">EXCLUSIVE</sup>\n</ef-tab>","tagName":"pre"},{"text":"Line Clamp","tagName":"h2"},{"text":"Uses lineClamp = \"0\" to change from ellipsis to middle truncation.","tagName":"p"},{"text":"<ef-tab style=\"max-width: 100px;\" label=\"A Very Long Label\" sub-label=\"Secondary info Beneath\" line-clamp=\"0\"></ef-tab>\n<ef-tab style=\"max-width: 100px;\" label=\"A Very Long Long Long Label\" line-clamp=\"2\"></ef-tab>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"<ef-tab style=\"max-width: 100px;\" line-clamp=\"0\" label=\"A Very Long Label\" sub-label=\"Secondary info Beneath\"></ef-tab>\n<ef-tab style=\"max-width: 100px;\" line-clamp=\"2\" label=\"A Very Long Long Long Label\"></ef-tab>","tagName":"pre"},{"text":"Also line-clamp can limit the maximum number of lines that the text can display. The text automatically truncates with ellipsis when its length is larger than the width provided.","tagName":"p"},{"text":"This feature will be omitted if it's used with line-clamp=\"0\" or sub-label","tagName":"p"},{"text":"<ef-tab style=\"max-width: 80px;\" label=\"A Very Long Primary Label\" line-clamp=\"2\"></ef-tab>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"<ef-tab style=\"max-width: 80px;\" label=\"A Very Long Primary Label\" line-clamp=\"2\"></ef-tab>","tagName":"pre"},{"text":"Icon","tagName":"h2"},{"text":"An inline icon can be set to display inside each tab using the icon attribute.","tagName":"p"},{"text":"<ef-tab icon=\"dividend\" label=\"Dividend\"></ef-tab>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"<ef-tab icon=\"dividend\" label=\"Dividend\"></ef-tab>","tagName":"pre"},{"text":"Tab with clear button","tagName":"h2"},{"text":"Tab can display a clear button (a small cross icon) using the clears attribute. To show a clear button on hover only, use clears-on-hover, instead.","tagName":"p"},{"text":"You can add a clear event listener to the tab to know when the clear button is clicked.","tagName":"p"},{"text":"<ef-tab clears label=\"Clears tab\"></ef-tab>\n<ef-tab clears-on-hover label=\"Clears on hover tab\"></ef-tab>\n<pre id=\"clearsLog\"></pre>","tagName":"pre"},{"text":"document.querySelectorAll('ef-tab').forEach((tab) => {\n  tab.addEventListener('clear', (e) => {\n    document.getElementById('clearsLog').textContent = `${e.detail.label} is on cleared`;\n  });\n});","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"<ef-tab clears label=\"Clears tab\"></ef-tab>\n<ef-tab clears-on-hover label=\"Clears on hover tab\"></ef-tab>\n<pre id=\"clearsLog\"></pre>\n<script>\n  document.querySelectorAll('ef-tab').forEach((tab) => {\n    tab.addEventListener('clear', (e) => {\n      document.getElementById('clearsLog').textContent = `${e.detail.label} is on cleared`;\n    });\n  });\n</script>","tagName":"pre"},{"text":"Active tab and events","tagName":"h2"},{"text":"ef-tab provides an active attribute/property to set the active state. You can add a tap event listener to each ef-tab and then define the actions you need to perform.The tap event is similar to the click event, but will work for both desktop and touch devices.","tagName":"p"},{"text":"<div style=\"display: flex;\">\n  <ef-tab id=\"tab1\" active label=\"Tab 1\"></ef-tab>\n  <ef-tab id=\"tab2\" label=\"Tab 2\"></ef-tab>\n  <ef-tab id=\"tab3\" label=\"Tab 3\"></ef-tab>\n  <ef-tab id=\"tab3\" label=\"Tab 4\"></ef-tab>\n</div>\n<pre id=\"event\"></pre>","tagName":"pre"},{"text":"var tabs = document.querySelectorAll('ef-tab');\nfor (var i = 0; i < tabs.length; i++) {\n  tabs[i].addEventListener('tap', function(e) {\n    for (var x = 0; x < tabs.length; x++) {\n      tabs[x].active = false;\n    }\n    document.getElementById('event').textContent = e.target.label + ' is clicked';\n    e.target.active = true;\n  })\n}","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"<div style=\"display: flex;\">\n  <ef-tab id=\"tab1\" active label=\"Tab 1\"></ef-tab>\n  <ef-tab id=\"tab2\" label=\"Tab 2\"></ef-tab>\n  <ef-tab id=\"tab3\" label=\"Tab 3\"></ef-tab>\n  <ef-tab id=\"tab3\" label=\"Tab 4\"></ef-tab>\n  <pre id=\"event\"></pre>\n</div>","tagName":"pre"},{"text":"const tabs = document.querySelectorAll('ef-tab');\n\n/* reset all tabs to inactive */\nconst resetActive = () => {\n  tabs.forEach((tab) => tab.active = false);\n}\n\ntabs.forEach((tab) => {\n  tab.addEventListener('tap', (e) => {\n    resetActive();\n    document.getElementById('event').textContent = e.target.label + ' is clicked';\n    e.target.active = true;\n  });\n});","tagName":"pre"},{"text":"API Reference","tagName":"h2"},{"text":"Attributes","tagName":"h3"},{"text":"Properties","tagName":"h3"},{"text":"Events","tagName":"h3"}]},{"title":"Tab Bar","filename":"elements/tab-bar.html","contents":[{"text":"<ef-tab-bar>\n  <ef-tab label=\"Market\" active></ef-tab>\n  <ef-tab label=\"Company\"></ef-tab>\n  <ef-tab label=\"News\"></ef-tab>\n  <ef-tab label=\"Charting\"></ef-tab>\n  <ef-tab label=\"Monitors\"></ef-tab>\n  <ef-tab icon=\"settings\"></ef-tab>\n</ef-tab-bar>\n<ef-panel spacing>\n  <h6 id=\"title\">Market</h6>\n  <div id=\"detail\">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Proin pulvinar euismod libero auctor facilisis. Praesent vestibulum feugiat augue a dapibus. Donec auctor malesuada pellentesque. Duis at massa quis mauris faucibus.</div>\n</ef-panel>","tagName":"pre"},{"text":"var tabs = document.querySelectorAll('ef-tab');\nvar title = document.getElementById('title');\nfor (var i = 0; i < tabs.length; i++) {\n  tabs[i].addEventListener('tap', function(e) {\n    for (var x = 0; x < tabs.length; x++) {\n      tabs[x].active = false;\n    }\n    if (e.target.label && e.target.label.length > 0) {\n      title.textContent = e.target.label;\n    } else {\n      title.textContent = \"Settings\";\n    }\n    e.target.active = true;\n  })\n}","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"A standard tab navigation control that can be used to navigate between views.","tagName":"p"},{"text":"Basic usage","tagName":"h2"},{"text":"You can create a navigation tab by wrapping ef-tab with ef-tab-bar.Tab bar will provide left and right navigation buttons if there is not enough space to display all tabs on the screen.","tagName":"p"},{"text":"For full features of ef-tab such as icon, please see Tab.","tagName":"p"},{"text":"Tab","tagName":"a"},{"text":"<ef-tab-bar>\n  <ef-tab label=\"Tab 1\"></ef-tab>\n  <ef-tab label=\"Tab 2\"></ef-tab>\n  <ef-tab label=\"Tab 3\"></ef-tab>\n</ef-tab-bar><br>\n<ef-tab-bar style=\"max-width:350px\">\n  <ef-tab label=\"Tab 1\"></ef-tab>\n  <ef-tab label=\"Tab 2\"></ef-tab>\n  <ef-tab label=\"Tab 3\"></ef-tab>\n  <ef-tab label=\"Tab 4\"></ef-tab>\n  <ef-tab label=\"Tab 5\"></ef-tab>\n  <ef-tab label=\"Tab 6\"></ef-tab>\n  <ef-tab label=\"Tab 7\"></ef-tab>\n  <ef-tab label=\"Tab 8\"></ef-tab>\n  <ef-tab label=\"Tab 9\"></ef-tab>\n  <ef-tab label=\"Tab 10\"></ef-tab>\n</ef-tab-bar>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"<ef-tab-bar>\n  <ef-tab label=\"Tab 1\"></ef-tab>\n  <ef-tab label=\"Tab 2\"></ef-tab>\n  <ef-tab label=\"Tab 3\"></ef-tab>\n</ef-tab-bar>","tagName":"pre"},{"text":"Levels","tagName":"h3"},{"text":"A level can be set to ef-tab-bar to change the style of the tab bar. Level styling is managed by the theme.","tagName":"p"},{"text":"<ef-tab-bar level=\"1\">\n  <ef-tab label=\"Tab1\"></ef-tab>\n  <ef-tab label=\"Tab2\" active></ef-tab>\n  <ef-tab label=\"Tab3\"></ef-tab>\n</ef-tab-bar>\n<br>\n<ef-tab-bar level=\"2\">\n  <ef-tab label=\"Tab1\"></ef-tab>\n  <ef-tab label=\"Tab2\" active></ef-tab>\n  <ef-tab label=\"Tab3\"></ef-tab>\n</ef-tab-bar>\n<br>\n<ef-tab-bar level=\"3\">\n  <ef-tab label=\"Tab1\"></ef-tab>\n  <ef-tab label=\"Tab2\" active></ef-tab>\n  <ef-tab label=\"Tab3\"></ef-tab>\n</ef-tab-bar>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"<ef-tab-bar level=\"1\">\n  <ef-tab label=\"Tab1\"></ef-tab>\n  <ef-tab label=\"Tab2\" active></ef-tab>\n  <ef-tab label=\"Tab3\"></ef-tab>\n</ef-tab-bar>\n<ef-tab-bar level=\"2\">\n  <ef-tab label=\"Tab1\"></ef-tab>\n  <ef-tab label=\"Tab2\" active></ef-tab>\n  <ef-tab label=\"Tab3\"></ef-tab>\n</ef-tab-bar>\n<ef-tab-bar level=\"3\">\n  <ef-tab label=\"Tab1\"></ef-tab>\n  <ef-tab label=\"Tab2\" active></ef-tab>\n  <ef-tab label=\"Tab3\"></ef-tab>\n</ef-tab-bar>","tagName":"pre"},{"text":"Vertical","tagName":"h3"},{"text":"Setting the vertical attribute/property to true will change the layout of the Tab Bar from horizontal to vertical.","tagName":"p"},{"text":"<div class=\"container\">\n  <ef-tab-bar vertical>\n    <ef-tab label=\"Home\" sub-label=\"The family or social unit occupying a home\" icon=\"home\"></ef-tab>\n    <ef-tab label=\"Calendar\" sub-label=\"A chart or series of pages showing the days, weeks, and months of a particular year\" icon=\"calendar\" active></ef-tab>\n    <ef-tab label=\"Setting\" sub-label=\"A factor at which a machine or device can be adjusted to operate.\" icon=\"settings\"></ef-tab>\n  </ef-tab-bar>\n  <section>\n    <h6 id=\"header\">Calendar</h6>\n    Lorem ipsum dolor sit amet consectetur adipisicing elit. Iste tempore doloribus error? Veniam reiciendis minus itaque eius temporibus quos totam nihil nisi, praesentium perspiciatis laudantium non quidem esse architecto et eos excepturi doloribus quas nulla impedit amet odio! Laborum fuga exercitationem quae autem provident, sint neque ex iure numquam tenetur.\n  </section>\n</div>","tagName":"pre"},{"text":"const tabs = document.querySelectorAll('ef-tab');\n\n/* reset all tabs to inactive */\nconst resetActive = () => {\n  tabs.forEach((tab) => tab.active = false);\n}\n\ntabs.forEach((tab) => {\n  tab.addEventListener('tap', (e) => {\n    resetActive();\n    document.getElementById('header').textContent = e.target.label;\n    e.target.active = true;\n  });\n});","tagName":"pre"},{"text":".container {\n  display: flex;\n  border: 1px solid #262626;\n}\n\nsection {\n  padding: 1em;\n}","tagName":"pre"},{"text":"  <div class=\"container\">\n    <ef-tab-bar vertical>\n      <ef-tab label=\"Home\" sub-label=\"The family or social unit occupying a home\" icon=\"home\"></ef-tab>\n      <ef-tab label=\"Calendar\" sub-label=\"A chart or series of pages showing the days, weeks, and months of a particular year\" icon=\"calendar\" active></ef-tab>\n      <ef-tab label=\"Setting\" sub-label=\"A factor at which a machine or device can be adjusted to operate.\" icon=\"settings\"></ef-tab>\n    </ef-tab-bar>\n    <section>\n      <h6>Calendar</h6>\n      Lorem ipsum dolor sit amet consectetur adipisicing elit. Iste tempore doloribus error? Veniam reiciendis minus itaque eius temporibus quos totam nihil nisi, praesentium perspiciatis laudantium non quidem esse architecto et eos excepturi doloribus quas nulla impedit amet odio! Laborum fuga exercitationem quae autem provident, sint neque ex iure numquam tenetur.\n    </section>\n  </div>","tagName":"pre"},{"text":"Switching tab","tagName":"h2"},{"text":"ef-tab provides an active attribute/property to set the active tab. You can add a tap event listener to each ef-tab and then add the actions you need to perform -- the tap event is similar to the click event, but will work for both desktop and touch devices.","tagName":"p"},{"text":"<ef-tab-bar>\n  <ef-tab label=\"Market\" active></ef-tab>\n  <ef-tab label=\"Company\"></ef-tab>\n  <ef-tab label=\"News\"></ef-tab>\n  <ef-tab label=\"Charting\"></ef-tab>\n  <ef-tab label=\"Monitors\"></ef-tab>\n  <ef-tab icon=\"settings\"></ef-tab>\n</ef-tab-bar>\n<pre id=\"event\"></pre>","tagName":"pre"},{"text":"var tabs = document.querySelectorAll('ef-tab');\nvar event = document.getElementById('event');\nfor (var i = 0; i < tabs.length; i++) {\n  tabs[i].addEventListener('tap', function(e) {\n    for (var x = 0; x < tabs.length; x++) {\n      tabs[x].active = false;\n    }\n    if (e.target.label && e.target.label.length > 0) {\n      event.textContent = e.target.label + \" is clicked\";\n    } else {\n      event.textContent = \"Settings is clicked\";\n    }\n    e.target.active = true;\n  })\n}","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"<ef-tab-bar>\n  <ef-tab label=\"Market\" active></ef-tab>\n  <ef-tab label=\"Company\"></ef-tab>\n  <ef-tab label=\"News\"></ef-tab>\n  <ef-tab label=\"Charting\"></ef-tab>\n  <ef-tab label=\"Monitors\"></ef-tab>\n  <ef-tab icon=\"settings\"></ef-tab>\n</ef-tab-bar>\n<pre id=\"event\"></pre>","tagName":"pre"},{"text":"const tabs = document.querySelectorAll('ef-tab');\n\n/* reset all tabs to inactive */\nconst resetActive = () => {\n  tabs.forEach((tab) => tab.active = false);\n}\n\ntabs.forEach((tab) => {\n  tab.addEventListener('tap', (e) => {\n    resetActive();\n    document.getElementById('event').textContent = e.target.label + ' is clicked';\n    e.target.active = true;\n  });\n});","tagName":"pre"},{"text":"API Reference","tagName":"h2"},{"text":"Attributes","tagName":"h3"},{"text":"Properties","tagName":"h3"}]},{"title":"Toggle","filename":"elements/toggle.html","contents":[{"text":"  <div class=\"container\">\n    <p class=\"item\">\n      <span class=\"label\">WiFi</span>\n      <ef-toggle></ef-toggle>\n    </p>\n    <p class=\"item\">\n      <span class=\"label\">Bluetooth</span>\n      <ef-toggle checked></ef-toggle>\n    </p>\n    <p class=\"item\">\n      <span class=\"label\">Do not disturb</span>\n      <ef-toggle></ef-toggle>\n    </p>\n    <p class=\"item\">\n      <span class=\"label\" disabled>Airplane mode</span>\n      <ef-toggle></ef-toggle>\n    </p>\n  </div>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":".container {\n  max-width: 200px;\n  display: flex;\n  align-items: flex-start;\n  justify-content: flex-start;\n  flex-direction: column;\n}\n\n.item {\n  width: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\n.label {\n  margin-right: 2em;\n}\n\nef-toggle {\n  height: 20px;\n  width: 36px;\n}","tagName":"pre"},{"text":"ef-toggle is a form control element that allows users to toggle between two states.","tagName":"p"},{"text":"Using Toggle","tagName":"h2"},{"text":"Toggle can switch between two states when the user taps or through setting the attribute/property checked.","tagName":"p"},{"text":"<p>\n  <ef-toggle></ef-toggle>\n</p>\n<p>\n  <ef-toggle checked></ef-toggle>\n</p>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"<ef-toggle></ef-toggle>\n<ef-toggle checked></ef-toggle>","tagName":"pre"},{"text":"Labels","tagName":"h2"},{"text":"Toggle provides label and checked-label attributes to display labels inside the toggle in realtion to checked states.","tagName":"p"},{"text":"<ef-toggle label=\"OFF\" checked-label=\"ON\"></ef-toggle>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"<ef-toggle label=\"OFF\" checked-label=\"ON\"></ef-toggle>","tagName":"pre"},{"text":"Events","tagName":"h2"},{"text":"Toggle dispatches checked-changed whenever user interaction changes the checked value.","tagName":"p"},{"text":"<div style=\"display: flex; align-items: center;\">\n  <ef-toggle id=\"toggle\"></ef-toggle>\n  <div style=\"margin-left: 1em;\">Switch <span id=\"text\"></span></div>\n</div>","tagName":"pre"},{"text":"var text = document.getElementById('text');\nvar toggle = document.getElementById('toggle');\n\ntext.innerHTML = 'OFF';\n\ntoggle.addEventListener('checked-changed', function(e) {\n  text.innerHTML = e.target.checked ? 'ON' : 'OFF';\n});","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"<div>\n  <ef-toggle id=\"toggle\"></ef-toggle>\n  <div>Switch <span id=\"text\"></span></div>\n</div>","tagName":"pre"},{"text":"var text = document.getElementById('text');\nvar toggle = document.getElementById('toggle');\n\ntext.innerHTML = 'OFF';\n\ntoggle.addEventListener('checked-changed', function (e) {\n  text.innerHTML = e.target.checked ? 'ON' : 'OFF';\n});","tagName":"pre"},{"text":"API Reference","tagName":"h2"},{"text":"Attributes","tagName":"h3"},{"text":"Properties","tagName":"h3"},{"text":"Events","tagName":"h3"}]},{"title":"Autosuggest","filename":"elements/autosuggest.html","contents":[{"text":"<section>\n  <ef-text-field id=\"input\" placeholder=\"Type &apos;e&apos;\"></ef-text-field>\n  <ef-autosuggest attach=\"#input\"></ef-autosuggest>\n</section>","tagName":"pre"},{"text":"var data = [{ label: 'Cornelius Martin' },\n  { label: 'Memphis Hoover' },\n  { label: 'Angela Lloyd' },\n  { label: 'Emilee Gay' },\n  { label: 'Selah Richardson' },\n  { label: 'Christina Erickson' },\n  { label: 'Elaina Welch' },\n  { label: 'Houston Tran' },\n  { label: 'Richard Peterson' },\n  { label: 'Andrew Lin' },\n  { label: 'Isabell Kaiser' },\n  { label: 'Brent Glass' },\n  { label: 'Martha Jones' },\n  { label: 'Anton Mcclain' },\n  { label: 'Jamir Martin' },\n  { label: 'Kassandra Manning' },\n  { label: 'Madisyn Mccormick' },\n  { label: 'Anabel Savage' },\n  { label: 'Tyler Phillips' },\n  { label: 'Ronan Deleon' }\n];\nvar autoSuggest = document.querySelector('ef-autosuggest');\nautoSuggest.addEventListener('suggestions-fetch-requested', function(event) {\n  var query = event.detail.query;\n  var re = new RegExp(autoSuggest.constructor.EscapeRegExp(query), 'i');\n  autoSuggest.suggestions = query ? data.filter(function(item) {\n    return re.test(item.label);\n  }) : [];\n});","tagName":"pre"},{"text":"section {\n  height: 380px;\n  padding: 0 3px;\n}\n\nef-text-field,\nef-autosuggest {\n  width: 300px;\n}","tagName":"pre"},{"text":"Autosuggest shows suggested matches to a user query. It can be attached to a text form control, such as Text Field, Multi Input, etc. Autosuggest supports use cases such as custom rendering, pagination, asynchronous data request and others.","tagName":"p"},{"text":"Basic usage","tagName":"h3"},{"text":"Using autosuggestionData property interfaceGrouping resultsPaginationAsynchronous autosuggestionHeader and footerTrigger request on focusPopup position","tagName":"p"},{"text":"Using autosuggestion","tagName":"a"},{"text":"Data property interface","tagName":"a"},{"text":"Grouping results","tagName":"a"},{"text":"Pagination","tagName":"a"},{"text":"Asynchronous autosuggestion","tagName":"a"},{"text":"Header and footer","tagName":"a"},{"text":"Trigger request on focus","tagName":"a"},{"text":"Popup position","tagName":"a"},{"text":"Advanced usage","tagName":"h3"},{"text":"Using custom inputIntegrate with custom suggestion dataCustom rendererComplex queryHTML renderer","tagName":"p"},{"text":"Using custom input","tagName":"a"},{"text":"Integrate with custom suggestion data","tagName":"a"},{"text":"Custom renderer","tagName":"a"},{"text":"Complex query","tagName":"a"},{"text":"HTML renderer","tagName":"a"},{"text":"Appendix","tagName":"h3"},{"text":"Helper methodsGlossary","tagName":"p"},{"text":"Helper methods","tagName":"a"},{"text":"Glossary","tagName":"a"},{"text":"Using auto suggestion","tagName":"h2"},{"text":"To start, attach ef-autosuggest to an input control such as ef-text-field using the attach attribute, which accepts CSS selectors.","tagName":"p"},{"text":"To attach autosuggest to other input controls, see Use custom input.","tagName":"p"},{"text":"Use custom input","tagName":"a"},{"text":"<ef-text-field id=\"input\" placeholder=\"Type 'e'\"></ef-text-field>\n<ef-autosuggest attach=\"#input\"></ef-autosuggest>","tagName":"pre"},{"text":"Implement the suggestions-fetch-requested event listener to construct suggestion data from a user query. The event will be triggered when the value of the attached control has changed or when keyboard navigation is performed.","tagName":"p"},{"text":"In the listener function, assign suggestion data to the suggestions property to display it in the popup.","tagName":"p"},{"text":"// sample dataset to perform search and process output to show on autosuggest\nvar data = [{ label: 'Cornelius Martin' },\n            { label: 'Memphis Hoover' },\n            { label: 'Angela Lloyd' },\n            { label: 'Emilee Gay' },\n            { label: 'Selah Richardson' }];\n\nvar autoSuggest = document.querySelector('ef-autosuggest');\nautoSuggest.addEventListener('suggestions-fetch-requested', function (event) {\n  // value from attached input control\n  var query = event.detail.query;\n\n  // handle the number of min characters and populate suggestions\n  if (query && query.length >= 1) {\n    autoSuggest.suggestions = data.filter(function (item) {\n      return item.label.indexOf(query) !== -1;\n    });\n  }\n  else {\n    autoSuggest.suggestions = [];\n  }\n});","tagName":"pre"},{"text":"Data property interface","tagName":"h2"},{"text":"Autosuggest natively processes data using the Suggestion type which is described below.","tagName":"p"},{"text":"\nName\nType\nDescription\n","tagName":"tr"},{"text":"\nlabel\nstring\nItem's label\n","tagName":"tr"},{"text":"\nvalue\nstring\nValue of an item\n","tagName":"tr"},{"text":"\ntype\nItemType\nType of item. Value can be text, header, divider\n","tagName":"tr"},{"text":"\ntitle\nstring\nThe text for the pop-up of item when it's hover\n","tagName":"tr"},{"text":"\nicon\nstring\nSet the icon name from the coral-icon list\n","tagName":"tr"},{"text":"\ngroup\nstring\nSort data item into the group\n","tagName":"tr"},{"text":"\ndisabled\nboolean\nSets the item to be disabled\n","tagName":"tr"},{"text":"For data not applying the ef-item model, see Integrate custom suggestion data.","tagName":"p"},{"text":"Integrate custom suggestion data","tagName":"a"},{"text":"Autosuggest uses the item label property to display item labels in the popup and highlight matched text.","tagName":"p"},{"text":"Autosuggest popup is visible only when there is at least one suggestion.","tagName":"p"},{"text":"See Custom renderer if you need to fully control how data should be displayed on UI.","tagName":"p"},{"text":"Custom renderer","tagName":"a"},{"text":"<section>\n  <ef-text-field id=\"input\" placeholder=\"Type &apos;e&apos;\"></ef-text-field>\n  <ef-autosuggest attach=\"#input\"></ef-autosuggest>\n</section>","tagName":"pre"},{"text":"var data = [{ label: 'Cornelius Martin' },\n  { label: 'Memphis Hoover' },\n  { label: 'Angela Lloyd' },\n  { label: 'Emilee Gay' },\n  { label: 'Selah Richardson' },\n  { label: 'Christina Erickson' },\n  { label: 'Elaina Welch' },\n  { label: 'Houston Tran' },\n  { label: 'Richard Peterson' },\n  { label: 'Andrew Lin' },\n  { label: 'Isabell Kaiser' },\n  { label: 'Brent Glass' },\n  { label: 'Martha Jones' },\n  { label: 'Anton Mcclain' },\n  { label: 'Jamir Martin' },\n  { label: 'Kassandra Manning' },\n  { label: 'Madisyn Mccormick' },\n  { label: 'Anabel Savage' },\n  { label: 'Tyler Phillips' },\n  { label: 'Ronan Deleon' }\n];\nvar autoSuggest = document.querySelector('ef-autosuggest');\nautoSuggest.addEventListener('suggestions-fetch-requested', function(event) {\n  var query = event.detail.query;\n  autoSuggest.suggestions = query ? data.filter(function(item) {\n    return item.label.indexOf(query) !== -1;\n  }) : [];\n});","tagName":"pre"},{"text":"section {\n  height: 380px;\n  padding: 0 3px;\n}\n\nef-text-field {\n  width: 300px;\n}","tagName":"pre"},{"text":"Grouping results","tagName":"h3"},{"text":"Autosuggest understands the Item object model, allowing the display of non-selectable headers and dividers. To show a header or divider, specify the type in suggestion items.","tagName":"p"},{"text":"var suggestions = [{ label: 'Management', type: 'header' },\n                   { label: 'Angela Lloyd', value: 'angela.lloyd' },\n                   { label: 'Emilee Gay', value: 'emilee.gay' }];","tagName":"pre"},{"text":"<section>\n  <ef-text-field id=\"input\" placeholder=\"Type &apos;e&apos;\"></ef-text-field>\n  <ef-autosuggest attach=\"#input\"></ef-autosuggest>\n</section>","tagName":"pre"},{"text":"var data = [{ label: 'Cornelius Martin', group: 'Core Team' },\n  { label: 'Memphis Hoover', group: 'Contractors' },\n  { label: 'Angela Lloyd', group: 'Management' },\n  { label: 'Emilee Gay', group: 'Management' },\n  { label: 'Selah Richardson', group: 'Core Team' },\n  { label: 'Christina Erickson', group: 'Application Team' },\n  { label: 'Elaina Welch', group: 'Application Team' },\n  { label: 'Houston Tran', group: 'Contractors' },\n  { label: 'Richard Peterson', group: 'Core Team' },\n  { label: 'Andrew Lin', group: 'Management' },\n  { label: 'Isabell Kaiser', group: 'Core Team' },\n  { label: 'Brent Glass', group: 'Management' },\n  { label: 'Martha Jones', group: 'Application Team' },\n  { label: 'Anton Mcclain', group: 'Contractors' },\n  { label: 'Jamir Martin', group: 'Core Team' },\n  { label: 'Kassandra Manning', group: 'Core Team' },\n  { label: 'Madisyn Mccormick', group: 'Management' },\n  { label: 'Anabel Savage', group: 'Core Team' },\n  { label: 'Tyler Phillips', group: 'Contractors' },\n  { label: 'Ronan Deleon', group: 'Management' }\n];\nvar autoSuggest = document.querySelector('ef-autosuggest');\n\nvar groupData = function(data) {\n  var groups = {};\n\n  data.forEach(function(item) {\n    groups[item.group] = groups[item.group] || [];\n    groups[item.group].push(item);\n  });\n\n  var items = [];\n  Object.keys(groups).forEach(function(group) {\n    items.push({\n      type: 'header',\n      label: group\n    });\n\n    items = items.concat(groups[group]);\n  });\n\n  return items;\n};\n\nautoSuggest.addEventListener('suggestions-fetch-requested', function(event) {\n  var query = event.detail.query;\n  autoSuggest.suggestions = query ? groupData(data.filter(function(item) {\n    return item.label.indexOf(query) !== -1;\n  })) : [];\n});","tagName":"pre"},{"text":"section {\n  height: 380px;\n  padding: 0 3px;\n}\n\nef-text-field {\n  width: 300px;\n}","tagName":"pre"},{"text":"var data = [{ label: 'Cornelius Martin', group: 'Core Team' },\n            { label: 'Memphis Hoover', group: 'Contractors' },\n            { label: 'Angela Lloyd', group: 'Management' },\n            { label: 'Emilee Gay', group: 'Management' },\n            { label: 'Selah Richardson', group: 'Core Team' },\n            { label: 'Christina Erickson', group: 'Application Team' },\n            { label: 'Elaina Welch', group: 'Application Team' },\n            { label: 'Houston Tran', group: 'Contractors' },\n            { label: 'Richard Peterson', group: 'Core Team' },\n            { label: 'Andrew Lin', group: 'Management' },\n            { label: 'Isabell Kaiser', group: 'Core Team' },\n            { label: 'Brent Glass', group: 'Management' },\n            { label: 'Martha Jones', group: 'Application Team' },\n            { label: 'Anton Mcclain', group: 'Contractors' },\n            { label: 'Jamir Martin', group: 'Core Team' },\n            { label: 'Kassandra Manning', group: 'Core Team' },\n            { label: 'Madisyn Mccormick', group: 'Management' },\n            { label: 'Anabel Savage', group: 'Core Team' },\n            { label: 'Tyler Phillips', group: 'Contractors' },\n            { label: 'Ronan Deleon', group: 'Management' }];\nvar autoSuggest = document.querySelector('ef-autosuggest');\n\nvar groupData = function (data) {\n  var groups = {};\n\n  data.forEach(function(item) {\n    groups[item.group] = groups[item.group] || [];\n    groups[item.group].push(item);\n  });\n\n  var items = [];\n  Object.keys(groups).forEach(function(group) {\n    items.push({\n      type: 'header',\n      label: group\n    });\n\n    items = items.concat(groups[group]);\n  });\n\n  return items;\n};\n\nautoSuggest.addEventListener('suggestions-fetch-requested', function (event) {\n  var query = event.detail.query;\n  autoSuggest.suggestions = query ? groupData(data.filter(function (item) {\n    return item.label.indexOf(query) !== -1;\n  })) : [];\n});","tagName":"pre"},{"text":"Pagination","tagName":"h3"},{"text":"When there are many suggestions items, it is recommended to use pagination. The implementation of this is down to the app developer. A typical approach could be to show best matches or recent items.","tagName":"p"},{"text":"To implement pagination in autosuggest, set the moreResults property to true when there are additional results to show. This property will display a Get more results button at the bottom of the autosuggest UI. Set the property to false when showing the last page.","tagName":"p"},{"text":"Clicking the Get more results button will trigger an suggestions-fetch-requested event with the event parameter event.detail.reason set to more-results.","tagName":"p"},{"text":"This example implements pagination and limits the result to show five suggestions per page.","tagName":"p"},{"text":"<section>\n  <ef-text-field id=\"input\" placeholder=\"Type &apos;e&apos;\"></ef-text-field>\n  <ef-autosuggest attach=\"#input\"></ef-autosuggest>\n</section>","tagName":"pre"},{"text":"var data = [{ label: 'Cornelius Martin' },\n  { label: 'Memphis Hoover' },\n  { label: 'Angela Lloyd' },\n  { label: 'Emilee Gay' },\n  { label: 'Selah Richardson' },\n  { label: 'Christina Erickson' },\n  { label: 'Elaina Welch' },\n  { label: 'Houston Tran' },\n  { label: 'Richard Peterson' },\n  { label: 'Andrew Lin' },\n  { label: 'Isabell Kaiser' },\n  { label: 'Brent Glass' },\n  { label: 'Martha Jones' },\n  { label: 'Anton Mcclain' },\n  { label: 'Jamir Martin' },\n  { label: 'Kassandra Manning' },\n  { label: 'Madisyn Mccormick' },\n  { label: 'Anabel Savage' },\n  { label: 'Tyler Phillips' },\n  { label: 'Ronan Deleon' }\n];\n\nvar currentPage;\nvar suggestions;\nvar pageSize = 5;\nvar autoSuggest = document.querySelector('ef-autosuggest');\n\nautoSuggest.addEventListener('suggestions-fetch-requested', function(event) {\n  var query = event.detail.query;\n  var reason = event.detail.reason;\n\n  if (reason === 'more-results') {\n    currentPage += 1;\n  } else {\n    currentPage = 1;\n    suggestions = [];\n  }\n\n  var filteredData = query ?\n    data.filter(function(item) {\n      return item.label.indexOf(query) !== -1;\n    }) :\n    [];\n\n  var page = filteredData.slice((currentPage - 1) * pageSize, currentPage * pageSize);\n\n  autoSuggest.moreResults = filteredData.length > currentPage * pageSize;\n  autoSuggest.suggestions = suggestions = suggestions.concat(page);\n});","tagName":"pre"},{"text":"section {\n  height: 380px;\n  padding: 0 3px;\n}\n\nef-text-field {\n  width: 300px;\n}","tagName":"pre"},{"text":"autoSuggest.addEventListener('suggestions-fetch-requested', function (event) {\n  // ...\n  var reason = event.detail.reason;\n\n  // if this is from 'Get more results', do pagination logic\n  if (reason === 'more-results') {\n    // apply pagination logic\n  }\n  // ...\n});","tagName":"pre"},{"text":"var currentPage;\nvar suggestions;\nvar pageSize = 5;\nvar autoSuggest = document.querySelector('ef-autosuggest');\n\nautoSuggest.addEventListener('suggestions-fetch-requested', function (event) {\n  var query = event.detail.query;\n  var reason = event.detail.reason;\n\n  if (reason === 'more-results') {\n    currentPage += 1;\n  }\n  else {\n    currentPage = 1;\n    suggestions = [];\n  }\n\n  var filteredData = query ? data.filter(function (item) {\n        return item.label.indexOf(query) !== -1;\n      }) : [];\n\n  var page = filteredData.slice((currentPage - 1) * pageSize, currentPage * pageSize);\n\n  autoSuggest.moreResults = filteredData.length > currentPage * pageSize;\n  autoSuggest.suggestions = suggestions = suggestions.concat(page);\n});","tagName":"pre"},{"text":"Asynchronous autosuggestion","tagName":"h3"},{"text":"Most data is filtered on the server and the results are sent asynchronously to the client. To implement this in autosuggest, requests and responses can be managed using suggestions-fetch-requested.","tagName":"p"},{"text":"Optionally, the debounce-rate attribute can reduce the number of server calls, and the loading property can show an animation while waiting for data from the server.","tagName":"p"},{"text":"<ef-autosuggest debounce-rate=\"500\"></ef-autosuggest>","tagName":"pre"},{"text":"// ...\nautoSuggest.addEventListener('suggestions-fetch-requested', function (event) {\n  var query = event.detail.query;\n  xhttp.onreadystatechange = function() {\n    // make sure that the data we set is for the last query\n    if (query === autoSuggest.query) {\n      autoSuggest.suggestions = suggestions;\n\n      // do not forget to remove the loading mask on response\n      autoSuggest.loading = false;\n    }\n  };\n  // waiting for data, show the loading mask\n  autoSuggest.loading = true;\n  xhttp.send();\n  // ...\n});","tagName":"pre"},{"text":"<section>\n  <ef-text-field id=\"input\" placeholder=\"Type &apos;e&apos;\"></ef-text-field>\n  <ef-autosuggest attach=\"#input\" debouncerate=\"500\"></ef-autosuggest>\n</section>","tagName":"pre"},{"text":"var data = [{ label: 'Cornelius Martin' },\n  { label: 'Memphis Hoover' },\n  { label: 'Angela Lloyd' },\n  { label: 'Emilee Gay' },\n  { label: 'Selah Richardson' },\n  { label: 'Christina Erickson' },\n  { label: 'Elaina Welch' },\n  { label: 'Houston Tran' },\n  { label: 'Richard Peterson' },\n  { label: 'Andrew Lin' },\n  { label: 'Isabell Kaiser' },\n  { label: 'Brent Glass' },\n  { label: 'Martha Jones' },\n  { label: 'Anton Mcclain' },\n  { label: 'Jamir Martin' },\n  { label: 'Kassandra Manning' },\n  { label: 'Madisyn Mccormick' },\n  { label: 'Anabel Savage' },\n  { label: 'Tyler Phillips' },\n  { label: 'Ronan Deleon' }\n];\nvar autoSuggest = document.querySelector('ef-autosuggest');\n\nautoSuggest.addEventListener('suggestions-fetch-requested', function(event) {\n  var query = event.detail.query;\n\n  // Show loading mask\n  autoSuggest.loading = true;\n\n  window.setTimeout(function() {\n    // Make sure that the data we are setting is for current query\n    if (query === autoSuggest.query) {\n      autoSuggest.suggestions = query ? data.filter(function(item) {\n        return item.label.indexOf(query) !== -1;\n      }) : [];\n      autoSuggest.loading = false;\n    }\n  }, 500);\n});","tagName":"pre"},{"text":"section {\n  height: 380px;\n  padding: 0 3px;\n}\n\nef-text-field {\n  width: 300px;\n}","tagName":"pre"},{"text":"Header and footer","tagName":"h3"},{"text":"Header and/or footer can be added to autosuggest by using slots.","tagName":"p"},{"text":"<ef-autosuggest>\n  <ef-header slot=\"header\">Company Employees</ef-header>\n  <div slot=\"footer\">Did we miss someone?</div>\n</ef-autosuggest>","tagName":"pre"},{"text":"<div id=\"wrapper\">\n  <ef-text-field id=\"input\" placeholder=\"Type &apos;e&apos;\"></ef-text-field>\n  <ef-autosuggest attach=\"#input\">\n    <ef-header slot=\"header\">Company Employees</ef-header>\n    <div slot=\"footer\" class=\"footer\">Did we miss someone?</div>\n  </ef-autosuggest>\n</div>","tagName":"pre"},{"text":"var data = [{ label: 'Cornelius Martin' },\n  { label: 'Memphis Hoover' },\n  { label: 'Angela Lloyd' },\n  { label: 'Emilee Gay' },\n  { label: 'Selah Richardson' },\n  { label: 'Christina Erickson' },\n  { label: 'Elaina Welch' },\n  { label: 'Houston Tran' },\n  { label: 'Richard Peterson' },\n  { label: 'Andrew Lin' },\n  { label: 'Isabell Kaiser' },\n  { label: 'Brent Glass' },\n  { label: 'Martha Jones' },\n  { label: 'Anton Mcclain' },\n  { label: 'Jamir Martin' },\n  { label: 'Kassandra Manning' },\n  { label: 'Madisyn Mccormick' },\n  { label: 'Anabel Savage' },\n  { label: 'Tyler Phillips' },\n  { label: 'Ronan Deleon' }\n];\nvar autoSuggest = document.querySelector('ef-autosuggest');\nautoSuggest.addEventListener('suggestions-fetch-requested', function(event) {\n  var query = event.detail.query;\n  autoSuggest.suggestions = query ? data.filter(function(item) {\n    return item.label.indexOf(query) !== -1;\n  }) : [];\n});","tagName":"pre"},{"text":"#wrapper {\n  height: 490px;\n  padding: 0 10px;\n  background-color: #f3f3f6;\n}\n\nef-text-field {\n  width: 300px;\n}\n\n.footer {\n  padding: 5px 10px;\n  font-size: 80%;\n  font-style: italic;\n  text-align: right;\n}","tagName":"pre"},{"text":"Trigger request on focus","tagName":"h3"},{"text":"Use the request-on-focus attribute to request suggestions when the input is focused.","tagName":"p"},{"text":"<ef-autosuggest request-on-focus></ef-autosuggest>","tagName":"pre"},{"text":"<section>\n  <ef-text-field id=\"input\" placeholder=\"Click here...\"></ef-text-field>\n  <ef-autosuggest attach=\"#input\" request-on-focus></ef-autosuggest>\n</section>","tagName":"pre"},{"text":"var data = [{ label: 'Cornelius Martin' },\n  { label: 'Memphis Hoover' },\n  { label: 'Angela Lloyd' },\n  { label: 'Emilee Gay' },\n  { label: 'Selah Richardson' },\n  { label: 'Christina Erickson' },\n  { label: 'Elaina Welch' },\n  { label: 'Houston Tran' },\n  { label: 'Richard Peterson' },\n  { label: 'Andrew Lin' },\n  { label: 'Isabell Kaiser' },\n  { label: 'Brent Glass' },\n  { label: 'Martha Jones' },\n  { label: 'Anton Mcclain' },\n  { label: 'Jamir Martin' },\n  { label: 'Kassandra Manning' },\n  { label: 'Madisyn Mccormick' },\n  { label: 'Anabel Savage' },\n  { label: 'Tyler Phillips' },\n  { label: 'Ronan Deleon' }\n];\nvar autoSuggest = document.querySelector('ef-autosuggest');\nautoSuggest.addEventListener('suggestions-fetch-requested', function(event) {\n  var query = event.detail.query;\n  autoSuggest.suggestions = query ? data.filter(function(item) {\n    return item.label.indexOf(query) !== -1;\n  }) : data;\n});","tagName":"pre"},{"text":"section {\n  height: 380px;\n  padding: 0 3px;\n}\n\nef-text-field {\n  width: 300px;\n}","tagName":"pre"},{"text":"Popup position","tagName":"h3"},{"text":"By default, the autosuggest popup is positioned below the attached element. You can change its position by setting the positionTarget property. Call refit() if positionTarget has been called after ef-autosuggest has been instantiated.","tagName":"p"},{"text":"For further position customization, ef-autosuggest supports attributes and properties of ef-overlay.","tagName":"p"},{"text":"autoSuggest.positionTarget = document.getElementById('custom-popup-position');","tagName":"pre"},{"text":"<section>\n  <ef-text-field id=\"input\" placeholder=\"Type &apos;e&apos;\"></ef-text-field>\n  <ef-autosuggest attach=\"#input\"></ef-autosuggest>\n  <div id=\"custom-popup-position\"></div>\n</section>","tagName":"pre"},{"text":"var data = [{ label: 'Cornelius Martin' },\n  { label: 'Memphis Hoover' },\n  { label: 'Angela Lloyd' },\n  { label: 'Emilee Gay' },\n  { label: 'Selah Richardson' },\n  { label: 'Christina Erickson' },\n  { label: 'Elaina Welch' },\n  { label: 'Houston Tran' },\n  { label: 'Richard Peterson' },\n  { label: 'Andrew Lin' },\n  { label: 'Isabell Kaiser' },\n  { label: 'Brent Glass' },\n  { label: 'Martha Jones' },\n  { label: 'Anton Mcclain' },\n  { label: 'Jamir Martin' },\n  { label: 'Kassandra Manning' },\n  { label: 'Madisyn Mccormick' },\n  { label: 'Anabel Savage' },\n  { label: 'Tyler Phillips' },\n  { label: 'Ronan Deleon' }\n];\nvar autoSuggest = document.querySelector('ef-autosuggest');\nautoSuggest.positionTarget = document.getElementById('custom-popup-position');\nautoSuggest.addEventListener('suggestions-fetch-requested', function(event) {\n  var query = event.detail.query;\n  autoSuggest.suggestions = query ? data.filter(function(item) {\n    return item.label.indexOf(query) !== -1;\n  }) : [];\n});","tagName":"pre"},{"text":"section {\n  height: 380px;\n  padding: 0 3px;\n}\n\nef-text-field {\n  width: 300px;\n}\n\n#custom-popup-position {\n  width: 300px;\n  height: 10px;\n  background-color: #5ca5d8;\n  position: absolute;\n  top: 0;\n  right: 0;\n}","tagName":"pre"},{"text":"Advanced usage","tagName":"h2"},{"text":"You can customize many aspects of autosuggest to provide a truly unique solution.","tagName":"p"},{"text":"Custom renderer","tagName":"h3"},{"text":"Use the renderer property to assign a function to override default rendering. The function will be called when each suggestion item is rendered and must return an HTML element.","tagName":"p"},{"text":"autoSuggest.renderer = function (suggestion, parameters) {\n  var query = parameters.query;\n  var el = document.createElement('div');\n\n  // Can implement text highlight based on query here. See `Helper methods section`\n  el.innerText = suggestion.label;\n  return el;\n}","tagName":"pre"},{"text":"If autosuggest is customized and doesn't use ef-item or a descendant, a highlightable method may be needed to control item highlights and selections, and the item-highlight event may be required to set/remove highlight CSS.","tagName":"p"},{"text":"Suggestions are always rendered in LightDOM, so normal CSS styling rules are applied.","tagName":"p"},{"text":"autoSuggest.highlightable = function (suggestion, el) {\n  return suggestion.type !== 'header' && suggestion.type !== 'divider';\n}\n\nautoSuggest.addEventListener('item-highlight', function (event) {\n  event.preventDefault();\n  var target = event.detail.target;\n  var oldTarget = event.detail.oldTarget;\n\n  if (target) {\n    target.classList.toggle('selected', true);\n  }\n\n  if (oldTarget) {\n    oldTarget.classList.toggle('selected', false);\n  }\n});","tagName":"pre"},{"text":"<section>\n  <ef-text-field id=\"input\" placeholder=\"Type &apos;e&apos;\"></ef-text-field>\n  <ef-autosuggest attach=\"#input\"></ef-autosuggest>\n</section>","tagName":"pre"},{"text":"var data = [{ label: 'Cornelius Martin', group: 'Core Team' },\n  { label: 'Memphis Hoover', group: 'Contractors' },\n  { label: 'Angela Lloyd', group: 'Management' },\n  { label: 'Emilee Gay', group: 'Management' },\n  { label: 'Selah Richardson', group: 'Core Team' },\n  { label: 'Christina Erickson', group: 'Application Team' },\n  { label: 'Elaina Welch', group: 'Application Team' },\n  { label: 'Houston Tran', group: 'Contractors' },\n  { label: 'Richard Peterson', group: 'Core Team' },\n  { label: 'Andrew Lin', group: 'Management' },\n  { label: 'Isabell Kaiser', group: 'Core Team' },\n  { label: 'Brent Glass', group: 'Management' },\n  { label: 'Martha Jones', group: 'Application Team' },\n  { label: 'Anton Mcclain', group: 'Contractors' },\n  { label: 'Jamir Martin', group: 'Core Team' },\n  { label: 'Kassandra Manning', group: 'Core Team' },\n  { label: 'Madisyn Mccormick', group: 'Management' },\n  { label: 'Anabel Savage', group: 'Core Team' },\n  { label: 'Tyler Phillips', group: 'Contractors' },\n  { label: 'Ronan Deleon', group: 'Management' }\n];\nvar autoSuggest = document.querySelector('ef-autosuggest');\n\nvar getInitials = function(label = '') {\n  var split = label.split(' ');\n\n  if (split.length) {\n    var initials = split[0][0].toUpperCase();\n    if (split[1]) {\n      initials += split[split.length - 1][0].toUpperCase();\n    }\n\n    return initials;\n  }\n\n  return '';\n};\n\nautoSuggest.highlightable = function() {\n  // all items are highlightable and selectable\n  return true;\n};\n\nautoSuggest.addEventListener('item-highlight', function(event) {\n  event.preventDefault();\n  var target = event.detail.target;\n  var oldTarget = event.detail.oldTarget;\n\n  if (target) {\n    target.classList.toggle('selected', true);\n  }\n\n  if (oldTarget) {\n    oldTarget.classList.toggle('selected', false);\n  }\n});\n\nautoSuggest.renderer = function(suggestion, parameters) {\n  var query = parameters.query;\n  var el = document.createElement('div');\n  el.classList.add('user-card');\n\n  var innerHTML = '';\n\n  innerHTML += '<div class=\"user-card__initials\">' + getInitials(suggestion.label) + '</div>';\n  innerHTML += '<div class=\"user-card__container\">';\n  innerHTML += '<div class=\"user-card__label\">' + autoSuggest.constructor.QueryWordSelect(suggestion.label, query, '<span class=\"text-highlighted\">$1</span>') + '</div>';\n  innerHTML += '<div class=\"user-card__group\">Group: ' + suggestion.group + '</div>';\n  innerHTML += '</div>';\n\n  el.innerHTML = innerHTML;\n\n  return el;\n};\n\nautoSuggest.addEventListener('suggestions-fetch-requested', function(event) {\n  var query = event.detail.query;\n  autoSuggest.suggestions = query ? data.filter(function(item) {\n    return item.label.indexOf(query) !== -1;\n  }) : [];\n});","tagName":"pre"},{"text":"section {\n  height: 380px;\n  padding: 0 3px;\n}\n\nef-text-field {\n  width: 300px;\n}\n\n.user-card {\n  display: flex;\n  padding: 10px;\n  cursor: pointer;\n  align-items: center;\n}\n\n.user-card:not(:last-child) {\n  border-bottom: 1px solid rgba(238, 118, 0, .6);\n}\n\n.user-card__initials {\n  border-radius: 100%;\n  margin: 0;\n  height: 40px;\n  text-align: center;\n  line-height: 40px;\n  width: 40px;\n  margin-right: 10px;\n  border: 1px solid rgba(238, 118, 0, .6);\n}\n\n.user-card__group {\n  margin-top: 3px;\n  opacity: 0.7;\n  font-size: 70%;\n}\n\n.user-card.selected {\n  background-color: rgba(238, 118, 0, .05);\n}\n\n.user-card .text-highlighted {\n  background-color: rgba(238, 118, 0, .6);\n}","tagName":"pre"},{"text":"Integrate with custom suggestion data","tagName":"h3"},{"text":"While autosuggest natively understands the Item object model, it is data agnostic, and can render suggestions with your data object schema. For example, if your suggestion data uses value instead of label, you can do mapping in the renderer function and implement item-select events and a highlightable method.","tagName":"p"},{"text":"autoSuggest.renderer = function (suggestion, parameters) {\n  var mappedData = {};\n\n  mappedData.label = suggestion.value;\n  mappedData.disabled = suggestion.readonly;\n\n  // you can map suggestion to ef-item\n  return autoSuggest.constructor.ItemRenderer(mappedData, parameters);\n}\n\nautoSuggest.addEventListener('item-select', function (event) {\n  event.preventDefault();\n  var suggestion = event.detail.suggestion;\n  var query = event.detail.query;\n\n  // map the value back to input\n  input.value = suggestion ? suggestion.value : query;\n});\n\nautoSuggest.highlightable = function (suggestion) {\n  return suggestion.readonly !== true;\n}","tagName":"pre"},{"text":"<section>\n  <ef-text-field id=\"input\" placeholder=\"Type &apos;e&apos;\"></ef-text-field>\n  <ef-autosuggest attach=\"#input\"></ef-autosuggest>\n</section>","tagName":"pre"},{"text":"var data = [{ value: 'Cornelius Martin', readonly: true },\n  { value: 'Memphis Hoover' },\n  { value: 'Angela Lloyd' },\n  { value: 'Emilee Gay', readonly: true },\n  { value: 'Selah Richardson' },\n  { value: 'Christina Erickson' },\n  { value: 'Elaina Welch', readonly: true },\n  { value: 'Houston Tran' },\n  { value: 'Richard Peterson' },\n  { value: 'Andrew Lin', readonly: true },\n  { value: 'Isabell Kaiser' },\n  { value: 'Brent Glass' },\n  { value: 'Martha Jones', readonly: true },\n  { value: 'Anton Mcclain' },\n  { value: 'Jamir Martin' },\n  { value: 'Kassandra Manning', readonly: true },\n  { value: 'Madisyn Mccormick' },\n  { value: 'Anabel Savage' },\n  { value: 'Tyler Phillips', readonly: true },\n  { value: 'Ronan Deleon' }\n];\nvar autoSuggest = document.querySelector('ef-autosuggest');\nvar input = document.getElementById('input');\n\nautoSuggest.highlightable = function(suggestion) {\n  return suggestion.readonly !== true;\n};\n\nautoSuggest.addEventListener('item-select', function(event) {\n  event.preventDefault();\n  var suggestion = event.detail.suggestion;\n  var query = event.detail.query;\n\n  // Map the value back to input\n  input.value = suggestion ? suggestion.value : query;\n});\n\nautoSuggest.renderer = function(suggestion, parameters) {\n  var mappedData = {};\n  mappedData.label = suggestion.value;\n  mappedData.disabled = suggestion.readonly;\n\n  // you can map suggestion to ef-item\n  return autoSuggest.constructor.ItemRenderer(mappedData, parameters);\n};\n\nautoSuggest.addEventListener('suggestions-fetch-requested', function(event) {\n  var query = event.detail.query;\n  autoSuggest.suggestions = query ? data.filter(function(item) {\n    return item.value.indexOf(query) !== -1;\n  }) : [];\n});","tagName":"pre"},{"text":"section {\n  height: 380px;\n  padding: 0 3px;\n}\n\nef-text-field {\n  width: 300px;\n}","tagName":"pre"},{"text":"Use custom input","tagName":"h3"},{"text":"Autosuggest can be attached to any input component. In fact, it can be attached to any HTML element as long as a constructing query object procedure is provided.","tagName":"p"},{"text":"For example, to use Multi Input instead of a standard Input: add event listeners to Multi Input in add-attach-target-events and use the remove-attach-target-events event to remove the listeners.","tagName":"p"},{"text":"autoSuggest.addEventListener('add-attach-target-events', function (ev) {\n  ev.preventDefault();\n\n  // Add event listeners to the input\n  // pipeline that run on input value change\n  multiInput.addEventListener('value-changed', autoSuggest.onInputValueChange);\n  // pipeline that run on key down\n  multiInput.addEventListener('keydown', autoSuggest.onInputKeyDown);\n  // pipeline that run on input focus\n  multiInput.addEventListener('focus', autoSuggest.onInputFocus);\n  // pipeline that run on input blur\n  multiInput.addEventListener('blur', autoSuggest.onInputBlur);\n});\n\nautoSuggest.addEventListener('remove-attach-target-events', function (ev) {\n  ev.preventDefault();\n\n  // Remove event listeners on destroy\n  multiInput.removeEventListener('value-changed', autoSuggest.onInputValueChange);\n  multiInput.removeEventListener('keydown', autoSuggest.onInputKeyDown);\n  multiInput.removeEventListener('focus', autoSuggest.onInputFocus);\n  multiInput.removeEventListener('blur', autoSuggest.onInputBlur);\n});","tagName":"pre"},{"text":"Define the query using the suggestions-query event, and the suggestion selection using the item-select event.","tagName":"p"},{"text":"autoSuggest.addEventListener('suggestions-query', function (ev) {\n  ev.preventDefault();\n\n  // The query is populated from `value`\n  autoSuggest.query = multiInput.value;\n});\n\nautoSuggest.addEventListener('item-select', function (ev) {\n  ev.preventDefault();\n\n  var suggestion = ev.detail.suggestion;\n  var method = ev.detail.method;\n\n  switch (method) {\n    // ...\n  }\n});","tagName":"pre"},{"text":"<section>\n  <ef-multi-input id=\"multi-input\" placeholder=\"Type &apos;e&apos;\"></ef-multi-input>\n  <ef-autosuggest attach=\"#multi-input\"></ef-autosuggest>\n</section>","tagName":"pre"},{"text":"var data = [{ label: 'Cornelius Martin' },\n  { label: 'Memphis Hoover' },\n  { label: 'Angela Lloyd' },\n  { label: 'Emilee Gay' },\n  { label: 'Selah Richardson' },\n  { label: 'Christina Erickson' },\n  { label: 'Elaina Welch' },\n  { label: 'Houston Tran' },\n  { label: 'Richard Peterson' },\n  { label: 'Andrew Lin' },\n  { label: 'Isabell Kaiser' },\n  { label: 'Brent Glass' },\n  { label: 'Martha Jones' },\n  { label: 'Anton Mcclain' },\n  { label: 'Jamir Martin' },\n  { label: 'Kassandra Manning' },\n  { label: 'Madisyn Mccormick' },\n  { label: 'Anabel Savage' },\n  { label: 'Tyler Phillips' },\n  { label: 'Ronan Deleon' }\n];\nvar autoSuggest = document.querySelector('ef-autosuggest');\nvar multiInput = document.getElementById('multi-input');\n\nmultiInput.addEventListener('item-added', function(event) {\n  event.preventDefault();\n\n  multiInput.value = '';\n});\n\nautoSuggest.addEventListener('add-attach-target-events', function(ev) {\n  ev.preventDefault();\n\n  // add event listeners to the input. You do not have to implement all\n  // pipeline that run on input value change\n  multiInput.addEventListener('value-changed', autoSuggest.onInputValueChange);\n  // pipeline that run on key down\n  multiInput.addEventListener('keydown', autoSuggest.onInputKeyDown);\n  // pipeline that run on input focus\n  multiInput.addEventListener('focus', autoSuggest.onInputFocus);\n  // pipeline that run on input blur\n  multiInput.addEventListener('blur', autoSuggest.onInputBlur);\n});\n\nautoSuggest.addEventListener('remove-attach-target-events', function(ev) {\n  ev.preventDefault();\n\n  // do not forget to remove event listeners on destroy\n  multiInput.removeEventListener('value-changed', autoSuggest.onInputValueChange);\n  multiInput.removeEventListener('keydown', autoSuggest.onInputKeyDown);\n  multiInput.removeEventListener('focus', autoSuggest.onInputFocus);\n  multiInput.removeEventListener('blur', autoSuggest.onInputBlur);\n});\n\nautoSuggest.addEventListener('suggestions-query', function(ev) {\n  ev.preventDefault();\n\n  // If Enter is pressed, add the value stright away\n  if (ev.detail.reason === 'enter-pressed' && multiInput.value) {\n    multiInput.add({\n      value: multiInput.value,\n      label: multiInput.value\n    });\n  }\n\n  // Otherwise call for suggestions\n  autoSuggest.query = multiInput.value;\n});\n\nautoSuggest.addEventListener('item-select', function(ev) {\n  ev.preventDefault();\n\n  var suggestion = ev.detail.suggestion;\n  var method = ev.detail.method;\n  var query = ev.detail.query;\n\n  switch (method) {\n    case 'click':\n    case 'enter':\n      multiInput.add({\n        value: suggestion.label,\n        label: suggestion.label\n      });\n\n      multiInput.value = '';\n      break;\n    case 'navigation':\n      multiInput.value = suggestion.label;\n      break;\n    case 'clear':\n      multiInput.value = '';\n      break;\n    case 'reset':\n      multiInput.value = query;\n      break;\n    default:\n      // no default\n  }\n});\n\nautoSuggest.addEventListener('suggestions-fetch-requested', function(event) {\n  var query = event.detail.query;\n  autoSuggest.suggestions = query ? data.filter(function(item) {\n    return item.label.indexOf(query) !== -1;\n  }) : [];\n});","tagName":"pre"},{"text":"section {\n  height: 380px;\n  padding: 0 3px;\n}","tagName":"pre"},{"text":"Complex query","tagName":"h3"},{"text":"In addition to string-based queries, autosuggest query also supports objects, meaning far more complex and powerful queries can be made. The following example uses a query object based on two input fields.","tagName":"p"},{"text":"<section>\n  <div class=\"container\">\n    <ef-select id=\"group\">\n      <ef-item selected>Core Team</ef-item>\n      <ef-item>Management</ef-item>\n      <ef-item>Application Team</ef-item>\n      <ef-item>Contractors</ef-item>\n    </ef-select>\n    <ef-text-field id=\"input\" placeholder=\"Type &apos;e&apos;\"></ef-text-field>\n  </div>\n  <ef-autosuggest attach=\"#input\"></ef-autosuggest>\n</section>","tagName":"pre"},{"text":"var data = [{ label: 'Cornelius Martin', group: 'Core Team' },\n  { label: 'Memphis Hoover', group: 'Contractors' },\n  { label: 'Angela Lloyd', group: 'Management' },\n  { label: 'Emilee Gay', group: 'Management' },\n  { label: 'Selah Richardson', group: 'Core Team' },\n  { label: 'Christina Erickson', group: 'Application Team' },\n  { label: 'Elaina Welch', group: 'Application Team' },\n  { label: 'Houston Tran', group: 'Contractors' },\n  { label: 'Richard Peterson', group: 'Core Team' },\n  { label: 'Andrew Lin', group: 'Management' },\n  { label: 'Isabell Kaiser', group: 'Core Team' },\n  { label: 'Brent Glass', group: 'Management' },\n  { label: 'Martha Jones', group: 'Application Team' },\n  { label: 'Anton Mcclain', group: 'Contractors' },\n  { label: 'Jamir Martin', group: 'Core Team' },\n  { label: 'Kassandra Manning', group: 'Core Team' },\n  { label: 'Madisyn Mccormick', group: 'Management' },\n  { label: 'Anabel Savage', group: 'Core Team' },\n  { label: 'Tyler Phillips', group: 'Contractors' },\n  { label: 'Ronan Deleon', group: 'Management' }\n];\nvar autoSuggest = document.querySelector('ef-autosuggest');\nvar groupEl = document.getElementById('group');\nvar inputEl = document.getElementById('input');\n\nautoSuggest.addEventListener('remove-attach-target-events', function() {\n  // Group change should instantiate inputValueChange as well\n  groupEl.addEventListener('value-changed', autoSuggest.onInputValueChange);\n});\n\nautoSuggest.renderer = function(suggestion, query) {\n  // Ensure that text highlight continues to work. Default render expects String\n  var value = query.value;\n  return autoSuggest.constructor.ItemRenderer(suggestion, value);\n};\n\nautoSuggest.addEventListener('item-select', function(ev) {\n  var method = ev.detail.method;\n  var query = ev.detail.query;\n\n  // override reset method\n  if (method === 'reset') {\n    inputEl.value = query.value;\n    ev.preventDefault();\n  }\n});\n\nautoSuggest.addEventListener('suggestions-query', function(ev) {\n  ev.preventDefault();\n\n  // construct complex query\n  autoSuggest.query = {\n    group: groupEl.value,\n    value: inputEl.value\n  };\n});\n\nautoSuggest.addEventListener('suggestions-fetch-requested', function(event) {\n  var query = event.detail.query;\n\n  // get group and value from the query\n  var group = query.group;\n  var value = query.value;\n\n  autoSuggest.suggestions = value && group ? data.filter(function(item) {\n    return item.group === group && item.label.indexOf(value) !== -1;\n  }) : [];\n});","tagName":"pre"},{"text":"section {\n  height: 380px;\n  padding: 0 3px;\n}\n\n.container {\n  display: flex;\n  flex-direction: column;\n}\n\nef-text-field,\nef-select {\n  width: 300px;\n}","tagName":"pre"},{"text":"HTML Renderer","tagName":"h3"},{"text":"In modern frameworks, it may be more practical to render suggestions directly to ef-autosuggest, rather than using the renderer function. You can achieve more consistent code and better performance, thanks to Virtual DOM.","tagName":"p"},{"text":"Set the html-renderer attribute if you intend to populate suggestions directly.","tagName":"p"},{"text":"Consider the following example in Vue.js.","tagName":"p"},{"text":"<script>\n  export default {\n    props: {\n      data: {\n        type: Array,\n        required: true\n      }\n    },\n    data: function () {\n      return {\n        query: '',\n        suggestions: []\n      };\n    }\n    methods: {\n      highlightText: function(label) {\n        return this.$refs.suggest.constructor.QueryWordSelect(label, this.query);\n      },\n      getSuggestions: function({ detail: { query } }) {\n        this.query = query;\n\n        if (!query) {\n          this.suggestions = this.data;\n        }\n\n        const re = new RegExp(autoSuggest.constructor.EscapeRegExp(query), 'i');\n        this.suggestions = this.data.filter(({ label }) => re.test(label));\n      },\n      clearSuggestions: function() {\n        this.suggestions = [];\n      },\n      selectSuggestion: function(ev) {\n        const { detail: { method, suggestion } } = ev;\n        if (method === 'click' || method === 'enter') {\n          const { value, type } = suggestion;\n          this.$emit('suggestion-selected', { value, type });\n        }\n      },\n      mounted: function() {\n        this.$refs.suggest.attach = this.$refs.input;\n      }\n    }\n  };\n</script>\n<template>\n  <div>\n    <ef-text-field ref=\"input\"></ef-text-field>\n    <ef-autosuggest\n      ref=\"suggest\"\n      html-renderer\n      :suggestions.prop=\"this.suggestions\"\n      @item-select=\"selectSuggestion\"\n      @suggestions-clear-requested.prevent=\"clearSuggestions\"\n      @suggestions-fetch-requested=\"getSuggestions\">\n      <ef-item\n        v-for=\"(suggestion) in this.suggestions\"\n        :key=\"suggestion.id\"\n        v-html=\"highlightText(suggestion.label)\"></ef-item>\n    </ef-autosuggest>\n  </div>\n</template>","tagName":"pre"},{"text":"Suggestions must be passed to ef-autosuggest. ef-autosuggest.suggestions must match the rendered element exactly, i.e. ef-autosuggest.suggestions[0] is identical to the first rendered element.","tagName":"p"},{"text":"Helper methods","tagName":"h2"},{"text":"Autosuggest provides some static helper methods.You can use them through class name, Autosuggest.<HELPER_METHOD_NAME>() or the property of the constructor: this.constructor.<HELPER_METHOD_NAME>().","tagName":"p"},{"text":"EscapeRegExp (text)","tagName":"h3"},{"text":"Remove forbidden characters from the given string","tagName":"p"},{"text":"Parameters:","tagName":"p"},{"text":"\nName\nType\nDescription\n","tagName":"tr"},{"text":"\ntext\nstring\nString to process\n","tagName":"tr"},{"text":"Return: StringString with forbidden characters removed","tagName":"p"},{"text":"QueryWordSelect (text, query, pattern (optional))","tagName":"h3"},{"text":"Replace all matched query words with an HTML string","tagName":"p"},{"text":"Parameters:","tagName":"p"},{"text":"\nName\nType\nDescription\n","tagName":"tr"},{"text":"\ntext\nstring\nString to process\n","tagName":"tr"},{"text":"\nquery\nstring\nWord to match in the given string\n","tagName":"tr"},{"text":"\npattern (Optional)\nstring\nHTML string to use instead of the default, which is <span class=\"highlighted\">$1</span>\n","tagName":"tr"},{"text":"Return: StringString with matching text processed by pattern","tagName":"p"},{"text":"ItemRenderer (suggestion, query)","tagName":"h3"},{"text":"Construct the ef-item element from the suggestion object using one-to-one mapping.","tagName":"p"},{"text":"Parameters:","tagName":"p"},{"text":"\nName\nType\nDescription\n","tagName":"tr"},{"text":"\nsuggestion\nobject\nSuggestion item object\n","tagName":"tr"},{"text":"\nquery\nstring\nQuery word\n","tagName":"tr"},{"text":"Return: ef-itemItem element","tagName":"p"},{"text":"Glossary","tagName":"h2"},{"text":"Query","tagName":"p"},{"text":"Object used to perform suggestions searching, and typically used to highlight the matched text on the suggestion item. In most scenarios, a query is text entered into an input box but the query can be an object to support more complex searching, see Complex Query.","tagName":"p"},{"text":"Complex Query","tagName":"a"},{"text":"Value","tagName":"p"},{"text":"Object that is displayed in the input box. In most cases, the value is the input text.","tagName":"p"},{"text":"Reason","tagName":"p"},{"text":"Additional information when autosuggest is going to fetch the data. It indicates why autosuggest wants to update the suggestions list. reason can be used to control the behavior of autosuggestion, such as implementing paging.","tagName":"p"},{"text":"\nReason\nDescription\n","tagName":"tr"},{"text":"\nvalue-changed\nInput value has changed.\n","tagName":"tr"},{"text":"\ninput-focus\nrequest-on-focus is set and the input has received focus.\n","tagName":"tr"},{"text":"\nsuggestions-revealed\nAutosuggest popup is hidden and users pressed Up or Down key to open suggestions.\n","tagName":"tr"},{"text":"\nenter-pressed\nAutosuggest is hidden and user pressed Enter key to open suggestions\n","tagName":"tr"},{"text":"\nescape-pressed\nAutosuggest is hidden, the input has value and users pressed Escape. Can be used when suggestions are shown for empty value.\n","tagName":"tr"},{"text":"\nmore-results\nmore-results is set and users clicked on Get More Results.\n","tagName":"tr"},{"text":"Method","tagName":"p"},{"text":"Additional information when the user selects a suggestion item. method represents how the suggestion has been selected. The developer can control the reaction on different selection methods.","tagName":"p"},{"text":"\nMethod\nDescription\nDefault Action\n","tagName":"tr"},{"text":"\nclick\nThe user clicked on suggestion.\nUpdate input value from clicked suggestion and close auto suggest.\n","tagName":"tr"},{"text":"\nenter\nThe user pressed Enter.\nUpdate input value from selected/first suggestion and close auto suggest.\n","tagName":"tr"},{"text":"\nnavigation\nThe user pressed Up or Down.\nUpdate input value.\n","tagName":"tr"},{"text":"\nreset\nThe user pressed Escape.\nReset input value if set using navigation and close auto suggest.\n","tagName":"tr"},{"text":"\nclear\nThe user pressed Escape when auto suggest popup is closed.\nClear the input value.\n","tagName":"tr"},{"text":"Slots","tagName":"h2"},{"text":"Slot is a placeholder inside a component that you can fill with your own content. This component provides slot for the following.","tagName":"p"},{"text":"headerHeader slot.","tagName":"p"},{"text":"footerFooter slot.","tagName":"p"},{"text":"API Reference","tagName":"h2"},{"text":"Attributes","tagName":"h3"},{"text":"Properties","tagName":"h3"},{"text":"Methods","tagName":"h3"},{"text":"Events","tagName":"h3"}]},{"title":"Calendar","filename":"elements/calendar.html","contents":[{"text":"<ef-calendar></ef-calendar>\n<ef-calendar range values=\"2020-04-01,2020-04-21\"></ef-calendar>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"ef-calendar {\n  margin-right: 20px;\n}","tagName":"pre"},{"text":"The Calendar control allows switching days, months and years.","tagName":"p"},{"text":"Custom content can be added using the footer slot","tagName":"p"},{"text":"footer slot","tagName":"a"},{"text":"Setting the date","tagName":"h3"},{"text":"The initial value of the calendar can be set using the value property. Value must be provided in yyyy-MM-dd format, for instance: \"2020-04-21\".","tagName":"p"},{"text":"<ef-calendar value=\"2020-04-21\"></ef-calendar>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"<ef-calendar value=\"2020-04-21\"></ef-calendar>","tagName":"pre"},{"text":"Defining the view","tagName":"h3"},{"text":"By default, the calendar will show the current month.This can be customized using view and it must be in yyyy-dd format, e.g. \"2020-04\".","tagName":"p"},{"text":"<ef-calendar></ef-calendar>\n<ef-calendar view=\"2020-04\"></ef-calendar>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"ef-calendar {\n  margin-right: 20px;\n}","tagName":"pre"},{"text":"<ef-calendar view=\"2020-04\"></ef-calendar>","tagName":"pre"},{"text":"Defining min and max values","tagName":"h3"},{"text":"You can restrict the available date range by passing in min and max values.","tagName":"p"},{"text":"<ef-calendar min=\"1990-01-05\" view=\"1990-01\"></ef-calendar>\n<ef-calendar max=\"2100-12-25\" view=\"2100-12\"></ef-calendar>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"ef-calendar {\n  margin-right: 20px;\n}","tagName":"pre"},{"text":"<ef-calendar min=\"1990-01-05\" view=\"1990-01\"></ef-calendar>\n<ef-calendar max=\"2100-12-25\" view=\"2100-12\"></ef-calendar>","tagName":"pre"},{"text":"Multiple select","tagName":"h3"},{"text":"You can switch the calendar to multiple select mode by setting multiple.","tagName":"p"},{"text":"<ef-calendar multiple></ef-calendar>\n<ef-calendar multiple values=\"2020-04-01,2020-04-11,2020-04-21\"></ef-calendar>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"ef-calendar {\n  margin-right: 20px;\n}","tagName":"pre"},{"text":"<ef-calendar multiple></ef-calendar>\n<ef-calendar multiple values=\"2020-04-01,2020-04-11,2020-04-21\"></ef-calendar>","tagName":"pre"},{"text":"Range select","tagName":"h3"},{"text":"You can switch the calendar to range select mode by setting range. You cannot have multiple ranges.","tagName":"p"},{"text":"<ef-calendar range></ef-calendar>\n<ef-calendar range values=\"2020-04-01,2020-04-21\"></ef-calendar>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"ef-calendar {\n  margin-right: 20px;\n}","tagName":"pre"},{"text":"<ef-calendar range></ef-calendar>\n<ef-calendar range values=\"2020-04-01,2020-04-21\"></ef-calendar>","tagName":"pre"},{"text":"Filtering dates","tagName":"h3"},{"text":"ef-calendar has two internal filtering options. One for enabling weekdays only and another for only enabling weekends.","tagName":"p"},{"text":"These are basic filters. More complex ones can be added using the filter option.","tagName":"p"},{"text":"<ef-calendar weekdays-only></ef-calendar>\n<ef-calendar weekends-only></ef-calendar>\n<ef-calendar id=\"custom-filter\"></ef-calendar>","tagName":"pre"},{"text":"var el = document.getElementById('custom-filter');\nel.filter = function(value) {\n  var date = new Date(value);\n  return date.getDate() % 2; // odd dates only\n};","tagName":"pre"},{"text":"ef-calendar {\n  margin-right: 20px;\n}","tagName":"pre"},{"text":"<ef-calendar weekdays-only></ef-calendar>\n<ef-calendar weekends-only></ef-calendar>\n<ef-calendar id=\"custom-filter\"></ef-calendar>\n<script>\n  var el = document.getElementById('custom-filter');\n  el.filter = function (value) {\n    var date = new Date(value);\n    return date.getDate() % 2; // odd dates only\n  };\n</script>","tagName":"pre"},{"text":"Setting locale","tagName":"h3"},{"text":"By default the calendar uses system default locale (or US English if undefined). You can change the locale by setting the lang attribute either globally or locally.","tagName":"p"},{"text":"lang","tagName":"a"},{"text":"The first day of the week is defined by the locale. You can override this by setting first-day-of-week.","tagName":"p"},{"text":"<ef-calendar lang=\"th\" value=\"2019-05-21\"></ef-calendar>\n<ef-calendar first-day-of-week=\"3\" value=\"2019-05-21\"></ef-calendar>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"ef-calendar {\n  margin-right: 20px;\n}","tagName":"pre"},{"text":"<ef-calendar lang=\"th\" value=\"2019-05-21\"></ef-calendar>\n<ef-calendar first-day-of-week=\"3\" value=\"2019-05-21\"></ef-calendar>","tagName":"pre"},{"text":"Adding Footer Content","tagName":"h3"},{"text":"The calendar supports adding footer content. This can be used to give information about the date entry, or to provide additional controls like 'reset'.","tagName":"p"},{"text":"<ef-calendar>\n  <div slot=\"footer\">\n    <span>Hey there &#x1F44B;</span>\n    <a href=\"javascript:reset()\">Reset</a>\n  </div>\n</ef-calendar>","tagName":"pre"},{"text":"var el = document.querySelector('ef-calendar');\n\nfunction reset() {\n  el.value = el.view = '';\n}","tagName":"pre"},{"text":"div {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}","tagName":"pre"},{"text":"<ef-calendar>\n  <div slot=\"footer\">\n    <span>Hey there 👋</span>\n    <a href=\"javascript:reset()\">Reset</a>\n  </div>\n</ef-calendar>","tagName":"pre"},{"text":"Slots","tagName":"h2"},{"text":"API Reference","tagName":"h2"},{"text":"Attributes","tagName":"h3"},{"text":"Properties","tagName":"h3"},{"text":"Events","tagName":"h3"}]},{"title":"Checkbox","filename":"elements/checkbox.html","contents":[{"text":"<div class=\"container\">\n  <ef-checkbox>Unchecked</ef-checkbox>\n  <ef-checkbox checked>Checked</ef-checkbox>\n  <ef-checkbox indeterminate>Partially checked</ef-checkbox>\n  <ef-checkbox style=\"width: 80px;\">Fixed width</ef-checkbox>\n</div>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":".container {\n  display: flex;\n  flex-direction: column;\n}\n\nef-checkbox {\n  margin-left: 3px;\n}","tagName":"pre"},{"text":"ef-checkbox is a form control for selecting one or several options. States of check box can be checked, unchecked, and indeterminate.","tagName":"p"},{"text":"Using checkbox","tagName":"h3"},{"text":"Checkbox can be set to the checked state by adding the checked attribute. You can also use the attrribute to determine the current state of a checkbox. The indeterminate state can only be set by code, not by user interaction.","tagName":"p"},{"text":"<ef-checkbox>Unchecked</ef-checkbox>\n<ef-checkbox checked>Checked</ef-checkbox>\n<ef-checkbox indeterminate>Partially checked</ef-checkbox>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"ef-checkbox {\n  margin-left: 3px;\n}","tagName":"pre"},{"text":"<ef-checkbox>Unchecked</ef-checkbox>\n<ef-checkbox checked>Checked</ef-checkbox>\n<ef-checkbox indeterminate>Partially checked</ef-checkbox>","tagName":"pre"},{"text":"Disabled and readonly","tagName":"h3"},{"text":"ef-checkbox can be set to disabled or readonly by using the associated attributes.","tagName":"p"},{"text":"<ef-checkbox checked>Default</ef-checkbox>\n<ef-checkbox disabled checked>Disabled</ef-checkbox>\n<ef-checkbox readonly checked>Readonly</ef-checkbox>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"ef-checkbox {\n  margin-left: 3px;\n}","tagName":"pre"},{"text":"<ef-checkbox checked>Default</ef-checkbox>\n<ef-checkbox disabled checked>Disabled</ef-checkbox>\n<ef-checkbox readonly checked>Readonly</ef-checkbox>","tagName":"pre"},{"text":"Events","tagName":"h3"},{"text":"The checked-changed event can be used to recognize when the state of a checkbox has been changed. In code, the event can also check if the state is set to checked or indeterminate by querying the associated property.","tagName":"p"},{"text":"<div class=\"container\">\n  <ef-checkbox id=\"Checkbox\">Click Me</ef-checkbox>\n  <span id=\"text\"></span>\n</div>","tagName":"pre"},{"text":"var checkbox = document.getElementById(\"Checkbox\");\ncheckbox.addEventListener('checked-changed', function(e) {\n  var text = e.target.checked ? 'Checked!' : 'Unchecked!';\n  document.getElementById('text').textContent = text;\n});","tagName":"pre"},{"text":".container {\n  display: inline-flex;\n  align-items: center;\n}\n\n#text {\n  padding-left: 20px;\n}\n\nef-checkbox {\n  margin-left: 3px;\n}","tagName":"pre"},{"text":"<ef-checkbox id=\"Checkbox\">Click Me</ef-checkbox>\n\n<script>\n  var checkbox = document.getElementById(\"Checkbox\");\n  checkbox.addEventListener('checked-changed', function (e) {\n    e.target.checked ? console.log('Checked'):console.log('Unchecked')\n    });\n</script>","tagName":"pre"},{"text":"API Reference","tagName":"h2"},{"text":"Attributes","tagName":"h3"},{"text":"Properties","tagName":"h3"},{"text":"Events","tagName":"h3"}]},{"title":"Color Dialog","filename":"elements/color-dialog.html","contents":[{"text":"<ef-color-dialog id=\"d1\" opened></ef-color-dialog>\n<div class=\"dialog-container\">\n  <button onclick=\"openDialog()\">Open Color Dialog</button>\n</div>","tagName":"pre"},{"text":"function openDialog() {\n  var dlg = document.getElementById('d1');\n  dlg.opened = true;\n}","tagName":"pre"},{"text":".dialog-container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  height: 450px;\n}","tagName":"pre"},{"text":"ef-color-dialog allows users to select any color. You can set the value as a hex color code (short hex is also supported) or as Red/Green/Blue (0 - 255). Users can choose a color directly from a pallete UI or via input boxes in the dialog.","tagName":"p"},{"text":"Basic usage","tagName":"h3"},{"text":"Color dialog can be opened and closed just like any popup window, by setting the attribute/property opened.","tagName":"p"},{"text":"<ef-color-dialog opened id=\"colorDialog\"></ef-color-dialog>","tagName":"pre"},{"text":"Preset default value","tagName":"h3"},{"text":"Color Dialog also accepts an initial color value. To set the default value, use the value attribute.","tagName":"p"},{"text":"<ef-color-dialog id=\"d1\" opened value=\"#9966ff\"></ef-color-dialog>\n<div class=\"dialog-container\">\n  <button onclick=\"openDialog()\">Open Color Dialog</button>\n</div>","tagName":"pre"},{"text":"function openDialog() {\n  var dlg = document.getElementById('d1');\n  dlg.opened = true;\n}","tagName":"pre"},{"text":".dialog-container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  height: 450px;\n}","tagName":"pre"},{"text":"<ef-color-dialog value=\"#9966ff\"></ef-color-dialog>","tagName":"pre"},{"text":"'No Color' option","tagName":"h3"},{"text":"In some circumstances, it might be necessary for the component to allow a user to select \"no color.\" This option can be activated using the allow-nocolor property/attribute.  ","tagName":"p"},{"text":"When users select \"no color\" from the UI, the color dialog sets the attribute/property value to null.","tagName":"p"},{"text":"<ef-color-dialog id=\"d1\" opened allow-nocolor></ef-color-dialog>\n<div class=\"dialog-container\">\n  <button onclick=\"openDialog()\">Open Color Dialog</button>\n</div>","tagName":"pre"},{"text":"var d1 = document.getElementById('d1');\n\nfunction openDialog() {\n  var dlg = document.getElementById('d1');\n  dlg.opened = true;\n}","tagName":"pre"},{"text":".dialog-container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  height: 450px;\n}","tagName":"pre"},{"text":"<ef-color-dialog allow-nocolor></ef-color-dialog>","tagName":"pre"},{"text":"API Reference","tagName":"h2"},{"text":"Attributes","tagName":"h3"},{"text":"Properties","tagName":"h3"},{"text":"Events","tagName":"h3"}]},{"title":"Combo Box","filename":"elements/combo-box.html","contents":[{"text":"<div class=\"wrapper\">\n  <ef-combo-box opened></ef-combo-box>\n</div>","tagName":"pre"},{"text":"var comboBox = document.querySelector('ef-combo-box');\n\ncomboBox.data = [\n  { label: 'EMEA', type: 'header' },\n  { label: 'France', value: 'fr' },\n  { label: 'Russian Federation', value: 'ru' },\n  { label: 'Spain', value: 'es' },\n  { label: 'United Kingdom', value: 'gb', selected: true },\n  { label: 'APAC', type: 'header' },\n  { label: 'China', value: 'ch' },\n  { label: 'Australia', value: 'au' },\n  { label: 'India', value: 'in' },\n  { label: 'Thailand', value: 'th' },\n  { label: 'AMERS', type: 'header' },\n  { label: 'Canada', value: 'ca' },\n  { label: 'United States', value: 'us' },\n  { label: 'Brazil', value: 'br' },\n  { label: 'Argentina', value: 'ar' }\n];","tagName":"pre"},{"text":".wrapper {\n  padding: 5px;\n  height: 300px;\n}","tagName":"pre"},{"text":"ef-combo-box displays a text input and an associated pop-up element that helps users set a value.","tagName":"p"},{"text":"Basic usage","tagName":"h2"},{"text":"The ef-combo-box uses the data property that follow ComboBoxData interface.","tagName":"p"},{"text":"ComboBoxData","tagName":"a"},{"text":"<div class=\"wrapper\">\n  <ef-combo-box></ef-combo-box>\n</div>","tagName":"pre"},{"text":"var comboBox = document.querySelector('ef-combo-box');\ncomboBox.data = [\n  { label: 'EMEA', type: 'header' },\n  { label: 'France', value: 'fr' },\n  { label: 'Russian Federation', value: 'ru' },\n  { label: 'Spain', value: 'es' },\n  { label: 'United Kingdom', value: 'gb', selected: true },\n  { label: 'APAC', type: 'header' },\n  { label: 'China', value: 'ch' },\n  { label: 'Australia', value: 'au' },\n  { label: 'India', value: 'in' },\n  { label: 'Thailand', value: 'th' },\n  { label: 'AMERS', type: 'header' },\n  { label: 'Canada', value: 'ca' },\n  { label: 'United States', value: 'us' },\n  { label: 'Brazil', value: 'br' },\n  { label: 'Argentina', value: 'ar' }\n];","tagName":"pre"},{"text":".wrapper {\n  padding: 5px;\n  height: 300px;\n}","tagName":"pre"},{"text":"<ef-combo-box></ef-combo-box>","tagName":"pre"},{"text":"const comboBox = document.querySelector('ef-combo-box');\ncomboBox.data = [\n  { label: 'EMEA', type: 'header' },\n  { label: 'France', value: 'fr' },\n  { label: 'United Kingdom', value: 'gb', selected: true }\n  // ...\n];","tagName":"pre"},{"text":"Data property interface","tagName":"h2"},{"text":"The ef-combo-box uses the ComboBoxData interface for its data items which is described below.","tagName":"p"},{"text":"\nName\nType\nDescription\n","tagName":"tr"},{"text":"\nlabel\nstring\nItem's label\n","tagName":"tr"},{"text":"\nvalue\nstring\nValue of an item\n","tagName":"tr"},{"text":"\nselected\nboolean\nSelection state of the item\n","tagName":"tr"},{"text":"\nreadonly\nboolean\nSets the item to be readonly\n","tagName":"tr"},{"text":"\ndisabled\nboolean\nSets the item to be disabled\n","tagName":"tr"},{"text":"Value","tagName":"h2"},{"text":"When an item is selected, the item's value property will become Combo Box's new value.","tagName":"p"},{"text":"Value can be set using the selected property or by programmatically setting the Combo Box value property.","tagName":"p"},{"text":"comboBox.data = [\n  // ...\n  { label: 'United Kingdom', value: 'gb', selected: true }\n  // ...\n];","tagName":"pre"},{"text":"comboBox.value = 'gb';","tagName":"pre"},{"text":"Values","tagName":"h2"},{"text":"When Combo Box is in multiple mode it uses the values property to return multiple values.","tagName":"p"},{"text":"Values can be set using the selected property or by programmatically setting the Combo Box values property.","tagName":"p"},{"text":"comboBox.data = [\n  // ...\n  { label: 'United Kingdom', value: 'gb', selected: true },\n  { label: 'Thailand', value: 'th', selected: true }\n  // ...\n];","tagName":"pre"},{"text":"comboBox.values = ['gb', 'th'];","tagName":"pre"},{"text":"Combo Box can only select data it already has.","tagName":"p"},{"text":"Free Text mode","tagName":"h2"},{"text":"Set free-text to allow Combo Box to contain any arbitrary value. This mode is designed to cover a search input with suggestions scenario.","tagName":"p"},{"text":"<ef-combo-box free-text></ef-combo-box>","tagName":"pre"},{"text":"<div class=\"wrapper\">\n  <ef-combo-box free-text></ef-combo-box>\n</div>","tagName":"pre"},{"text":"var comboBox = document.querySelector('ef-combo-box');\ncomboBox.data = [\n  { label: 'EMEA', type: 'header' },\n  { label: 'France', value: 'France' },\n  { label: 'Russian Federation', value: 'Russian Federation' },\n  { label: 'Spain', value: 'Spain' },\n  { label: 'United Kingdom', value: 'United Kingdom' },\n  { label: 'APAC', type: 'header' },\n  { label: 'China', value: 'China' },\n  { label: 'Australia', value: 'Australia' },\n  { label: 'India', value: 'India' },\n  { label: 'Thailand', value: 'Thailand' },\n  { label: 'AMERS', type: 'header' },\n  { label: 'Canada', value: 'Canada' },\n  { label: 'United States', value: 'United States' },\n  { label: 'Brazil', value: 'Brazil' },\n  { label: 'Argentina', value: 'Argentina' }\n];","tagName":"pre"},{"text":".wrapper {\n  padding: 5px;\n  height: 300px;\n}","tagName":"pre"},{"text":"Filtering","tagName":"h2"},{"text":"Default filtering is applied on the data label property. Filtering happens when the user modifies the input text.","tagName":"p"},{"text":"The developer may wish to do their own filtering by implementing the filter property.","tagName":"p"},{"text":"A typical example is to apply filter on multiple data properties (e.g. label and value as in the example below).","tagName":"p"},{"text":"// Make a scoped re-usable filter for performance\nconst customFilter = (comboBox) => {\n  let query = ''; // reference query string for validating queryRegExp cache state\n  let queryRegExp; // cache RegExp\n\n  // Get current RegExp, or renew if out of date\n  // this is fetched on demand by filter/renderer\n  // only created once per query\n  const getRegularExpressionOfQuery = () => {\n    if (comboBox.query !== query || !queryRegExp) {\n      query = comboBox.query || '';\n      queryRegExp = new RegExp(query.replace(/(\\W)/g, '\\\\$1'), 'i');\n    }\n    return queryRegExp;\n  };\n\n  // return scoped custom filter\n  return (item) => {\n    const regex = getRegularExpressionOfQuery();\n      // test on value or label\n      const result = query === item.value || regex.test(item.label);\n      regex.lastIndex = 0; // do not forget to reset last index\n      return result;\n    };\n};\n\ncomboBox.filter = customFilter(comboBox);","tagName":"pre"},{"text":"<div class=\"wrapper\">\n  <ef-combo-box placeholder=\"Type &quot;th&quot; or &quot;Thailand&quot;\"></ef-combo-box>\n</div>","tagName":"pre"},{"text":"var comboBox = document.querySelector('ef-combo-box');\ncomboBox.data = [\n  { label: 'EMEA', type: 'header' },\n  { label: 'France', value: 'fr' },\n  { label: 'Russian Federation', value: 'ru' },\n  { label: 'Spain', value: 'es' },\n  { label: 'United Kingdom', value: 'gb' },\n  { label: 'APAC', type: 'header' },\n  { label: 'China', value: 'ch' },\n  { label: 'Australia', value: 'au' },\n  { label: 'India', value: 'in' },\n  { label: 'Thailand', value: 'th' },\n  { label: 'AMERS', type: 'header' },\n  { label: 'Canada', value: 'ca' },\n  { label: 'United States', value: 'us' },\n  { label: 'Brazil', value: 'br' },\n  { label: 'Argentina', value: 'ar' }\n];\nvar customFilter = function(comboBox) {\n  var query = '';\n  var queryRegExp;\n  var getRegularExpressionOfQuery = function() {\n    if (comboBox.query !== query || !queryRegExp) {\n      query = comboBox.query || '';\n      queryRegExp = new RegExp(query.replace(/(\\W)/g, '\\\\$1'), 'i');\n    }\n    return queryRegExp;\n  };\n  return function(item) {\n    var regex = getRegularExpressionOfQuery();\n    var result = query === item.value || regex.test(item.label);\n    regex.lastIndex = 0; // do not forget to reset last index\n    return result;\n  };\n};\n\ncomboBox.filter = customFilter(comboBox);","tagName":"pre"},{"text":".wrapper {\n  padding: 5px;\n  height: 300px;\n}","tagName":"pre"},{"text":"Regardless of filter configuration Combo Box always treats type: 'header' items as group headers, which persist as long as at least one item within the group is visible.","tagName":"p"},{"text":"Asynchronous filtering","tagName":"h2"},{"text":"The component's built-in filter can only be used with pre-loaded data. However, you can still implement Asynchronous filtering by following these simple steps.","tagName":"p"},{"text":"First, you need to remove the default filter:","tagName":"p"},{"text":"comboBox.filter = null;","tagName":"pre"},{"text":"If the Combo Box value is set, you must ensure that the corresponding data item is always present.","tagName":"p"},{"text":"if (comboBox.value) {\n  comboBox.data = fetch(`/give-me-data?v=${comboBox.value}`);\n}","tagName":"pre"},{"text":"To avoid excessive calls to the server you may want to set query-debounce-rate.","tagName":"p"},{"text":"<ef-combo-box query-debounce-rate=\"200\"></ef-combo-box>","tagName":"pre"},{"text":"Finally, listen for the query-changed event to make calls to the server and set the data property. Combo Box moves itself to the loading state.","tagName":"p"},{"text":"combo.addEventListener('query-changed', async () => {\n  comboBox.data = fetch(`/give-me-data?q=${comboBox.query}&v=${comboBox.value}`);\n});","tagName":"pre"},{"text":"In the example below we mimic asynchronous filtering with setTimeout.","tagName":"p"},{"text":"<div class=\"wrapper\">\n  <ef-combo-box value=\"gb\" query-debounce-rate=\"200\"></ef-combo-box>\n</div>","tagName":"pre"},{"text":"// A collection of data our search is based on\nvar data = [\n  { label: 'France', value: 'fr' },\n  { label: 'Russian Federation', value: 'ru' },\n  { label: 'Spain', value: 'es' },\n  { label: 'United Kingdom', value: 'gb' },\n  { label: 'China', value: 'ch' },\n  { label: 'Australia', value: 'au' },\n  { label: 'India', value: 'in' },\n  { label: 'Thailand', value: 'th' },\n  { label: 'Canada', value: 'ca' },\n  { label: 'United States', value: 'us' },\n  { label: 'Brazil', value: 'br' },\n  { label: 'Argentina', value: 'ar' }\n];\n\nvar comboBox = document.querySelector('ef-combo-box');\n\n// You **must** reset the default filter\ncomboBox.filter = null;\n\n// A function to make request. In real life scenario it may wrap fetch\nvar request = function(query, value) {\n  var regex = new RegExp(query.replace(/(\\W)/g, '\\\\$1'), 'i');\n\n  // Always keep a promise to let Combo Box know that the data is loading\n  return new Promise(function(resolve) {\n    var filterData = [];\n    if (query || value) {\n      for (var i = 0; i < data.length; i += 1) {\n        var item = data[i];\n        // Include element itself\n        // Mark value hidden if it does not match search query\n        if (value && item.value === value) {\n          filterData.push(Object.assign({}, item, {\n            selected: true,\n            hidden: query ? !regex.test(item.label) : false\n          }));\n          regex.lastIndex = 0;\n          continue;\n        }\n\n        if (query && regex.test(item.label)) {\n          filterData.push(item);\n          regex.lastIndex = 0;\n        }\n      }\n    }\n    setTimeout(function() {\n      resolve(filterData);\n    }, 500);\n  });\n}\n\n// Populate self with the initial value\ncomboBox.data = request('', 'gb');\n\n// Listen for query change event and make the request\ncomboBox.addEventListener('query-changed', function(event) {\n  comboBox.data = request(comboBox.query, comboBox.value);\n});","tagName":"pre"},{"text":".wrapper {\n  padding: 5px;\n  height: 300px;\n}","tagName":"pre"},{"text":"Custom renderer","tagName":"h2"},{"text":"Combo Box supports custom rendering by providing a renderer function to the renderer property. The renderer receives a data item, Collection Composer and previously mapped item elements (if any), and must return an HTMLElement.","tagName":"p"},{"text":"The preferred approach is to extend the DefaultRender that comes with Combo Box. The default renderer uses Item elements, and supports highlighted, selected, disabled, hidden and readonly states.","tagName":"p"},{"text":"Item","tagName":"a"},{"text":"import { DefaultRenderer } from '../lib/ef-combo-box';\n\n// Create a re-useable renderer that shows Flags next to the country\nclass FlagRender extends DefaultRenderer {\n  constructor (comboBox) {\n    // Keep the reference to the default renderer\n    const defaultRenderer = super(comboBox);\n    // store reference to flag for easy access.\n    // Use WeakMap to not care about memory leaks\n    const flagMap = new WeakMap();\n\n    // Return the closure\n    return (item, composer, element) => {\n      element = defaultRenderer(item, composer, element);\n      const type = composer.getItemPropertyValue(item, 'type');\n      let flagElement = flagMap.get(element);\n      if (!flagElement && (!type || type === 'text')) {\n        // Text items\n        flagElement = document.createElement('ef-flag');\n        flagElement.slot = 'left'; // use ef-item slotted content\n        element.appendChild(flagElement);\n        flagMap.set(element, flagElement);\n      }\n      else if (flagElement && type && type !== 'text') {\n        // Header items, which should not have a flag\n        // Make sure that flag element is removed\n        flagElement.parentNode.removeChild(flagElement);\n        flagElement.remove(element, flagElement);\n        flagElement = null;\n      }\n\n      // Make sure that you can re-use the same element with new data item\n      if (flagElement) {\n        flagElement.flag = composer.getItemPropertyValue(item, 'value');\n      }\n\n      return element;\n    };\n  }\n}\ncomboBox.renderer = new FlagRender(comboBox);","tagName":"pre"},{"text":"As an alternative you can provide your own renderer. If you go that route, you must ensure that, at a minimum, the highlighted, selected and hidden states are covered.","tagName":"p"},{"text":"comboBox.renderer = (item, composer, element) => {\n  // Make sure to re-use the same element for increased performance\n  if (!element) {\n    element = document.createElement('div');\n    element.style.setProperty('margin', '5px 10px');\n    element.style.setProperty('padding', '5px 0');\n  }\n\n  // All item properties are read using the Collection Composer\n  const type = composer.getItemPropertyValue(item, 'type');\n  const label = composer.getItemPropertyValue(item, 'label');\n  const selected = composer.getItemPropertyValue(item, 'selected') === true;\n  const highlighted = composer.getItemPropertyValue(item, 'highlighted') === true;\n  const hidden = composer.getItemPropertyValue(item, 'hidden') === true;\n\n  // Style the element accordingly\n  element.style.setProperty('display', hidden ? 'none': 'block');\n  element.textContent = label;\n\n  let colour = 'grey';\n  if (type === 'header') {\n    colour = 'red';\n  }\n  else if (highlighted) {\n    colour = 'green';\n  }\n  else if (selected) {\n    colour = 'blue';\n  }\n\n  element.style.setProperty('color', colour);\n\n  return element;\n};","tagName":"pre"},{"text":"<div class=\"wrapper\">\n  <ef-combo-box opened></ef-combo-box>\n</div>","tagName":"pre"},{"text":"var comboBox = document.querySelector('ef-combo-box');\n\ncomboBox.data = [\n  { label: 'EMEA', type: 'header' },\n  { label: 'France', value: 'fr' },\n  { label: 'Russian Federation', value: 'ru' },\n  { label: 'Spain', value: 'es' },\n  { label: 'United Kingdom', value: 'gb', selected: true },\n  { label: 'APAC', type: 'header' },\n  { label: 'China', value: 'ch' },\n  { label: 'Australia', value: 'au' },\n  { label: 'India', value: 'in' },\n  { label: 'Thailand', value: 'th' },\n  { label: 'AMERS', type: 'header' },\n  { label: 'Canada', value: 'ca' },\n  { label: 'United States', value: 'us' },\n  { label: 'Brazil', value: 'br' },\n  { label: 'Argentina', value: 'ar' }\n];\n\n// Use ES5 syntax here for compatibility\n// If possible, use ESM import and classes instead:\n// import { DefaultRenderer } from '../lib/ef-combo-box';\n// class FlagRender extends DefaultRenderer { /* ... */ }\nvar createFlagRender = function(context) {\n  // Keep the reference to the default renderer\n  var defaultRenderer = context.renderer;\n\n  // store reference to flag for easy access.\n  // Use WeakMap to not care about memory leaks\n  var flagMap = new WeakMap();\n\n  // Return the closure\n  return function(item, composer, element) {\n    element = defaultRenderer(item, composer, element);\n    var type = composer.getItemPropertyValue(item, 'type');\n    var flagElement = flagMap.get(element);\n    if (!flagElement && (!type || type === 'text')) {\n      // Text items\n      flagElement = document.createElement('ef-flag');\n      flagElement.slot = 'left';\n      element.appendChild(flagElement);\n      flagMap.set(element, flagElement);\n    } else if (flagElement && type && type !== 'text') {\n      // Header items, which should not have a flag\n      // Make sure that flag element is removed\n      flagElement.parentNode.removeChild(flagElement);\n      flagMap.remove(element, flagElement);\n      flagElement = null;\n    }\n\n    // Make sure that you can re-use the same element with new data item\n    if (flagElement) {\n      flagElement.flag = composer.getItemPropertyValue(item, 'value');\n    }\n\n    return element;\n  };\n};\n\nvar setRenderer = function() {\n  comboBox.renderer = createFlagRender(comboBox);\n};\n\nif (customElements.get('ef-combo-box')) {\n  setRenderer();\n} else {\n  customElements.whenDefined('ef-combo-box').then(setRenderer);\n}","tagName":"pre"},{"text":".wrapper {\n  padding: 5px;\n  height: 300px;\n}","tagName":"pre"},{"text":"Customize popup panel size","tagName":"h2"},{"text":"By default the popup width is equivalent to the input box. However, it can be overridden using CSS.","tagName":"p"},{"text":"\nCSS Variable Name\nDescription\n","tagName":"tr"},{"text":"\n--list-max-width\nMax width of popup list\n","tagName":"tr"},{"text":"\n--list-max-height\nMax height of popup list\n","tagName":"tr"},{"text":"API Reference","tagName":"h2"},{"text":"Attributes","tagName":"h3"},{"text":"Properties","tagName":"h3"},{"text":"Events","tagName":"h3"}]},{"title":"Counter","filename":"elements/counter.html","contents":[{"text":"<ef-counter value=\"20\"></ef-counter>\n<ef-counter max=\"100\" value=\"150\"></ef-counter>\n<ef-counter value=\"1999\"></ef-counter>\n<ef-counter max=\"1000\" value=\"1999\"></ef-counter>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"ef-counter is a badge component which can be used to show a number of selected items.","tagName":"p"},{"text":"Basic usage","tagName":"h3"},{"text":"The number that displays on the counter can be set via the value attribute/property. If value is unset, negative or not a string number, it will display '0'. Any decimal value will be truncated e.g. '9.9' will be converted to '9'.","tagName":"p"},{"text":"<ef-counter></ef-counter>\n<ef-counter value=\"9\"></ef-counter>\n<ef-counter value=\"9.9\"></ef-counter>\n<ef-counter value=\"XYZ\"></ef-counter>\n<ef-counter value=\"-10\"></ef-counter>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"<ef-counter></ef-counter>\n<ef-counter value=\"9\"></ef-counter>\n<ef-counter value=\"9.9\"></ef-counter>\n<ef-counter value=\"XYZ\"></ef-counter>\n<ef-counter value=\"-10\"></ef-counter>","tagName":"pre"},{"text":"Set maximum value","tagName":"h3"},{"text":"Use the max attribute/property to limit the value displayed. The counter will display the maximum value with a plus sign suffix + when value is greater than max.","tagName":"p"},{"text":"If max is unset, negative or not a string number, it will reset to the default and the counter will not apply the max to its value. If max is set with a decimal, it will be truncated e.g. '99.9' will be converted to '99'.","tagName":"p"},{"text":"<ef-counter value=\"100\"></ef-counter>\n<ef-counter max=\"99.9\" value=\"100\"></ef-counter>\n<ef-counter max=\"XYZ\" value=\"100\"></ef-counter>\n<ef-counter max=\"-99\" value=\"100\"></ef-counter>\n<ef-counter max=\"199\" value=\"200\"></ef-counter>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"<ef-counter value=\"100\"></ef-counter>\n<ef-counter max=\"99.9\" value=\"100\"></ef-counter>\n<ef-counter max=\"XYZ\" value=\"100\"></ef-counter>\n<ef-counter max=\"-99\" value=\"100\"></ef-counter>\n<ef-counter max=\"199\" value=\"200\"></ef-counter>","tagName":"pre"},{"text":"Compact notation","tagName":"h3"},{"text":"ef-counter supports compact notation to minimize large number formats. Numbers greater than 999 will be formatted as abbreviated numbers.","tagName":"p"},{"text":"<ef-counter value=\"9999\"></ef-counter>\n<ef-counter value=\"99999\"></ef-counter>\n<ef-counter value=\"999999\"></ef-counter>\n<ef-counter value=\"9999999\"></ef-counter>\n<ef-counter value=\"99999999\"></ef-counter>\n<ef-counter value=\"999999999\"></ef-counter>\n<ef-counter value=\"9999999999\"></ef-counter>\n<ef-counter value=\"99999999999\"></ef-counter>\n<ef-counter value=\"999999999999\"></ef-counter>\n<ef-counter value=\"9999999999999\"></ef-counter>\n<ef-counter value=\"99999999999999\"></ef-counter>\n<ef-counter value=\"999999999999999\"></ef-counter>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"<ef-counter value=\"9999\"></ef-counter>\n<ef-counter value=\"99999\"></ef-counter>\n<ef-counter value=\"999999\"></ef-counter>\n<ef-counter value=\"9999999\"></ef-counter>\n<ef-counter value=\"99999999\"></ef-counter>\n<ef-counter value=\"999999999\"></ef-counter>\n<ef-counter value=\"9999999999\"></ef-counter>\n<ef-counter value=\"99999999999\"></ef-counter>\n<ef-counter value=\"999999999999\"></ef-counter>\n<ef-counter value=\"9999999999999\"></ef-counter>\n<ef-counter value=\"99999999999999\"></ef-counter>\n<ef-counter value=\"999999999999999\"></ef-counter>","tagName":"pre"},{"text":"Compact notation also work with the max attribute.","tagName":"p"},{"text":"<ef-counter max=\"9000\" value=\"9999\"></ef-counter>\n<ef-counter max=\"90000\" value=\"99999\"></ef-counter>\n<ef-counter max=\"900000\" value=\"999999\"></ef-counter>\n<ef-counter max=\"9000000\" value=\"9999999\"></ef-counter>\n<ef-counter max=\"90000000\" value=\"99999999\"></ef-counter>\n<ef-counter max=\"900000000\" value=\"999999999\"></ef-counter>\n<ef-counter max=\"9000000000\" value=\"9999999999\"></ef-counter>\n<ef-counter max=\"90000000000\" value=\"99999999999\"></ef-counter>\n<ef-counter max=\"900000000000\" value=\"999999999999\"></ef-counter>\n<ef-counter max=\"9000000000000\" value=\"9999999999999\"></ef-counter>\n<ef-counter max=\"90000000000000\" value=\"99999999999999\"></ef-counter>\n<ef-counter max=\"900000000000000\" value=\"999999999999999\"></ef-counter>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"<ef-counter max=\"9000\" value=\"9999\"></ef-counter>\n<ef-counter max=\"90000\" value=\"99999\"></ef-counter>\n<ef-counter max=\"900000\" value=\"999999\"></ef-counter>\n<ef-counter max=\"9000000\" value=\"9999999\"></ef-counter>\n<ef-counter max=\"90000000\" value=\"99999999\"></ef-counter>\n<ef-counter max=\"900000000\" value=\"999999999\"></ef-counter>\n<ef-counter max=\"9000000000\" value=\"9999999999\"></ef-counter>\n<ef-counter max=\"90000000000\" value=\"99999999999\"></ef-counter>\n<ef-counter max=\"900000000000\" value=\"999999999999\"></ef-counter>\n<ef-counter max=\"9000000000000\" value=\"9999999999999\"></ef-counter>\n<ef-counter max=\"90000000000000\" value=\"99999999999999\"></ef-counter>\n<ef-counter max=\"900000000000000\" value=\"999999999999999\"></ef-counter>","tagName":"pre"},{"text":"API Reference","tagName":"h2"},{"text":"Attributes","tagName":"h3"},{"text":"Properties","tagName":"h3"}]},{"title":"Datetime Picker","filename":"elements/datetime-picker.html","contents":[{"text":"<section>\n  <ef-datetime-picker></ef-datetime-picker>\n  <ef-datetime-picker range duplex timepicker opened></ef-datetime-picker>\n</section>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"section {\n  height: 315px;\n  padding: 0 3px;\n}\n\n[range][timepicker] {\n  width: 400px;\n}","tagName":"pre"},{"text":"ef-datetime-picker allows the user to select a date or date range, and optionally a time, and display the selection in a specific format.","tagName":"p"},{"text":"Basic usage","tagName":"h3"},{"text":"By default, Datetime Picker only allows the user to select the date. Use the timepicker attribute to allow the user to select both a date and time.","tagName":"p"},{"text":"An initial value for the Datetime Picker can be set using the value attribute/property.","tagName":"p"},{"text":"<ef-datetime-picker value=\"2019-03-20\"></ef-datetime-picker>\n<ef-datetime-picker timepicker></ef-datetime-picker>","tagName":"pre"},{"text":"datetimePicker.value = '2019-03-20';","tagName":"pre"},{"text":"<section>\n  <ef-datetime-picker value=\"2019-03-20\"></ef-datetime-picker>\n  <ef-datetime-picker timepicker></ef-datetime-picker>\n</section>","tagName":"pre"},{"text":"document.querySelector('[timepicker]').value = '2019-03-20';","tagName":"pre"},{"text":"section {\n  height: 315px;\n  padding: 0 3px;\n}","tagName":"pre"},{"text":"Setting the date","tagName":"h4"},{"text":"The displayed date is based on format and user language. However, value must be in yyyy-MM-dd format (e.g. \"2019-03-20\").","tagName":"p"},{"text":"If timepicker is on, value must be in yyyy-MM-ddTHH:mm or yyyy-MM-ddTHH:mm:ss format (e.g. \"2019-03-20T23:40\" or \"2019-03-20T23:40:59\").","tagName":"p"},{"text":"✗ Wrong","tagName":"p"},{"text":"<!-- Value must be in \"yyyy-MM-dd\" format. `format` is only for displayed date -->\n<ef-datetime-picker format=\"dd-MM-yyyy\" value=\"03-20-2019\"></ef-datetime-picker>\n\n<!-- If `timepicker` is not set you must not pass time information -->\n<ef-datetime-picker value=\"2019-03-20T23:40\"></ef-datetime-picker>\n\n<!-- If `timepicker` is set you must pass time information -->\n<ef-datetime-picker timepicker value=\"2019-03-20\"></ef-datetime-picker>\n\n<!-- `value`, `min` and `max` must always follow the same format -->\n<ef-datetime-picker timepicker value=\"2019-03-20T09:00\" min=\"2019-03-20\"></ef-datetime-picker>\n\n<!-- The value must not contain any time-zone information -->\n<ef-datetime-picker timepicker value=\"2019-03-20T23:40:34Z\"></ef-datetime-picker>","tagName":"pre"},{"text":"✓ Correct","tagName":"p"},{"text":"<ef-datetime-picker value=\"2019-03-20\"></ef-datetime-picker>\n<ef-datetime-picker timepicker value=\"2019-03-20T23:40\"></ef-datetime-picker>\n<ef-datetime-picker value=\"2019-03-20\"></ef-datetime-picker>\n<ef-datetime-picker timepicker value=\"2019-03-20T09:00\" min=\"2019-03-20T00:00\"></ef-datetime-picker>\n<ef-datetime-picker timepicker value=\"2019-03-20T23:40:34\"></ef-datetime-picker>","tagName":"pre"},{"text":"✗ Wrong","tagName":"p"},{"text":"// Date object is an invalid input\ndatetimePicker.value = new Date(2019, 02, 20);\n// `toLocaleString()` is based on current locale and might not give correct results in different regions\ndatetimePicker.value = new Date(2019, 02, 20).toLocaleString();\n// `toISOString()` contains time-zone information and cannot be used\ndatetimePicker.value = new Date(2019, 02, 20).toISOString();","tagName":"pre"},{"text":"✓ Correct","tagName":"p"},{"text":"datetimePicker.value = '2019-03-20'; /* if `timepicker` is off */\ndatetimePicker.value = '2019-03-20T09:00'; /* if `timepicker` is on */","tagName":"pre"},{"text":"Range select","tagName":"h3"},{"text":"Use range to switch the Datetime Picker to date range selection mode. By default, range provides a single calendar that allows users to choose start and end dates.","tagName":"p"},{"text":"Datetime Picker provides an optional attribute, duplex and duplex=\"split\", where it will popup with 2 calendars.","tagName":"p"},{"text":"An initial range value for Datetime Picker can be set using values.","tagName":"p"},{"text":"<ef-datetime-picker range duplex values=\"2019-01-01,2019-01-07\"></ef-datetime-picker>\n<ef-datetime-picker range duplex=\"split\" timepicker></ef-datetime-picker>","tagName":"pre"},{"text":"datetimePicker.values = ['2019-01-01T12:01', '2019-01-07T14:54'];","tagName":"pre"},{"text":"<section>\n  <ef-datetime-picker range duplex values=\"2019-01-01,2019-01-07\"></ef-datetime-picker>\n  <ef-datetime-picker range duplex=\"split\" timepicker></ef-datetime-picker>\n</section>","tagName":"pre"},{"text":"document.querySelector('[timepicker]').values = ['2019-01-01T12:01', '2019-01-07T14:54'];","tagName":"pre"},{"text":"section {\n  height: 315px;\n  padding: 0 3px;\n}\n\n[range][timepicker] {\n  width: 400px;\n}","tagName":"pre"},{"text":"Custom formats","tagName":"h3"},{"text":"Custom date and time formats can be set using format attribute/property. Use show-seconds to allow the user to select second. Use am-pm to switch time picker into AM/PM time format.","tagName":"p"},{"text":"Note: format is based on date-fns.","tagName":"p"},{"text":"date-fns","tagName":"a"},{"text":"<ef-datetime-picker format=\"do MMMM yyyy\"></ef-datetime-picker>\n<ef-datetime-picker format=\"yyyy-MM-dd HH:mm:ss\" timepicker show-seconds></ef-datetime-picker>\n<ef-datetime-picker format=\"d MMMM yyyy\"></ef-datetime-picker>\n<ef-datetime-picker format=\"dd, yyyy, MMMM, h:mm a\" timepicker am-pm></ef-datetime-picker>","tagName":"pre"},{"text":"<section>\n  <ef-datetime-picker format=\"do MMMM yyyy\"></ef-datetime-picker>\n  <ef-datetime-picker format=\"yyyy-MM-dd HH:mm:ss\" timepicker show-seconds></ef-datetime-picker>\n  <ef-datetime-picker format=\"d MMMM yyyy\"></ef-datetime-picker>\n  <ef-datetime-picker format=\"dd, yyyy, MMMM, h:mm a\" timepicker am-pm></ef-datetime-picker>\n</section>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"section {\n  height: 315px;\n  padding: 0 3px;\n}\n\nef-datetime-picker {\n  width: 180px;\n}","tagName":"pre"},{"text":"Defining min and max values","tagName":"h3"},{"text":"You can restrict the available date range by passing in min and max values.","tagName":"p"},{"text":"Note: if timepicker is on, min and max must contain time information.","tagName":"p"},{"text":"<ef-datetime-picker min=\"2015-01-01\" max=\"2022-12-31\"></ef-datetime-picker>\n<ef-datetime-picker timepicker min=\"2015-01-01T00:00\" max=\"2022-12-31T23:59\"></ef-datetime-picker>","tagName":"pre"},{"text":"<section>\n  <ef-datetime-picker min=\"2015-01-01\" max=\"2022-12-31\"></ef-datetime-picker>\n  <ef-datetime-picker timepicker min=\"2015-01-01T00:00\" max=\"2022-12-31T23:59\"></ef-datetime-picker>\n</section>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"section {\n  height: 315px;\n  padding: 0 3px;\n}","tagName":"pre"},{"text":"Setting locale","tagName":"h3"},{"text":"Datetime Picker uses system default locale (or US-English if locale is not present). You can change the locale by setting lang attribute either globally on document tag or locally.","tagName":"p"},{"text":"lang","tagName":"a"},{"text":"The first day of the week is defined by the locale. You can override it by setting first-day-of-week.","tagName":"p"},{"text":"<ef-datetime-picker lang=\"zh\" value=\"2019-05-21\"></ef-datetime-picker>\n<ef-datetime-picker first-day-of-week=\"3\" value=\"2019-05-21\"></ef-datetime-picker>","tagName":"pre"},{"text":"<section>\n  <ef-datetime-picker lang=\"zh\" value=\"2019-05-21\"></ef-datetime-picker>\n  <ef-datetime-picker first-day-of-week=\"3\" value=\"2019-05-21\"></ef-datetime-picker>\n</section>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"section {\n  height: 290px;\n  padding: 0 3px;\n}","tagName":"pre"},{"text":"Slots","tagName":"h3"},{"text":"Use slots to add additional content into the Datetime Picker.","tagName":"p"},{"text":"<ef-datetime-picker range duplex=\"split\" timepicker>\n  <div slot=\"left\">\n    <ef-button id=\"today\">Today</ef-button>\n    <ef-button id=\"1-week\">1 Week</ef-button>\n    <ef-button id=\"1-month\">1 Month</ef-button>\n    <ef-button id=\"3-months\">3 Months</ef-button>\n  </div>\n</ef-datetime-picker>","tagName":"pre"},{"text":"<section>\n  <ef-datetime-picker range duplex=\"split\" timepicker>\n    <div slot=\"left\" class=\"range-nav-bar\">\n      <ef-button id=\"today\">Today</ef-button>\n      <ef-button id=\"1-week\">1 Week</ef-button>\n      <ef-button id=\"1-month\">1 Month</ef-button>\n      <ef-button id=\"3-months\">3 Months</ef-button>\n    </div>\n  </ef-datetime-picker>\n</section>","tagName":"pre"},{"text":"var pad = function(number, size) {\n  var s = String(Math.abs(number));\n  while (s.length < size) {\n    s = '0' + s;\n  }\n  return (number < 0 ? '-' : '') + s;\n};\n\nvar formatToDateTime = function(value) {\n  value = new Date(value);\n  var year = pad(value.getFullYear(), 4);\n  var month = pad(value.getMonth() + 1, 2);\n  var date = pad(value.getDate(), 2);\n  var hours = pad(value.getHours(), 2);\n  var minutes = pad(value.getMinutes(), 2);\n  var seconds = pad(value.getSeconds(), 2);\n  return year + '-' + month + '-' + date + 'T' + hours + ':' + minutes + ':' + seconds;\n};\n\nvar toValues = function(from, to) {\n  return [formatToDateTime(from), formatToDateTime(to)];\n};\nvar rangePicker = document.querySelector('ef-datetime-picker');\ndocument.getElementById('today').addEventListener('tap', function() {\n  var to = new Date().setSeconds(0, 0);\n  var from = new Date(to).setHours(0, 0, 0, 0);\n  rangePicker.values = toValues(from, to);\n});\ndocument.getElementById('1-week').addEventListener('tap', function() {\n  var to = new Date().setSeconds(0, 0);\n  var from = new Date(to) - 7 * 24 * 60 * 60 * 1000;\n  rangePicker.values = toValues(from, to);\n});\ndocument.getElementById('1-month').addEventListener('tap', function() {\n  var now = new Date();\n  var to = now.setSeconds(0, 0);\n  var from = new Date(now.getFullYear(), now.getMonth() - 1, now.getDate(), now.getHours(), now.getMinutes());\n  rangePicker.values = toValues(from, to);\n});\ndocument.getElementById('3-months').addEventListener('tap', function() {\n  var now = new Date();\n  var to = now.setSeconds(0, 0);\n  var from = new Date(now.getFullYear(), now.getMonth() - 3, now.getDate(), now.getHours(), now.getMinutes());\n  rangePicker.values = toValues(from, to);\n});","tagName":"pre"},{"text":"section {\n  height: 315px;\n  padding: 0 3px;\n}\n\n[range][timepicker] {\n  width: 400px;\n}\n\n.range-nav-bar {\n  display: flex;\n  flex-direction: column;\n  padding: 10px;\n}\n\n.range-nav-bar ef-button {\n  padding: 5px;\n  margin: 5px 0;\n  height: 25px;\n  min-width: 50px;\n  font-size: 75%;\n}","tagName":"pre"},{"text":"Slots","tagName":"h2"},{"text":"Slot is a placeholder inside a component that you can fill with your own content. This component provides slot as follows.","tagName":"p"},{"text":"headerHeader slot.","tagName":"p"},{"text":"rightRight slot.","tagName":"p"},{"text":"footerFooter slot.","tagName":"p"},{"text":"leftLeft slot.","tagName":"p"},{"text":"API Reference","tagName":"h2"},{"text":"Attributes","tagName":"h3"},{"text":"Properties","tagName":"h3"},{"text":"Methods","tagName":"h3"},{"text":"Events","tagName":"h3"}]},{"title":"Email Field","filename":"elements/email-field.html","contents":[{"text":"<ef-panel spacing>\n  <p>Email</p>\n  <ef-email-field placeholder=\"Business email address\" icon=\"email\"></ef-email-field>\n</ef-panel>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"ef-panel {\n  max-width: 450px;\n}\n\nef-email-field {\n  width: 250px;\n}\n\np {\n  margin-bottom: 4px;\n}","tagName":"pre"},{"text":"ef-email-field is a form control to confidently obtain an email input from users.","tagName":"p"},{"text":"Basic usage","tagName":"h2"},{"text":"ef-email-field has similar behaviors to the native email input type.","tagName":"p"},{"text":"<ef-email-field placeholder=\"Business email address\"></ef-email-field>","tagName":"pre"},{"text":"Getting value","tagName":"h2"},{"text":"The field's value can be accessed directly using the value property.","tagName":"p"},{"text":"<ef-email-field\n  id=\"email-input\"\n  value=\"awesome@tmail.com\"\n></ef-email-field>","tagName":"pre"},{"text":"var emailInput = document.getElementById(\"email-input\");\nemailInput.value; // \"awesome@tmail.com\"","tagName":"pre"},{"text":"You can also listen for the value-changed event that triggers when the value changes due to user interactions.","tagName":"p"},{"text":"<ef-email-field id=\"input\" placeholder=\"Type an email ...\"></ef-email-field>\n<p>Value: <code id=\"value-text\"></code></p>","tagName":"pre"},{"text":"var element = document.getElementById(\"input\");\nvar valueChangedText = document.getElementById('value-text');\n\nelement.addEventListener(\"value-changed\", function(e) {\n  valueChangedText.innerHTML = e.detail.value;\n});","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"<ef-email-field id=\"input\"></ef-email-field>\n<p>Value: <code id=\"value-text\"></code></p>","tagName":"pre"},{"text":"var element = document.getElementById(\"input\");\nvar valueChangedText = document.getElementById(\"value-text\");\n\nelement.addEventListener(\"value-changed\", function (e) {\n  valueChangedText.innerHTML = e.detail.value;\n});","tagName":"pre"},{"text":"Input validation","tagName":"h2"},{"text":"Validation occurs when the constraints are provided and the value changes. If the error state changes, it will dispatch the error-changed event along with the current error state.","tagName":"p"},{"text":"Alternatively, you can check the error property to confirm if the input is valid.","tagName":"p"},{"text":"Input length","tagName":"h3"},{"text":"The maxlength attribute limits the number of characters that users can type into the input and the minlength attribute is used to set the minimum of characters required. ef-email-field will show error styles if the condition is not met.","tagName":"p"},{"text":"<ef-email-field id=\"email-input\" minlength=\"8\" maxlength=\"14\" placeholder=\"Length between 8 to 14 characters\"></ef-email-field>\n<p id=\"error-text\"></p>","tagName":"pre"},{"text":"var element = document.getElementById(\"email-input\");\nvar errorChangedText = document.getElementById('error-text');\nelement.addEventListener(\"error-changed\", function(e) {\n  if (e.detail.value) {\n    errorChangedText.innerHTML = \"Must be in standard email format with between 8-14 characters.\";\n  } else {\n    errorChangedText.innerHTML = \"\";\n  }\n});","tagName":"pre"},{"text":"#error-text {\n  color: #d94255;\n}\n\nef-email-field {\n  width: 275px;\n}","tagName":"pre"},{"text":"<ef-email-field\n  id=\"email-input\"\n  minlength=\"8\"\n  maxlength=\"14\"\n></ef-email-field>\n<p id=\"error-text\"></p>","tagName":"pre"},{"text":"var element = document.getElementById(\"email-input\");\nvar errorChangedText = document.getElementById(\"error-text\");\nelement.addEventListener(\"error-changed\", function (e) {\n  if (e.detail.value) {\n    errorChangedText.innerHTML =\n      \"Must be in standard email format with between 8-14 characters.\";\n  } else {\n    errorChangedText.innerHTML = \"\";\n  }\n});","tagName":"pre"},{"text":"Pattern","tagName":"h3"},{"text":"You can use a regular expression to validate the input value by adding the pattern attribute.","tagName":"p"},{"text":"<ef-email-field id=\"email\" pattern=\".+@mail.com\" placeholder=\"Type email ending with &apos;@mail.com&apos;\"></ef-email-field>\n<p id=\"error-text\"></p>","tagName":"pre"},{"text":"var element = document.getElementById(\"email\");\nvar errorChangedText = document.getElementById(\"error-text\");\nelement.addEventListener(\"error-changed\", function(e) {\n  if (e.detail.value) {\n    errorChangedText.innerHTML = \"Email must end with '@mail.com'.\";\n  } else {\n    errorChangedText.innerHTML = \"\";\n  }\n});","tagName":"pre"},{"text":"#error-text {\n  color: #d94255;\n}\n\nef-email-field {\n  width: 275px;\n}","tagName":"pre"},{"text":"<ef-email-field id=\"email\" pattern=\".+@mail.com\"></ef-email-field>\n<p id=\"error-text\"></p>","tagName":"pre"},{"text":"var element = document.getElementById(\"email\");\nvar errorChangedText = document.getElementById(\"error-text\");\nelement.addEventListener(\"error-changed\", function (e) {\n  if (e.detail.value) {\n    errorChangedText.innerHTML = \"Email must end with '@mail.com'.\";\n  } else {\n    errorChangedText.innerHTML = \"\";\n  }\n});","tagName":"pre"},{"text":"Icon","tagName":"h2"},{"text":"An inline icon can be displayed inside the input using icon.","tagName":"p"},{"text":"<ef-email-field icon=\"individual\" placeholder=\"Add your personal email ..\"></ef-email-field>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"ef-email-field {\n  width: 275px;\n}","tagName":"pre"},{"text":"<ef-email-field icon=\"individual\"></ef-email-field>","tagName":"pre"},{"text":"An icon can become actionable by adding the icon-has-action attribute to the element, and ef-email-field will fire the icon-click event when a user clicks on the icon. You can add an event listener to this event to execute your code.","tagName":"p"},{"text":"<ef-email-field id=\"email-list-input\" placeholder=\"Type email and then click the icon ...\" icon=\"msgr-adduser\" icon-has-action pattern=\"^([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,5})$\"></ef-email-field>\n<p id=\"error-text\"></p>\n<p id=\"email-added\"></p>","tagName":"pre"},{"text":"var element = document.getElementById('email-list-input');\nvar emailList = document.getElementById('email-added');\nvar errorChangedText = document.getElementById(\"error-text\");\n\nelement.addEventListener('icon-click', function(e) {\n  if (!element.error && element.value.length > 0) {\n    emailList.innerHTML = element.value + \" is added.\";\n  }\n});\nelement.addEventListener(\"error-changed\", function(e) {\n  if (e.detail.value) {\n    errorChangedText.innerHTML = \"Invalid email format.\";\n    emailList.innerHTML = \"\";\n  } else {\n    errorChangedText.innerHTML = \"\";\n  }\n});","tagName":"pre"},{"text":"#error-text {\n  color: #d94255;\n}\n\nef-email-field {\n  width: 275px;\n}","tagName":"pre"},{"text":"<ef-email-field\n  id=\"email-list-input\"\n  icon=\"msgr-adduser\"\n  pattern=\"^([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,5})$\"\n  icon-has-action\n></ef-email-field>\n<p id=\"email-added\"></p>","tagName":"pre"},{"text":"var element = document.getElementById(\"email-list-input\");\nvar emailList = document.getElementById(\"email-added\");\n\nelement.addEventListener(\"icon-click\", function (e) {\n    if (!element.error && element.value.length > 0) {\n      emailList.innerHTML = element.value + \" is added.\";\n    }\n});","tagName":"pre"},{"text":"API Reference","tagName":"h2"},{"text":"Attributes","tagName":"h3"},{"text":"Properties","tagName":"h3"},{"text":"Methods","tagName":"h3"},{"text":"Events","tagName":"h3"}]},{"title":"Multi Input","filename":"elements/multi-input.html","contents":[{"text":"<ef-multi-input id=\"fruits\" placeholder=\"Enter text here\"></ef-multi-input>\n<ef-multi-input id=\"cats\" pills-only></ef-multi-input>","tagName":"pre"},{"text":"var el = document.getElementById('fruits');\nvar fruits = [\n  { id: '1', value: 'banana', label: 'Banana' },\n  { id: '2', value: 'orange', label: 'Orange' },\n  { id: '3', value: 'grapes', label: 'Grapes' }\n];\nel.data = fruits;\n\nvar catEl = document.getElementById('cats');\nvar cats = [\n  { label: 'Tiger' }, { label: 'Raven' }, { label: 'Olive' }, { label: 'Pearl' }, { label: 'Dusky' }, { label: 'Luna' }, { label: 'Minna' }, { label: 'Dice' }, { label: 'Dixie' }, { label: 'Oreo' }, { label: 'Ash' }, { label: 'Taffy' }, { label: 'Soot' }, { label: 'Orca' }, { label: 'Chess' }, { label: 'Panther' }, { label: 'Sana' }, { label: 'Esme' }\n];\ncatEl.data = cats;","tagName":"pre"},{"text":"#fruits {\n  margin-bottom: 20px;\n}","tagName":"pre"},{"text":"ef-multi-input is an input field control that displays multiple items of data as an individual pill. Users can add new pills by using the keyboard, or remove any pills from the control.","tagName":"p"},{"text":"Basic usage","tagName":"h2"},{"text":"ef-multi-input can be created and the data property used to set an initial list of pills.","tagName":"p"},{"text":"<ef-multi-input placeholder=\"Enter text here\"></ef-multi-input>","tagName":"pre"},{"text":"var el = document.querySelector('ef-multi-input');\nvar fruits = [\n  { id: '1', value: 'banana', label: 'Banana' },\n  { id: '2', value: 'orange', label: 'Orange' },\n  { id: '3', value: 'grapes', label: 'Grapes' }\n];\nel.data = fruits;","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"<ef-multi-input placeholder=\"Enter text here\"></ef-multi-input>\n<script>\n  var el = document.querySelector('ef-multi-input');\n  var fruits = [\n    { id: '1', value: 'banana', label: 'Banana' },\n    { id: '2', value: 'orange', label: 'Orange' },\n    { id: '3', value: 'grapes', label: 'Grapes' }\n  ];\nel.data = fruits;\n</script>","tagName":"pre"},{"text":"By default, users are allowed to type any value in a text field and it will be created as a new pill when users press the enter key. You can disable the text field input using the pills-only attribute or set pillsOnly using the API property.","tagName":"p"},{"text":"Data property interface","tagName":"h2"},{"text":"The data is an array of the object use the MultiInputData interface for its data items which is described below.","tagName":"p"},{"text":"\nName\nType\nDescription\n","tagName":"tr"},{"text":"\nid\nstring\nItem's unique id (optional)\n","tagName":"tr"},{"text":"\nlabel\nstring\nItem's label\n","tagName":"tr"},{"text":"\nvalue\nstring\nValue of an item\n","tagName":"tr"},{"text":"\nreadonly\nboolean\nHide clear icon of pill but still able to remove by keyboard\n","tagName":"tr"},{"text":"\ndisabled\nboolean\nSets the item to be disabled\n","tagName":"tr"},{"text":"The data property is only used for initializing ef-multi-input. It's immutable and used for keeping a reference to a source array of objects. The value of data won't be changed when using the add or remove pills API.","tagName":"p"},{"text":"Getting values","tagName":"h2"},{"text":"The value of the input text field can be accessed using value. To get a list of pills in the input, use the values property - it will return an array of the value properties of every pill.","tagName":"p"},{"text":"<ef-multi-input readonly></ef-multi-input>\n<div style=\"margin-top: 5px;\">Values: <span id=\"result-values\"></span></div>","tagName":"pre"},{"text":"var el = document.querySelector('ef-multi-input');\nvar result = document.getElementById('result-values');\n\nwindow.customElements.whenDefined('ef-button').then(function() {\n  var fruits = [\n    { id: '1', value: 'banana', label: 'Banana' },\n    { id: '2', value: 'orange', label: 'Orange' },\n    { id: '3', value: 'grapes', label: 'Grapes' }\n  ];\n  el.data = fruits;\n  result.innerHTML = JSON.stringify(el.values);\n})","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"<ef-multi-input id=\"multiInput\"></ef-multi-input>","tagName":"pre"},{"text":"var el = document.getElementById('multiInput');\nconsole.log(el.values); // array of value of each pills","tagName":"pre"},{"text":"Add new items","tagName":"h2"},{"text":"You can add new items to ef-multi-input using an API. To add a new pill, use the add method by passing MultiDataItem as a parameter.","tagName":"p"},{"text":"MultiDataItem","tagName":"a"},{"text":"<ef-multi-input id=\"multi-input\"></ef-multi-input>","tagName":"pre"},{"text":"var el = document.getElemetnById('multi-input');\nvar ret = el.add({\n  value: 'newItemValue',\n  label: 'New Item'\n});\n\nconsole.log(ret); // newly added item or null if new item is invalid","tagName":"pre"},{"text":"ef-multi-input provides the item-added event to listen for when users add a new item to the control by pressing the enter key on their keyboard. In the event object, you can access item for an item object that is newly added and items for an array of items currently shown in the control.","tagName":"p"},{"text":"For example, if a user types Mango and presses the enter key in ef-multi-input.","tagName":"p"},{"text":"el.addEventListener('item-added', function(e) {\n  console.log(e.detail.item) // Mango object.\n  console.log(e.detail.items) // Array of item in control before mango is added.\n});","tagName":"pre"},{"text":"The event can be cancelled so you can add custom logic to prevent some items from being added to the control.","tagName":"p"},{"text":"el.addEventListener('item-added', function(e) => {\n  if (e.detail.item.value === 'Mango') {\n    e.preventDefault(); // Prevent  Mango to be added to the list\n  } else {\n    // Anything else can be added\n  }\n});","tagName":"pre"},{"text":"Remove Items","tagName":"h2"},{"text":"Items in ef-multi-input can be removed using an API. You can remove only the last item, remove an item by the index of the pill, or remove all items that match a given value. See the API section below for more details.","tagName":"p"},{"text":"You can listen to the item-removed event, which is fired when users remove any item using their keyboard, or by clicking the clear icon on a pill. In the event object, you can access item for the object of the item removed and items for an array of items currently shown in the control.","tagName":"p"},{"text":"<ef-multi-input placeholder=\"Enter text here\"></ef-multi-input>","tagName":"pre"},{"text":"var el = document.querySelector('ef-multi-input');\nvar fruits = [\n  { id: '1', value: 'banana', label: 'Banana' },\n  { id: '2', value: 'orange', label: 'Orange' },\n  { id: '3', value: 'grapes', label: 'Grapes' }\n];\nel.data = fruits;\nel.addEventListener('item-removed', (e) => {\n  var item = e.detail.item;\n  el.value = item.label;\n});","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"Text Field value changed","tagName":"h2"},{"text":"When users type or change the value in the text field, the value-changed event will be triggered. The value of the text field is accessed using value in the event object.","tagName":"p"},{"text":"API Reference","tagName":"h2"},{"text":"Attributes","tagName":"h3"},{"text":"Properties","tagName":"h3"},{"text":"Methods","tagName":"h3"},{"text":"Events","tagName":"h3"}]},{"title":"Number Field","filename":"elements/number-field.html","contents":[{"text":"<ef-panel spacing>\n  <div>Pound Sterling (&#xA3;)</div>\n  <ef-number-field value=\"1000\" step=\"1\" min=\"1\" id=\"curr1\"></ef-number-field>\n  <div class=\"label\">Conversion Rate</div>\n  <ef-number-field value=\"38.62\" min=\"0\" step=\"0.01\" id=\"cf\"></ef-number-field>\n  <div class=\"label\">Thai Baht (&#xE3F;)</div>\n  <ef-number-field readonly value=\"12000\" no-spinner id=\"out\"></ef-number-field>\n</ef-panel>","tagName":"pre"},{"text":"var curr1 = document.getElementById('curr1');\nvar cf = document.getElementById('cf');\nvar out = document.getElementById('out');\n\nout.value = (curr1.value * cf.value).toFixed(2);\ncurr1.addEventListener('value-changed', function() { out.value = (curr1.value * cf.value).toFixed(2); });\ncf.addEventListener('value-changed', function() { out.value = (curr1.value * cf.value).toFixed(2); });","tagName":"pre"},{"text":".label:not(:first-child) {\n  margin-top: 8px;\n}\n\n.label {\n  margin-bottom: 4px;\n}\n\nef-number-field {\n  max-width: 160px;\n  text-align: right;\n}","tagName":"pre"},{"text":"ef-number-field is a form control element for numerical values.","tagName":"p"},{"text":"Basic usage","tagName":"h2"},{"text":"Number field can be used in a similar fashion to the native number input.","tagName":"p"},{"text":"<ef-number-field value=\"1000\"></ef-number-field>","tagName":"pre"},{"text":"Getting value","tagName":"h2"},{"text":"Just like the HTML native input, the number field input value is a string which can be accessed via the value property.","tagName":"p"},{"text":"<ef-number-field id=\"number-input\" value=\"3\"></ef-number-field>","tagName":"pre"},{"text":"var numberInput = document.getElementById('number-input');\nnumberInput.value; // \"3\"","tagName":"pre"},{"text":"You can listen for the value-changed event that is triggered whenever the value changes due to user interactions.","tagName":"p"},{"text":"<ef-number-field id=\"event\" placeholder=\"Use spinner or type number to change value.\"></ef-number-field>\n<p>Value: <code id=\"value-text\"></code></p>","tagName":"pre"},{"text":"var element = document.getElementById('event');\nvar valueChangedText = document.getElementById('value-text');\n\nelement.addEventListener('value-changed', function(e) {\n  valueChangedText.innerHTML = e.detail.value;\n});","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"<ef-number-field id=\"event\"></ef-number-field>\n<p>Value: <code id=\"value-text\"></code></p>","tagName":"pre"},{"text":"var element = document.getElementById('event');\nvar valueChangedText = document.getElementById('value-text');\n\nelement.addEventListener('value-changed', function (e) {\n  valueChangedText.innerHTML = e.detail.value;\n});","tagName":"pre"},{"text":"Input validation","tagName":"h2"},{"text":"To validate input from users ef-number-field provides similar features to a native input. When a user assigns an invalid input to the control, it will automatically apply an error style to alert the user.","tagName":"p"},{"text":"Validation of user input of ef-number-field is consistent with a native input. See native input.","tagName":"p"},{"text":"See native input","tagName":"a"},{"text":"Set min or max value","tagName":"h3"},{"text":"Minimum and maximum values can be set to limit input values when the user interacts. If a value exceeds the min or max set programmatically, the component will change to dipslay an error state.","tagName":"p"},{"text":"<ef-number-field placeholder=\"Min/Max\" min=\"-12\" max=\"16\" id=\"mm\"></ef-number-field>","tagName":"pre"},{"text":"document.getElementById('mm').value = '-15';","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"<ef-number-field min=\"-12\" max=\"16\"></ef-number-field>","tagName":"pre"},{"text":"Step","tagName":"h3"},{"text":"The step attribute specifies the interval between valid numbers. For instance, when step=\"2\", valid values Would only be even numbers e.g. 2,4,6,8....","tagName":"p"},{"text":"<ef-number-field placeholder=\"Even numbers only\" step=\"2\"></ef-number-field>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"<ef-number-field step=\"2\"></ef-number-field>","tagName":"pre"},{"text":"Whenever input is invalid, the error attribute will be added to the element. You can use the error property to check if input is currently in the error state.","tagName":"p"},{"text":"<ef-number-field id=\"number-input\" value=\"3\" max=\"2\"></ef-number-field>","tagName":"pre"},{"text":"var numberInput = document.getElementById('number-input');\nnumberInput.error; // \"true\"","tagName":"pre"},{"text":"You can add the event listener error-changed to the element and it will dispatch whenever the error state changes.","tagName":"p"},{"text":"<ef-number-field id=\"input\" min=\"0\" max=\"10\"></ef-number-field>\n<p>Error: <code id=\"error-text\"></code></p>","tagName":"pre"},{"text":"var element = document.getElementById('input');\nvar errorChangedText = document.getElementById('error-text');\nelement.value = \"-1\"\n\nelement.addEventListener('error-changed', function(e) {\n  if (e.detail.value) {\n    errorChangedText.innerHTML = \"Value must be between 0 - 10.\";\n  } else {\n    errorChangedText.innerHTML = \"\";\n  }\n});","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"<ef-number-field id=\"input\" min=\"0\" max=\"10\"></ef-number-field>\n<p>Error: <code id=\"error-text\"></code></p>","tagName":"pre"},{"text":"var element = document.getElementById('input');\nvar errorChangedText = document.getElementById('error-text');\nelement.value = '-1';\n\nelement.addEventListener('error-changed', function (e) {\n  if (e.detail.value) {\n    errorChangedText.innerHTML = 'Value must be between 0 - 10.';\n  } else {\n    errorChangedText.innerHTML = '';\n  }\n});","tagName":"pre"},{"text":"API Reference","tagName":"h2"},{"text":"Attributes","tagName":"h3"},{"text":"Properties","tagName":"h3"},{"text":"Methods","tagName":"h3"},{"text":"Events","tagName":"h3"}]},{"title":"Password Field","filename":"elements/password-field.html","contents":[{"text":"<ef-panel>\n  <ef-header level=\"3\">Password Recommendation</ef-header>\n  <ul>\n    <li>At least 8 characters&#x2014;the more characters, the better.</li>\n    <li>At least one uppercase and lowercase letters.</li>\n    <li>At least one number.</li>\n    <li>At least one special character.</li>\n  </ul>\n</ef-panel>\n\n<p>Password</p>\n<ef-password-field id=\"pw\" pattern=\"^(?=.*[A-Z])(?=.*[!@#$&amp;*])(?=.*[0-9])(?=.*[a-z]).{8,}$\"></ef-password-field>\n<br>\n<p>Confirm password</p>\n<ef-password-field id=\"confirmedPw\" pattern=\"^(?=.*[A-Z])(?=.*[!@#$&amp;*])(?=.*[0-9])(?=.*[a-z]).{8,}$\"></ef-password-field>\n\n<ul id=\"error-list\">\n  <li id=\"password-error\">Password does not match</li>\n  <li id=\"pattern-error\">Password does not meet criteria</li>\n</ul>","tagName":"pre"},{"text":"var pw = document.getElementById('pw');\nvar confirmedPw = document.getElementById('confirmedPw');\nvar passwordMatchError = document.getElementById('password-error');\nvar patternError = document.getElementById('pattern-error');\n\npasswordMatchError.style.display = 'none';\npatternError.style.display = 'none';\n\n\nconfirmedPw.addEventListener('value-changed', function(e) {\n  if (e.detail.value !== pw.value) {\n    passwordMatchError.style.display = 'list-item';\n  } else {\n    passwordMatchError.style.display = 'none';\n  }\n});\n\nconfirmedPw.addEventListener('error-changed', function(e) {\n  if (e.detail.value) {\n    patternError.style.display = 'list-item';\n  } else {\n    patternError.style.display = 'none';\n  }\n});","tagName":"pre"},{"text":"ef-panel {\n  max-width: 450px;\n}\n\nef-password-field {\n  width: 250px;\n}\n\np {\n  margin: 4px 0;\n}\n\nul {\n  padding-inline-start: 24px;\n}\n\n#password-error,\n#pattern-error {\n  color: #d94255;\n}","tagName":"pre"},{"text":"ef-password-field is a form control for passwords with a built-in show/hide toggle functionality.","tagName":"p"},{"text":"Basic usage","tagName":"h2"},{"text":"ef-password-field behaves similarly to the native password input. It has password masking that allows users to securely type their passwords into the input.","tagName":"p"},{"text":"<ef-password-field placeholder=\"Password ...\"></ef-password-field>","tagName":"pre"},{"text":"Getting value","tagName":"h2"},{"text":"The value can be accessed through the value property.","tagName":"p"},{"text":"<ef-password-field id=\"password-input\"></ef-password-field>","tagName":"pre"},{"text":"var passwordInput = document.getElementById(\"password-input\");\npasswordInput.value; // User's input password","tagName":"pre"},{"text":"You can also listen for the value-changed event, which triggers whenever the value changes due to user interactions.","tagName":"p"},{"text":"<ef-password-field id=\"password-input\" placeholder=\"Type something here ..\"></ef-password-field>\n<p>Value: <code id=\"value-text\"></code></p>","tagName":"pre"},{"text":"var element = document.getElementById(\"password-input\");\nvar valueChangedText = document.getElementById('value-text');\n\nelement.addEventListener(\"value-changed\", function(e) {\n  valueChangedText.innerHTML = e.detail.value;\n});","tagName":"pre"},{"text":"ef-password-filed {\n  width: 172px;\n}","tagName":"pre"},{"text":"<ef-password-field id=\"password-input\"></ef-password-field>\n<p>Value: <code id=\"value-text\"></code></p>","tagName":"pre"},{"text":"var element = document.getElementById(\"password-input\");\nvar valueChangedText = document.getElementById(\"value-text\");\n\nelement.addEventListener(\"value-changed\", function (e) {\n  valueChangedText.innerHTML = e.detail.value;\n});","tagName":"pre"},{"text":"Input validation","tagName":"h2"},{"text":"Validation occurs when the constraints are provided and the value changes. If the error state changes, it will dispatch an error-changed event along with the current error state.","tagName":"p"},{"text":"Alternatively, you can access the error property to check if the input is valid or not.","tagName":"p"},{"text":"Input length","tagName":"h3"},{"text":"The maxlength attribute limits the number of characters that can be typed into the input, and the minlength attribute sets the minimum of characters. ef-password-field will show error styles if a condition is not met.","tagName":"p"},{"text":"<ef-password-field id=\"passwordInput\" minlength=\"8\" maxlength=\"16\" placeholder=\"Between 8 to 16 characters\"></ef-password-field>\n<p id=\"error-text\"></p>","tagName":"pre"},{"text":"var element = document.getElementById(\"passwordInput\");\nvar errorChangedText = document.getElementById('error-text');\nelement.addEventListener(\"error-changed\", function(e) {\n  if (e.detail.value) {\n    errorChangedText.innerHTML = \"Password length must be between 8 - 16 characters\";\n  } else {\n    errorChangedText.innerHTML = \"\";\n  }\n});","tagName":"pre"},{"text":"#error-text {\n  color: #d94255;\n}\n\nef-password-field {\n  width: 200px;\n}","tagName":"pre"},{"text":"<ef-password-field id=\"passwordInput\" minlength=\"8\" maxlength=\"16\"></ef-password-field>\n<p id=\"error-text\"></p>","tagName":"pre"},{"text":"var element = document.getElementById(\"passwordInput\");\nvar errorChangedText = document.getElementById(\"error-text\");\n\nelement.addEventListener(\"error-changed\", function (e) {\n  if (e.detail.value) {\n    errorChangedText.innerHTML = \"Password length must be between 8 - 16 characters.\";\n  } else {\n    errorChangedText.innerHTML = \"\";\n  }\n});","tagName":"pre"},{"text":"Pattern","tagName":"h3"},{"text":"You can use a regular expression to validate the input value by setting it to the pattern attribute.","tagName":"p"},{"text":"<ul>\n  <li>At least 8 characters&#x2014;the more characters, the better.</li>\n  <li>At least one uppercase and lowercase letters.</li>\n  <li>At least one number.</li>\n  <li>At least one special character.</li>\n</ul>\n<ef-password-field id=\"password\" pattern=\"^(?=.*[A-Z])(?=.*[!@#$&amp;*])(?=.*[0-9])(?=.*[a-z]).{8,}$\"></ef-password-field>\n<p id=\"error-text\"></p>","tagName":"pre"},{"text":"var element = document.getElementById(\"password\");\nvar errorChangedText = document.getElementById(\"error-text\");\nelement.addEventListener(\"error-changed\", function(e) {\n  if (e.detail.value) {\n    errorChangedText.innerHTML = \"Password is too weak.\";\n  } else {\n    errorChangedText.innerHTML = \"\";\n  }\n});","tagName":"pre"},{"text":"#error-text {\n  color: #d94255;\n}\n\nef-password-field {\n  width: 275px;\n}","tagName":"pre"},{"text":"<ef-password-field\n  id=\"password\"\n  pattern=\"^(?=.*[A-Z])(?=.*[!@#$&*])(?=.*[0-9])(?=.*[a-z]).{8,}$\"\n></ef-password-field>\n<p id=\"error-text\"></>","tagName":"pre"},{"text":"var element = document.getElementById(\"password\");\nvar errorChangedText = document.getElementById(\"error-text\");\nelement.addEventListener(\"error-changed\", function (e) {\n  if (e.detail.value) {\n    errorChangedText.innerHTML = \"Password is too weak.\";\n  } else {\n    errorChangedText.innerHTML = \"\";\n  }\n});","tagName":"pre"},{"text":"API Reference","tagName":"h2"},{"text":"Attributes","tagName":"h3"},{"text":"Properties","tagName":"h3"},{"text":"Methods","tagName":"h3"},{"text":"Events","tagName":"h3"}]},{"title":"Radio Button","filename":"elements/radio-button.html","contents":[{"text":"<ef-radio-button name=\"group\" checked>Option A</ef-radio-button>\n<ef-radio-button name=\"group\">Option B</ef-radio-button>\n<ef-radio-button name=\"group\">Option C</ef-radio-button>\n<ef-radio-button name=\"group\" style=\"width: 60px; padding: 20px 0;\">Fixed width</ef-radio-button>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"ef-radio-button is a form control for selecting one option from many options within the same group.","tagName":"p"},{"text":"Grouping radio buttons","tagName":"h3"},{"text":"More than one ef-radio-button can be grouped by setting the same value to the name attribute. Once an item in a group is checked, the user cannot uncheck a radio group unless the value is set through a property or attribute.","tagName":"p"},{"text":"<ef-radio-button name=\"dairy\" checked>Skimmed Milk</ef-radio-button>\n<ef-radio-button name=\"dairy\">Whole Milk</ef-radio-button>\n<ef-radio-button name=\"dairy\">Soya</ef-radio-button>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"<ef-radio-button name=\"dairy\" checked>Skimmed Milk</ef-radio-button>\n<ef-radio-button name=\"dairy\">Whole Milk</ef-radio-button>\n<ef-radio-button name=\"dairy\">Soya</ef-radio-button>","tagName":"pre"},{"text":"Disabled and readonly","tagName":"h3"},{"text":"ef-radio-button can be set to be disabled or readonly using the disabled or readonly attributes.","tagName":"p"},{"text":"<ef-radio-button checked>Default</ef-radio-button>\n<ef-radio-button disabled checked>Disabled</ef-radio-button>\n<ef-radio-button readonly checked>Readonly</ef-radio-button>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"<ef-radio-button checked>Default</ef-radio-button>\n<ef-radio-button disabled checked>Disabled</ef-radio-button>\n<ef-radio-button readonly>Readonly</ef-radio-button>","tagName":"pre"},{"text":"Events","tagName":"h3"},{"text":"checked-changed is the only event fired by ef-radio-button. It is dispatched whenever the state has been changed by user interaction, such as a click, tap or keyboard event.","tagName":"p"},{"text":"<div id=\"container\">\n  <ef-radio-button name=\"dairy\" checked>Skimmed</ef-radio-button>\n  <ef-radio-button name=\"dairy\">Whole</ef-radio-button>\n  <ef-radio-button name=\"dairy\">Soya</ef-radio-button>\n  <div id=\"label\"></div>\n</div>","tagName":"pre"},{"text":"var label = document.getElementById('label');\nvar container = document.getElementById('container');\ncontainer.addEventListener('checked-changed', function(e) {\n  if (e.target.checked) {\n    label.textContent = '\"I love ' + e.target.textContent + ' Milk!\"';\n  }\n}, true);","tagName":"pre"},{"text":"#container {\n  display: flex;\n  align-items: center;\n}\n\n#label {\n  margin-left: 30px;\n  font-style: italic;\n}","tagName":"pre"},{"text":"<div id=\"container\">\n  <ef-radio-button name=\"dairy\" checked>Skimmed</ef-radio-button>\n  <ef-radio-button name=\"dairy\">Whole</ef-radio-button>\n  <ef-radio-button name=\"dairy\">Soya</ef-radio-button>\n  <div id=\"label\"></div>\n</div>\n<script>\nvar label = document.getElementById('label');\nvar container = document.getElementById('container');\ncontainer.addEventListener('checked-changed', function (e) {\n  if (e.target.checked) {\n    label.textContent = '\"I love ' + e.target.textContent + ' Milk!\"';\n  }\n}, true);\n</script>","tagName":"pre"},{"text":"API Reference","tagName":"h2"},{"text":"Attributes","tagName":"h3"},{"text":"Properties","tagName":"h3"},{"text":"Events","tagName":"h3"}]},{"title":"Search Field","filename":"elements/search-field.html","contents":[{"text":"<ef-search-field placeholder=\"Search keywords ...\"></ef-search-field>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"ef-search-field is a form control input designed to receive search query input from users.","tagName":"p"},{"text":"Basic usage","tagName":"h2"},{"text":"ef-search-field has identical behavior to native text input and ef-text-field, except that the icon isn't customizable.","tagName":"p"},{"text":"<ef-search-field placeholder=\"Type a keyword to search ...\"></ef-search-field>","tagName":"pre"},{"text":"Getting value","tagName":"h2"},{"text":"The value can be accessed using the value property.","tagName":"p"},{"text":"<ef-search-field id=\"search-input\" value=\"keywords\"></ef-search-field>","tagName":"pre"},{"text":"var searchInput = document.getElementById(\"search-input\");\nsearchInput.value; // \"keywords\"","tagName":"pre"},{"text":"You can also listen to the value-changed event, which triggers whenever user interactions change the value.","tagName":"p"},{"text":"<ef-search-field id=\"input\" placeholder=\"Type something here ..\"></ef-search-field>\n<p>Value: <code id=\"value-text\"></code></p>","tagName":"pre"},{"text":"var element = document.getElementById(\"input\");\nvar valueChangedText = document.getElementById('value-text');\n\nelement.addEventListener(\"value-changed\", function(e) {\n  valueChangedText.innerHTML = e.detail.value;\n});","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"<ef-search-field id=\"input\"></ef-search-field>\n<p>Value: <code id=\"value-text\"></code></p>","tagName":"pre"},{"text":"var element = document.getElementById(\"input\");\nvar valueChangedText = document.getElementById(\"value-text\");\n\nelement.addEventListener(\"value-changed\", function (e) {\n  valueChangedText.innerHTML = e.detail.value;\n});","tagName":"pre"},{"text":"Input validation","tagName":"h2"},{"text":"Validation occurs when constraints are provided and the value changes. If the error state changes, it will dispatch the error-changed event along with the current error state.","tagName":"p"},{"text":"Alternatively, the error property can be checked to confirm if the input is valid or not.","tagName":"p"},{"text":"Input length","tagName":"h3"},{"text":"The maxlength attribute limits the number of characters that users can enter and the minlength attribute sets the minimum number of characters required. ef-search-field will show error styles if a condition is not met.","tagName":"p"},{"text":"<ef-search-field id=\"search-input\" minlength=\"2\" maxlength=\"4\" placeholder=\"Between 2 to 4 characters\"></ef-search-field>\n<p id=\"error-text\"></p>","tagName":"pre"},{"text":"var element = document.getElementById(\"search-input\");\nvar errorChangedText = document.getElementById('error-text');\nelement.addEventListener(\"error-changed\", function(e) {\n  if (e.detail.value) {\n    errorChangedText.innerHTML = \"Value length must be between 2 - 4 characters\";\n  } else {\n    errorChangedText.innerHTML = \"\";\n  }\n});","tagName":"pre"},{"text":"#error-text {\n  color: #d94255;\n}\n\nef-search-field {\n  width: 200px;\n}","tagName":"pre"},{"text":"<ef-search-field id=\"search-input\" minlength=\"2\" maxlength=\"4\"></ef-search-field>\n<p id=\"error-text\"></p>","tagName":"pre"},{"text":"var element = document.getElementById(\"search-input\");\nvar errorChangedText = document.getElementById(\"error-text\");\n\nelement.addEventListener(\"error-changed\", function (e) {\n  if (e.detail.value) {\n    errorChangedText.innerHTML =\n      \"Value length must be between 2 - 4 characters.\";\n  } else {\n    errorChangedText.innerHTML = \"\";\n  }\n});","tagName":"pre"},{"text":"Pattern","tagName":"h3"},{"text":"You can use a regular expression to validate the input value by setting it to the pattern attribute.","tagName":"p"},{"text":"<p>Uppercase letters and 2-5 characters</p>\n<ef-search-field id=\"search-pattern\" pattern=\"[A-Z]{2,5}\" placeholder=\"TRI\"></ef-search-field>\n<p id=\"error-text\"></p>","tagName":"pre"},{"text":"var element = document.getElementById(\"search-pattern\");\nvar errorChangedText = document.getElementById(\"error-text\");\nelement.addEventListener(\"error-changed\", function(e) {\n  if (e.detail.value) {\n    errorChangedText.innerHTML = \"Value must be uppercase letters and has 2 - 5 characters.\";\n  } else {\n    errorChangedText.innerHTML = \"\";\n  }\n});","tagName":"pre"},{"text":"#error-text {\n  color: #d94255;\n}\n\nef-search-field {\n  width: 80px;\n}","tagName":"pre"},{"text":"<ef-search-field id=\"search-pattern\" pattern=\"[A-Z]{2,5}\"></ef-search-field>\n<p id=\"error-text\"></>","tagName":"pre"},{"text":"var element = document.getElementById(\"search-pattern\");\nvar errorChangedText = document.getElementById(\"error-text\");\nelement.addEventListener(\"error-changed\", function (e) {\n  if (e.detail.value) {\n    errorChangedText.innerHTML = \"Value must be uppercase letters and has 2 - 5 characters.\";\n  } else {\n    errorChangedText.innerHTML = \"\";\n  }\n});","tagName":"pre"},{"text":"Icon action","tagName":"h2"},{"text":"The search icon can become actionable by adding the icon-has-action attribute to the element, so that ef-search-field will fire an icon-click event when a user clicks on the icon. You can add an event listener to this event to execute your code.","tagName":"p"},{"text":"<ef-search-field id=\"icon-action\" placeholder=\"Try clicking at the icon...\" icon-has-action></ef-search-field>\n<p id=\"result\"></p>","tagName":"pre"},{"text":"var element = document.getElementById('icon-action');\nvar result = document.getElementById('result');\n\nelement.addEventListener('icon-click', function(e) {\n  result.innerHTML = 'icon is clicked';\n});","tagName":"pre"},{"text":"p {\n  margin: 8px 0;\n}\n\nef-search-field {\n  width: 200px;\n}","tagName":"pre"},{"text":"<ef-search-field id=\"icon-action\" placeholder=\"Try clicking at the icon...\" icon-has-action></ef-search-field>\n<p id=\"result\"></p>","tagName":"pre"},{"text":"var element = document.getElementById('icon-action');\nvar result = document.getElementById('result');\n\nelement.addEventListener('icon-click', function (e) {\n  result.innerHTML = 'icon is clicked';\n});","tagName":"pre"},{"text":"Search on keypress","tagName":"h2"},{"text":"By listening to the keyup event, you can add a search action when the user presses a certain key.","tagName":"p"},{"text":"var searchInput = document.querySelector(\"ef-search-field\");\nsearchInput.addEventListener(\"keyup\", function(e) {\n  // keyCode 13 is the \"Enter\" key\n  if (e.keyCode === 13) {\n    // Calls search API\n  }\n});","tagName":"pre"},{"text":"Search on type","tagName":"h2"},{"text":"Search on type or search autocomplete can be implemented by adding a search action to the value-changed event. However, if the user types too quickly it can put a heavy load on the server and search results could prove to be irrelevant. It is a recommended practice to use either debounce or throttle to limit the times the application calls for expensive operations like API requests.","tagName":"p"},{"text":"var searchInput = document.querySelector(\"ef-search-field\");\nsearchInput.addEventListener(\"value-changed\", function (e) {\n    debounce(search(e.detail.value), 1500) // debounce search() for 1.5 seconds\n});","tagName":"pre"},{"text":"API Reference","tagName":"h2"},{"text":"Attributes","tagName":"h3"},{"text":"Properties","tagName":"h3"},{"text":"Methods","tagName":"h3"},{"text":"Events","tagName":"h3"}]},{"title":"Select","filename":"elements/select.html","contents":[{"text":"<section>\n  <ef-select placeholder=\"Pick item...\" opened>\n    <ef-item type=\"header\">Drinks</ef-item>\n    <ef-item value=\"1\">Cola</ef-item>\n    <ef-item value=\"2\" disabled>Apple Juice</ef-item>\n    <ef-item value=\"3\">Iced Tea</ef-item>\n    <ef-item type=\"header\">Ice Cream</ef-item>\n    <ef-item value=\"4\">Vanilla</ef-item>\n    <ef-item value=\"5\">Chocolate</ef-item>\n    <ef-item value=\"6\">Honey &amp; Walnut</ef-item>\n    <ef-item value=\"7\">Raspberry</ef-item>\n  </ef-select>\n  <ef-select placeholder=\"Disabled...\" disabled></ef-select>\n  <ef-select placeholder=\"Default selected...\">\n    <ef-item type=\"header\">Drinks</ef-item>\n    <ef-item value=\"1\">Cola</ef-item>\n    <ef-item value=\"2\" disabled>Apple Juice</ef-item>\n    <ef-item selected value=\"3\">Iced Tea</ef-item>\n    <ef-item type=\"header\">Ice Cream</ef-item>\n    <ef-item value=\"4\">Vanilla</ef-item>\n    <ef-item value=\"5\">Chocolate</ef-item>\n    <ef-item value=\"6\">Honey &amp; Walnut</ef-item>\n    <ef-item value=\"7\">Raspberry</ef-item>\n  </ef-select>\n  <ef-select disabled>\n    <ef-item selected>Lemonade</ef-item>\n  </ef-select>\n</section>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"section {\n  height: 250px;\n  padding: 0 3px;\n}\n\nef-select {\n  margin-right: 5px;\n}","tagName":"pre"},{"text":"Basic Usage","tagName":"h2"},{"text":"ef-select expands upon the native select element, providing a fully themeable dropdown element.","tagName":"p"},{"text":"Choices can be defined using ef-item.","tagName":"p"},{"text":"<ef-select>\n  <ef-item value=\"1\">Cola</ef-item>\n  <ef-item value=\"2\">Lemonade</ef-item>\n  <ef-item value=\"3\">Orange Juice</ef-item>\n  <ef-item value=\"4\" disabled>Apple Juice</ef-item>\n  <ef-item value=\"5\">Iced Tea</ef-item>\n</ef-select>","tagName":"pre"},{"text":"<section>\n  <ef-select>\n    <ef-item value=\"1\">Cola</ef-item>\n    <ef-item value=\"2\">Lemonade</ef-item>\n    <ef-item value=\"3\">Orange Juice</ef-item>\n    <ef-item value=\"4\" disabled>Apple Juice</ef-item>\n    <ef-item value=\"5\">Iced Tea</ef-item>\n  </ef-select>\n</section>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"section {\n  height: 155px;\n  padding: 0 3px;\n}","tagName":"pre"},{"text":"Data property interface","tagName":"h2"},{"text":"The data property of the ef-select use the SelectData interface for its data items which is described below.","tagName":"p"},{"text":"\nName\nType\nDescription\n","tagName":"tr"},{"text":"\nlabel\nstring\nItem's label\n","tagName":"tr"},{"text":"\nvalue\nstring\nValue of an item\n","tagName":"tr"},{"text":"\nselected\nboolean\nSelection state of the item\n","tagName":"tr"},{"text":"\ntype\nstring\nType of item. Value can be text, header, divider\n","tagName":"tr"},{"text":"\nsubLabel\nstring\nThe text beneath the label\n","tagName":"tr"},{"text":"\nreadonly\nboolean\nSets the item to be readonly\n","tagName":"tr"},{"text":"\ndisabled\nboolean\nSets the item to be disabled\n","tagName":"tr"},{"text":"Categorize into groups","tagName":"h2"},{"text":"Groups are also defined using ef-item. The only difference is that we add a type=\"header\" attribute onto the element.","tagName":"p"},{"text":"<ef-select>\n  <ef-item type=\"header\">Drinks</ef-item>\n  <ef-item value=\"1\">Cola</ef-item>\n  <ef-item value=\"2\">Lemonade</ef-item>\n  <ef-item value=\"3\">Water</ef-item>\n  <ef-item type=\"header\">Ice Cream</ef-item>\n  <ef-item value=\"4\">Vanilla</ef-item>\n  <ef-item value=\"5\">Chocolate</ef-item>\n  <ef-item value=\"6\">Strawberry</ef-item>\n  <ef-item value=\"7\">Raspberry</ef-item>\n</ef-select>","tagName":"pre"},{"text":"<section>\n  <ef-select>\n    <ef-item type=\"header\">Drinks</ef-item>\n    <ef-item value=\"1\">Cola</ef-item>\n    <ef-item value=\"2\">Lemonade</ef-item>\n    <ef-item value=\"3\">Water</ef-item>\n    <ef-item type=\"header\">Ice Cream</ef-item>\n    <ef-item value=\"4\">Vanilla</ef-item>\n    <ef-item value=\"5\">Chocolate</ef-item>\n    <ef-item value=\"6\">Strawberry</ef-item>\n    <ef-item value=\"7\">Raspberry</ef-item>\n  </ef-select>\n</section>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"section {\n  height: 250px;\n  padding: 0 3px;\n}","tagName":"pre"},{"text":"Adding a placeholder","tagName":"h2"},{"text":"Once you have your choices and groups defined, you can then add placeholder text to help users understand what the list contains and what their choice is for.","tagName":"p"},{"text":"<ef-select placeholder=\"Choose your refreshment...\">\n  ...","tagName":"pre"},{"text":"<section>\n  <ef-select placeholder=\"Choose your refreshment...\">\n    <ef-item value=\"1\">Cola</ef-item>\n    <ef-item value=\"2\">Lemonade</ef-item>\n    <ef-item value=\"3\">Orange Juice</ef-item>\n    <ef-item value=\"4\">Apple Juice</ef-item>\n    <ef-item value=\"5\">Iced Tea</ef-item>\n  </ef-select>\n</section>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"section {\n  height: 155px;\n  padding: 0 3px;\n}","tagName":"pre"},{"text":"Selecting a default option","tagName":"h2"},{"text":"You may wish to set an initial selected value. This can be achieved by adding a selected attribute to the option you would like to have selected by default.","tagName":"p"},{"text":"Only one option can be selected at a time.","tagName":"p"},{"text":"...\n  <ef-item selected>Water</ef-item>\n...","tagName":"pre"},{"text":"<section>\n  <ef-select placeholder=\"Choose your refreshment...\">\n    <ef-item type=\"header\">Drinks</ef-item>\n    <ef-item value=\"1\">Cola</ef-item>\n    <ef-item value=\"2\">Lemonade</ef-item>\n    <ef-item value=\"6\" selected>Water</ef-item>\n    <ef-item type=\"header\">Ice Cream</ef-item>\n    <ef-item value=\"7\">Vanilla</ef-item>\n    <ef-item value=\"14\">Strawberry</ef-item>\n    <ef-item value=\"15\">Raspberry</ef-item>\n  </ef-select>\n</section>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"section {\n  height: 225px;\n  padding: 0 3px;\n}","tagName":"pre"},{"text":"Disabling an option","tagName":"h2"},{"text":"Options can be disabled by adding a disabled attribute to the options you wish to disable.","tagName":"p"},{"text":"...\n  <ef-item disabled>Iced Tea</ef-item>\n  <ef-item disabled>Water</ef-item>\n...","tagName":"pre"},{"text":"<section>\n  <ef-select placeholder=\"Choose your refreshment...\">\n    <ef-item type=\"header\">Drinks</ef-item>\n    <ef-item value=\"4\" disabled>Apple Juice</ef-item>\n    <ef-item value=\"5\" disabled>Iced Tea</ef-item>\n    <ef-item value=\"6\" disabled>Water</ef-item>\n    <ef-item type=\"header\">Ice Cream</ef-item>\n    <ef-item value=\"7\">Vanilla</ef-item>\n    <ef-item value=\"8\">Chocolate</ef-item>\n  </ef-select>\n</section>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"section {\n  height: 200px;\n  padding: 0 3px;\n}","tagName":"pre"},{"text":"Configuring options using data object","tagName":"h2"},{"text":"Depending on your usage, you may wish to configure ef-select using its data object.","tagName":"p"},{"text":"Here is a simple configuration object:","tagName":"p"},{"text":"[\n  {\n    label: 'Drinks',\n    type: 'header'\n  },\n  {\n    label: 'Tea',\n    value: 'tea'\n  },\n  {\n    label: 'Beer',\n    value: 'beer',\n    selected: true\n  },\n  {\n    label: 'Ice Cream',\n    type: 'header'\n  },\n  {\n    label: 'Vanilla',\n    value: 'vanilla',\n    disabled: true\n  },\n  {\n    label: 'Strawberry',\n    value: 'Strawberry'\n  }\n]","tagName":"pre"},{"text":"You can set this configuration object onto the data property of ef-select.","tagName":"p"},{"text":"var el = document.querySelector('ef-select');\nel.data = myConfigurationObject;","tagName":"pre"},{"text":"<section>\n  <ef-select></ef-select>\n</section>","tagName":"pre"},{"text":"var el = document.querySelector('ef-select');\nel.data = [{\n    label: 'Drinks',\n    type: 'header'\n  },\n  {\n    label: 'Tea',\n    value: 'tea'\n  },\n  {\n    label: 'Beer',\n    value: 'beer',\n    selected: true\n  },\n  {\n    label: 'Ice Cream',\n    type: 'header'\n  },\n  {\n    label: 'Vanilla',\n    value: 'vanilla',\n    disabled: true\n  },\n  {\n    label: 'Strawberry',\n    value: 'Strawberry'\n  }\n];","tagName":"pre"},{"text":"section {\n  height: 180px;\n  padding: 0 3px;\n}","tagName":"pre"},{"text":"Restricting list height","tagName":"h2"},{"text":"The max-height of the list can be restricted using the --list-max-height property.","tagName":"p"},{"text":"ef-select {\n  --list-max-height: 100px;\n}","tagName":"pre"},{"text":"<section>\n  <ef-select placeholder=\"Choose your refreshment...\">\n    <ef-item type=\"header\">Drinks</ef-item>\n    <ef-item value=\"4\" disabled>Apple Juice</ef-item>\n    <ef-item value=\"5\" disabled>Iced Tea</ef-item>\n    <ef-item value=\"6\" disabled>Water</ef-item>\n    <ef-item type=\"header\">Ice Cream</ef-item>\n    <ef-item value=\"7\">Vanilla</ef-item>\n    <ef-item value=\"8\">Chocolate</ef-item>\n  </ef-select>\n</section>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"section {\n  height: 130px;\n  padding: 0 3px;\n}\n\nef-select {\n  --list-max-height: 100px;\n}","tagName":"pre"},{"text":"CSS Variables","tagName":"h2"},{"text":"\nName\nDescription\n","tagName":"tr"},{"text":"\n--list-max-height\nMaximum height of the drop-down list\n","tagName":"tr"},{"text":"\n--list-max-width\nMaximum width of the drop-down list\n","tagName":"tr"},{"text":"API Reference","tagName":"h2"},{"text":"Attributes","tagName":"h3"},{"text":"Properties","tagName":"h3"},{"text":"Events","tagName":"h3"}]},{"title":"Slider","filename":"elements/slider.html","contents":[{"text":"<ef-slider min=\"0\" max=\"100\" value=\"45\"></ef-slider>\n<ef-slider range min=\"0\" max=\"100\" from=\"25\" to=\"75\" min-range=\"1\"></ef-slider>\n<ef-slider show-input-field min=\"0\" max=\"100\" value=\"45\"></ef-slider>\n<ef-slider show-input-field range min=\"0\" max=\"100\" from=\"25\" to=\"75\" min-range=\"1\"></ef-slider>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"ef-slider {\n  width: 50%;\n  margin: 5px 10px;\n}","tagName":"pre"},{"text":"Basic usage","tagName":"h3"},{"text":"Sliders allow users to make selections from a range of values. The component's min and max values set the range. A default value can be set using the value attribute.","tagName":"p"},{"text":"<ef-slider min=\"0\" max=\"100\" value=\"60\"></ef-slider>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"ef-slider {\n  width: 50%;\n  margin: 5px 10px;\n}","tagName":"pre"},{"text":"<ef-slider min=\"0\" max=\"100\" value=\"60\"></ef-slider>","tagName":"pre"},{"text":"To get the value of slider, access it using the value property.","tagName":"p"},{"text":"<ef-slider id=\"level\" value=\"1\" min=\"0\" max=\"10\"></ef-slider>","tagName":"pre"},{"text":"var el = document.getElementById('level');\nel.value; // \"1\"","tagName":"pre"},{"text":"You can add an event listener to the element for the value-changed event. The event will be triggered when users change the value of the slider.","tagName":"p"},{"text":"Range slider","tagName":"h3"},{"text":"Add a range attribute to make the slider support from and to instead of a single value.","tagName":"p"},{"text":"<ef-slider min=\"0\" max=\"100\" from=\"10\" to=\"50\" range></ef-slider>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"ef-slider {\n  width: 50%;\n  margin: 15px 15px;\n}\n\nef-slider:first-child {\n  margin: 25px 15px 10px 15px;\n}","tagName":"pre"},{"text":"<ef-slider min=\"0\" max=\"100\" from=\"10\" to=\"50\" range></ef-slider>","tagName":"pre"},{"text":"In range mode, the control will provide values between from and to. You can use from-changed and to-changed events to get notified when those values are changed.","tagName":"p"},{"text":"In some use cases, you may need to set a minimum number of values between from and to. For example, you might want users to set at least 10 values in a range. To do that, set min-range to 10.","tagName":"p"},{"text":"<ef-slider min=\"0\" max=\"100\" from=\"10\" to=\"50\" range min-range=\"10\"></ef-slider>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"<ef-slider min=\"0\" max=\"100\" from=\"10\" to=\"50\" range min-range=\"10\"></ef-slider>","tagName":"pre"},{"text":"Input Field","tagName":"h3"},{"text":"Input fields can be set to display on the side of slider. They show the current value of the slider and also allow users to set it with their keyboard.","tagName":"p"},{"text":"<ef-slider show-input-field min=\"0\" max=\"100\" value=\"40\"></ef-slider>\n<ef-slider show-input-field min=\"0\" max=\"100\" from=\"10\" to=\"50\" range></ef-slider>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"ef-slider {\n  width: 50%;\n  margin: 15px 15px;\n}\n\nef-slider:first-child {\n  margin: 25px 15px 10px 15px;\n}","tagName":"pre"},{"text":"<ef-slider show-input-field min=\"0\" max=\"100\" value=\"40\"></ef-slider>\n<ef-slider show-input-field min=\"0\" max=\"100\" from=\"10\" to=\"50\" range></ef-slider>","tagName":"pre"},{"text":"Steps","tagName":"h3"},{"text":"The step attribute specifies the size of each increment or decrement on the slider control. By default, the slider will not show step marks but this can be set using show-steps.","tagName":"p"},{"text":"<ef-slider min=\"0\" max=\"10\" value=\"5\" step=\"0.5\" show-steps show-input-field></ef-slider>\n<ef-slider min=\"0\" max=\"100\" from=\"60\" to=\"80\" step=\"20\" range show-steps show-input-field></ef-slider>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"ef-slider {\n  width: 50%;\n  margin: 5px 10px;\n}","tagName":"pre"},{"text":"<ef-slider min=\"0\" max=\"10\" value=\"5\" step=\"0.5\" show-steps show-input-field></ef-slider>\n<ef-slider min=\"0\" max=\"100\" from=\"60\" to=\"80\" step=\"20\" range show-steps show-input-field></ef-slider>","tagName":"pre"},{"text":"Customize colors","tagName":"h3"},{"text":"Colors of slider are managed by the theme but can be overridden using CSS variables.","tagName":"p"},{"text":"<!-- ELF supports Pride at Refinitiv -->\n<ef-slider id=\"red\" min=\"0\" max=\"100\" value=\"70\"></ef-slider>\n<ef-slider id=\"orange\" min=\"0\" max=\"100\" value=\"80\"></ef-slider>\n<ef-slider id=\"yellow\" min=\"0\" max=\"100\" value=\"95\"></ef-slider>\n<ef-slider id=\"green\" min=\"0\" max=\"100\" value=\"90\"></ef-slider>\n<ef-slider id=\"blue\" min=\"0\" max=\"100\" value=\"80\"></ef-slider>\n<ef-slider id=\"violet\" min=\"0\" max=\"100\" value=\"70\"></ef-slider>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"ef-slider {\n  max-width: 50%;\n}\n\n#red {\n  --thumb-color: #e40303;\n}\n\n#orange {\n  --thumb-color: #ff8c00;\n}\n\n#yellow {\n  --thumb-color: #ffed00;\n}\n\n#green {\n  --thumb-color: #008026;\n}\n\n#blue {\n  --thumb-color: #004dff;\n}\n\n#violet {\n  --thumb-color: #750787;\n}","tagName":"pre"},{"text":"\nCSS Variables Name\nDescription\n","tagName":"tr"},{"text":"\n--track-color\nSlider track color\n","tagName":"tr"},{"text":"\n--thumb-color\nColor of slider thumb and filled track color\n","tagName":"tr"},{"text":"\n--step-color\nSlider step color\n","tagName":"tr"},{"text":"\n--input-field-width\nSet input field width\n","tagName":"tr"},{"text":"#red {\n  --thumb-color:#e40303;\n}","tagName":"pre"},{"text":"<ef-slider id=\"red\" min=\"0\" max=\"100\" value=\"70\"></ef-slider>","tagName":"pre"},{"text":"API Reference","tagName":"h2"},{"text":"Attributes","tagName":"h3"},{"text":"Properties","tagName":"h3"},{"text":"Events","tagName":"h3"}]},{"title":"Text Field","filename":"elements/text-field.html","contents":[{"text":"<ef-panel spacing>\n  <p>First name</p>\n  <ef-text-field placeholder=\"Must be letters and at least 5 characters\" pattern=\"[a-zA-Z]{5,}\"></ef-text-field>\n  <br>\n  <br>\n  <p>Last name</p>\n  <ef-text-field placeholder=\"Must be letters and at least 5 characters\" pattern=\"[a-zA-Z]{5,}\"></ef-text-field>\n</ef-panel>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"ef-panel {\n  max-width: 450px;\n}\n\nef-text-field {\n  width: 250px;\n}\n\np {\n  margin-bottom: 4px;\n}","tagName":"pre"},{"text":"ef-text-field is a form element for text.","tagName":"p"},{"text":"Basic usage","tagName":"h2"},{"text":"Text field is used to accept text input from users and has similar behaviors to the native text input.","tagName":"p"},{"text":"<ef-text-field placeholder=\"Type something...\"></ef-text-field>","tagName":"pre"},{"text":"Getting value","tagName":"h2"},{"text":"The field's value can be accessed using the value property.","tagName":"p"},{"text":"<ef-text-field id=\"text-input\" value=\"Hello World\"></ef-text-field>","tagName":"pre"},{"text":"var textInput = document.getElementById(\"text-input\");\ntextInput.value; // \"Hello World\"","tagName":"pre"},{"text":"You can also listen for the value-changed event, which triggers when user interactions change the value.","tagName":"p"},{"text":"<ef-text-field id=\"input\" placeholder=\"Type something here ..\"></ef-text-field>\n<p>Value: <code id=\"value-text\"></code></p>","tagName":"pre"},{"text":"var element = document.getElementById(\"input\");\nvar valueChangedText = document.getElementById('value-text');\n\nelement.addEventListener(\"value-changed\", function(e) {\n  valueChangedText.innerHTML = e.detail.value;\n});","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"<ef-text-field id=\"input\"></ef-text-field>\n<p>Value: <code id=\"value-text\"></code></p>","tagName":"pre"},{"text":"var element = document.getElementById(\"input\");\nvar valueChangedText = document.getElementById(\"value-text\");\n\nelement.addEventListener(\"value-changed\", function (e) {\n  valueChangedText.innerHTML = e.detail.value;\n});","tagName":"pre"},{"text":"Input validation","tagName":"h2"},{"text":"Validation occurs when constraints are provided and the value changes. If the error state changes, it will dispatch an error-changed event along with current error state.","tagName":"p"},{"text":"Alternatively, you can check the error property to confirm if the input is valid or not.","tagName":"p"},{"text":"Input length","tagName":"h3"},{"text":"The maxlength attribute limits the number of characters that users can type into the input, and the minlength attribute sets the minimum number of characters required. ef-text-field will show error styles if a condition is not met.","tagName":"p"},{"text":"<ef-text-field id=\"textInput\" minlength=\"5\" maxlength=\"8\" placeholder=\"Between 5 to 8 characters\"></ef-text-field>\n<p id=\"error-text\"></p>","tagName":"pre"},{"text":"var element = document.getElementById(\"textInput\");\nvar errorChangedText = document.getElementById('error-text');\nelement.addEventListener(\"error-changed\", function(e) {\n  if (e.detail.value) {\n    errorChangedText.innerHTML = \"Value length must be between 5 -8 characters\";\n  } else {\n    errorChangedText.innerHTML = \"\";\n  }\n});","tagName":"pre"},{"text":"#error-text {\n  color: #d94255;\n}\n\nef-text-field {\n  width: 200px;\n}","tagName":"pre"},{"text":"<ef-text-field minlength=\"5\" maxlength=\"8\"></ef-text-field>\n<p id=\"error-text\"></p>","tagName":"pre"},{"text":"var element = document.getElementById(\"textInput\");\nvar errorChangedText = document.getElementById(\"error-text\");\nelement.addEventListener(\"error-changed\", function (e) {\n  if (e.detail.value) {\n    errorChangedText.innerHTML =\n      \"Value length must be between 5 -8 characters.\";\n  } else {\n    errorChangedText.innerHTML = \"\";\n  }\n});","tagName":"pre"},{"text":"Pattern","tagName":"h3"},{"text":"You can use a regular expression to validate the input value by setting it with the pattern attribute.","tagName":"p"},{"text":"<div>Nickname</div>\n<ef-text-field id=\"nickname\" pattern=\"[a-z]{4,8}\" placeholder=\"Must be lowercase letters and 4-8 characters\"></ef-text-field>\n<p id=\"error-text\"></p>","tagName":"pre"},{"text":"var element = document.getElementById(\"nickname\");\nvar errorChangedText = document.getElementById(\"error-text\");\nelement.addEventListener(\"error-changed\", function(e) {\n  if (e.detail.value) {\n    errorChangedText.innerHTML = \"Nickname must be lowercase letters and 4-8 characters.\";\n  } else {\n    errorChangedText.innerHTML = \"\";\n  }\n});","tagName":"pre"},{"text":"#error-text {\n  color: #d94255;\n}\n\nef-text-field {\n  width: 275px;\n}","tagName":"pre"},{"text":"Nickname: <ef-text-field id=\"nickname\" pattern=\"[a-z]{4,8}\"></ef-text-field>\n<p id=\"error-text\"></>","tagName":"pre"},{"text":"var element = document.getElementById(\"nickname\");\nvar errorChangedText = document.getElementById(\"error-text\");\nelement.addEventListener(\"error-changed\", function (e) {\n  if (e.detail.value) {\n    errorChangedText.innerHTML = \"Nickname must be lowercase letters and 4-8 characters.\";\n  } else {\n    errorChangedText.innerHTML = \"\";\n  }\n});","tagName":"pre"},{"text":"Icon","tagName":"h2"},{"text":"An inline icon can be set to display inside the input using the icon attribute.","tagName":"p"},{"text":"<ef-text-field icon=\"email\" placeholder=\"We appreciate your feedback!\"></ef-text-field>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"ef-text-field {\n  width: 200px;\n}","tagName":"pre"},{"text":"<ef-text-field icon=\"email\"></ef-text-field>","tagName":"pre"},{"text":"The icon can become actionable by adding the icon-has-action attribute to the element, so that ef-text-field will fire the icon-click event when users click on the icon. You can add an event listener to this event to execute your code.","tagName":"p"},{"text":"<ef-text-field id=\"feedback\" placeholder=\"Type your feedback and click the icon\" icon=\"email\" icon-has-action></ef-text-field>","tagName":"pre"},{"text":"var element = document.getElementById(\"feedback\");\nelement.addEventListener(\"icon-click\", function(e) {\n  element.value = \"\"\n  element.placeholder = \"Feedback sent. Thanks!\";\n  element.icon = \"tick\";\n});","tagName":"pre"},{"text":"ef-text-field {\n  width: 250px;\n}","tagName":"pre"},{"text":"<ef-text-field\n  id=\"feedback\"\n  placeholder=\"Type your feedback and click the icon\"\n  icon=\"email\"\n  icon-has-action>\n</ef-text-field>","tagName":"pre"},{"text":"var element = document.getElementById(\"feedback\");\nelement.addEventListener(\"icon-click\", function (e) {\n    element.value = \"\"\n    element.placeholder = \"Feedback sent. Thanks!\";\n    element.icon = \"tick\";\n});","tagName":"pre"},{"text":"API Reference","tagName":"h2"},{"text":"Attributes","tagName":"h3"},{"text":"Properties","tagName":"h3"},{"text":"Methods","tagName":"h3"},{"text":"Events","tagName":"h3"}]},{"title":"Time Picker","filename":"elements/time-picker.html","contents":[{"text":"<div>\n  <ef-time-picker value=\"12:30\"></ef-time-picker>\n  <ef-time-picker></ef-time-picker>\n  <ef-time-picker value=\"12:30:17\"></ef-time-picker>\n  <ef-time-picker value=\"12:30\" am-pm></ef-time-picker>\n</div>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"div {\n  display: flex;\n}\n\nef-time-picker:not(last-child) {\n  margin-right: 40px;\n}","tagName":"pre"},{"text":"This element allows users to input time and can be adjusted to show either a 12 or 24 hour format.","tagName":"p"},{"text":"Basic Usage","tagName":"h3"},{"text":"A fixed time can be set by configuring attributes/properties.","tagName":"p"},{"text":"<div>\n  <ef-time-picker></ef-time-picker>\n  <ef-time-picker value=\"12:30\"></ef-time-picker>\n  <ef-time-picker hours=\"12\" minutes=\"30\"></ef-time-picker>\n</div>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"div {\n  display: flex;\n}\n\nef-time-picker:not(last-child) {\n  margin-right: 40px;\n}","tagName":"pre"},{"text":"<ef-time-picker></ef-time-picker>\n<ef-time-picker value=\"12:30\"></ef-time-picker>\n<ef-time-picker hours=\"12\" minutes=\"30\"></ef-time-picker>","tagName":"pre"},{"text":"Valid time formats are hh:mm and hh:mm:ss. This component does not support milliseconds.","tagName":"p"},{"text":"Setting current time","tagName":"h3"},{"text":"You can set the current time using native Date object methods.","tagName":"p"},{"text":"var date = new Date();\nvar localTimePicker = document.getElementById('local-time');\nlocalTimePicker.hours = date.getHours();\nlocalTimePicker.minutes = date.getMinutes();","tagName":"pre"},{"text":"Similarly, you can set current time in the UTC timezone.","tagName":"p"},{"text":"var date = new Date();\nvar utcTimePicker = document.getElementById('utc-time');\nutcTimePicker.hours = date.getUTCHours();\nutcTimePicker.minutes = date.getUTCMinutes();","tagName":"pre"},{"text":"<div>\n  <ef-time-picker id=\"local-time\"></ef-time-picker>\n  <ef-time-picker id=\"utc-time\"></ef-time-picker>\n</div>","tagName":"pre"},{"text":"var date = new Date();\nvar localTimePicker = document.getElementById('local-time');\nvar utcTimePicker = document.getElementById('utc-time');\n\nlocalTimePicker.hours = date.getHours();\nlocalTimePicker.minutes = date.getMinutes();\nutcTimePicker.hours = date.getUTCHours();\nutcTimePicker.minutes = date.getUTCMinutes();","tagName":"pre"},{"text":"div {\n  display: flex;\n}\n\nef-time-picker:not(last-child) {\n  margin-right: 40px;\n}","tagName":"pre"},{"text":"Combining time and date","tagName":"h3"},{"text":"Typically, the time value must be combined with a date object in order to use an API. To do this, use methods on the native Date object.","tagName":"p"},{"text":"var el = document.querySelector('ef-time-picker');\nvar date = new Date();\ndate.setHours(el.hours);\ndate.setMinutes(el.minutes);\ndate.setSeconds(el.seconds);","tagName":"pre"},{"text":"This is useful when implementing ef-time-picker with ef-calendar.","tagName":"p"},{"text":"<ef-calendar>\n  <ef-time-picker slot=\"footer\"></ef-time-picker>\n</ef-calendar>","tagName":"pre"},{"text":"var calendar = document.querySelector('ef-calendar');\nvar timePicker = document.querySelector('ef-time-picker');\ncalendar.addEventListener('value-changed', function() {\n  if (calendar.value && timePicker.value) {\n    var date = new Date(calendar.value);\n    date.setHours(timePicker.hours);\n    date.setMinutes(timePicker.minutes);\n    date.setSeconds(timePicker.seconds);\n    console.log(date.toLocaleString());\n  }\n}, true);","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"<ef-calendar>\n  <ef-time-picker slot=\"footer\"></ef-time-picker>\n</ef-calendar>","tagName":"pre"},{"text":"var calendar = document.querySelector('ef-calendar');\nvar timePicker = document.querySelector('ef-time-picker');\n\ncalendar.addEventListener('value-changed', function () {\n  if (calendar.value && timePicker.value) {\n    var date = new Date(calendar.value);\n    date.setHours(timePicker.hours);\n    date.setMinutes(timePicker.minutes);\n    date.setSeconds(timePicker.seconds);\n    console.log(date.toLocaleString());\n  }\n}, true);","tagName":"pre"},{"text":"API Reference","tagName":"h2"},{"text":"Attributes","tagName":"h3"},{"text":"Properties","tagName":"h3"},{"text":"Methods","tagName":"h3"},{"text":"Events","tagName":"h3"}]},{"title":"Tree Select","filename":"elements/tree-select.html","contents":[{"text":"  <div class=\"wrapper\">\n    <ef-tree-select opened></ef-tree-select>\n  </div>","tagName":"pre"},{"text":"var el = document.querySelector('ef-tree-select');\nel.data = [{\n  'value': 'AFR',\n  'label': 'Africa',\n  'selected': false,\n  'expanded': true,\n  'items': [{\n    'value': 'DZA',\n    'label': 'Algeria',\n    'selected': false,\n    'expanded': true,\n    'items': [{\n      'value': 'ADR',\n      'label': 'Adrar',\n      'selected': false,\n      'items': []\n    }, {\n      'value': 'TAM',\n      'label': 'Tamanghasset',\n      'selected': false,\n      'items': []\n    }, {\n      'value': 'GUE',\n      'label': 'Guelma',\n      'selected': false,\n      'items': []\n    }]\n  }, {\n    'value': 'AGO',\n    'label': 'Angola',\n    'selected': false,\n    'items': []\n  }, {\n    'value': 'BEN',\n    'label': 'Benin',\n    'selected': false,\n    'items': []\n  }, {\n    'value': 'BWA',\n    'label': 'Botswana',\n    'selected': false,\n    'items': []\n  }]\n}];\nsetTimeout(function() { el.opened = true; }, 1000);","tagName":"pre"},{"text":".wrapper {\n  padding: 5px;\n  height: 450px;\n}","tagName":"pre"},{"text":"Tree Select provides an interface for displaying, navigating and selecting items from a nested data structure.","tagName":"p"},{"text":"Basic usage","tagName":"h2"},{"text":"Tree Select is designed to work with multiple items and as such has a commit model. A selection is made using the interface and then committed, or cancelled. The result of the committed selection can be accessed using the values property. This is an array of selected item values.","tagName":"p"},{"text":"<div class=\"wrapper\">\n  <ef-tree-select opened></ef-tree-select>\n</div>","tagName":"pre"},{"text":"var el = document.querySelector('ef-tree-select');\nel.data = [{\n  'value': 'AFR',\n  'label': 'Africa',\n  'selected': false,\n  'items': [{\n    'value': 'DZA',\n    'label': 'Algeria',\n    'selected': false,\n    'items': [{\n      'value': 'ADR',\n      'label': 'Adrar',\n      'selected': false,\n      'items': []\n    }, {\n      'value': 'TAM',\n      'label': 'Tamanghasset',\n      'selected': false,\n      'items': []\n    }, {\n      'value': 'GUE',\n      'label': 'Guelma',\n      'selected': false,\n      'items': []\n    }]\n  }, {\n    'value': 'AGO',\n    'label': 'Angola',\n    'selected': false,\n    'items': []\n  }, {\n    'value': 'BEN',\n    'label': 'Benin',\n    'selected': false,\n    'items': []\n  }, {\n    'value': 'BWA',\n    'label': 'Botswana',\n    'selected': false,\n    'items': []\n  }]\n}];","tagName":"pre"},{"text":".wrapper {\n  padding: 5px;\n  height: 450px;\n}","tagName":"pre"},{"text":"Data property interface","tagName":"h2"},{"text":"The data property of the ef-tree-select uses the TreeSelectData interface which is described below.","tagName":"p"},{"text":"\nName\nType\nDescription\n","tagName":"tr"},{"text":"\nlabel\nstring\nItem's label\n","tagName":"tr"},{"text":"\nvalue\nstring\nValue of an item\n","tagName":"tr"},{"text":"\nselected\nboolean\nSelection state of the item\n","tagName":"tr"},{"text":"\nexpanded\nboolean\nExpanded state of child items\n","tagName":"tr"},{"text":"\nitems\narray\nChild items collection\n","tagName":"tr"},{"text":"\nreadonly\nboolean\nSets the item to be readonly\n","tagName":"tr"},{"text":"\ndisabled\nboolean\nSets the item to be disabled\n","tagName":"tr"},{"text":"Pills","tagName":"h2"},{"text":"Optionally, Tree Select can display selected items as pills by adding the show-pills attribute. Items can also be de-selected by removing the pill.","tagName":"p"},{"text":"<ef-tree-select show-pills opened></ef-tree-select>","tagName":"pre"},{"text":"var el = document.querySelector('ef-tree-select');\nel.data = [{\n            'value': 'AFR',\n            'label': 'Africa',\n            'selected': false,\n            'items': [{\n              'value': 'DZA',\n              'label': 'Algeria',\n              'selected': true,\n              'items': [{\n                'value': 'ADR',\n                'label': 'Adrar',\n                'selected': false,\n                'items': []\n              }]\n            }, {\n              'value': 'AGO',\n              'label': 'Angola',\n              'selected': false,\n              'items': []\n            }]\n          }];","tagName":"pre"},{"text":"If the number of selected items is likely to be large, pills may not be a good choice for display or performance.","tagName":"p"},{"text":"Filtering","tagName":"h2"},{"text":"Tree select has built in text filtering and selection editing.","tagName":"p"},{"text":"By clicking the Selected button, Tree Select allows the items to be filtered by selected state, and that subset to be operated on in isolation from the main item list.","tagName":"p"},{"text":"For custom filtering, Tree Select provides an identical interface as Combo Box. You provide a predicate function that tests an item. Please consult the Combo Box docs for details on how to construct a compatible filter.","tagName":"p"},{"text":"Combo Box docs","tagName":"a"},{"text":"UI Controls","tagName":"h2"},{"text":"Tree Select has several controls.","tagName":"p"},{"text":"<div class=\"wrapper\">\n  <ef-tree-select opened></ef-tree-select>\n</div>","tagName":"pre"},{"text":"var el = document.querySelector('ef-tree-select');\nel.data = [{\n  'value': 'AFR',\n  'label': 'Africa',\n  'selected': false,\n  'items': [{\n    'value': 'DZA',\n    'label': 'Algeria',\n    'selected': false,\n    'items': [{\n      'value': 'ADR',\n      'label': 'Adrar',\n      'selected': false,\n      'items': []\n    }, {\n      'value': 'TAM',\n      'label': 'Tamanghasset',\n      'selected': false,\n      'items': []\n    }, {\n      'value': 'GUE',\n      'label': 'Guelma',\n      'selected': false,\n      'items': []\n    }]\n  }, {\n    'value': 'AGO',\n    'label': 'Angola',\n    'selected': false,\n    'items': []\n  }, {\n    'value': 'BEN',\n    'label': 'Benin',\n    'selected': false,\n    'items': []\n  }, {\n    'value': 'BWA',\n    'label': 'Botswana',\n    'selected': false,\n    'items': []\n  }]\n}];","tagName":"pre"},{"text":".wrapper {\n  padding: 5px;\n  height: 450px;\n}","tagName":"pre"},{"text":"Full and Selected","tagName":"p"},{"text":"These controls will filter the list by selected state.","tagName":"p"},{"text":"Select All/Deselect","tagName":"p"},{"text":"This is a toggle control which will change the selected state of all items accordingly.","tagName":"p"},{"text":"Collapse All/Expand All","tagName":"p"},{"text":"This is a toggle control which will change the expanded state of all items accordingly.","tagName":"p"},{"text":"Done","tagName":"p"},{"text":"This control will save the current selection, and result of the firing of the value-changed event.","tagName":"p"},{"text":"Cancel","tagName":"p"},{"text":"This control will abort any current selection changes and go back to the tree state when first opened.","tagName":"p"},{"text":"Customize size","tagName":"h2"},{"text":"The theme manages the size of popup panel, but can be overridden by using CSS variables.","tagName":"p"},{"text":"\nCSS Variables Name\nDescription\n","tagName":"tr"},{"text":"\n--list-max-width\nMax width of popup panel\n","tagName":"tr"},{"text":"\n--list-max-height\nMax height of selection tree\n","tagName":"tr"},{"text":"API Reference","tagName":"h2"},{"text":"Attributes","tagName":"h3"},{"text":"Properties","tagName":"h3"},{"text":"Only needed if internal filtering is unused","tagName":"p"},{"text":"Events","tagName":"h3"},{"text":"","tagName":"p"}]},{"title":"Accordion","filename":"elements/accordion.html","contents":[{"text":"<ef-accordion>\n  <ef-collapse spacing header=\"SpaceX Dragon\">\n    The Earth was small, light blue, and so touchingly alone, our home that must be defended like a holy relic. The Earth was absolutely round. I believe I never knew what the word round meant until I saw Earth from space.\n  </ef-collapse>\n  <ef-collapse spacing header=\"Falcon 9\">\n    We want to explore. We&apos;re curious people. Look back over history, people have put their lives at stake to go out and explore ... We believe in what we&apos;re doing. Now it&apos;s time to go.\n  </ef-collapse>\n  <ef-collapse spacing header=\"Falcon Heavy\">\n    You know, being a test pilot isn&apos;t always the healthiest business in the world.\n  </ef-collapse>\n</ef-accordion>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"ef-accordion is used to display a group of ef-collapse controls. By default, only one item at a time can be expanded, but this behavior can be customized to allow multiple expanded item.","tagName":"p"},{"text":"Basic usage","tagName":"h3"},{"text":"Accordions can be created by using ef-collapse inside ef-accordion.","tagName":"p"},{"text":"<ef-accordion>\n  <ef-collapse spacing header=\"SpaceX Dragon\">\n    The Earth was small, light blue, and so touchingly alone, our home that must be defended like a holy relic. The Earth was absolutely round. I believe I never knew what the word round meant until I saw Earth from space.\n  </ef-collapse>\n  <ef-collapse spacing header=\"Falcon 9\">\n    We want to explore. We're curious people. Look back over history, people have put their lives at stake to go out and explore ... We believe in what we're doing. Now it's time to go.\n  </ef-collapse>\n  <ef-collapse spacing header=\"Falcon Heavy\">\n    You know, being a test pilot isn't always the healthiest business in the world.\n  </ef-collapse>\n</ef-accordion>","tagName":"pre"},{"text":"By default, only one item at a time can be expanded. Adding the auto-collapse-disabled attribute will allow each item to expand independently.","tagName":"p"},{"text":"<ef-accordion auto-collapse-disabled>\n  <ef-collapse header=\"SpaceX Dragon\">\n    The Earth was small, light blue, and so touchingly alone, our home that must be defended like a holy relic. The Earth was absolutely round. I believe I never knew what the word round meant until I saw Earth from space.\n  </ef-collapse>\n  <ef-collapse header=\"Falcon 9\">\n    We want to explore. We&apos;re curious people. Look back over history, people have put their lives at stake to go out and explore ... We believe in what we&apos;re doing. Now it&apos;s time to go.\n  </ef-collapse>\n</ef-accordion>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"<ef-accordion auto-collapse-disabled>\n  <ef-collapse header=\"SpaceX Dragon\">\n    The Earth was small, light blue, and so touchingly alone, our home that must be defended like a holy relic. The Earth was absolutely round. I believe I never knew what the word round meant until I saw Earth from space.\n  </ef-collapse>\n  <ef-collapse header=\"Falcon 9\">\n    We want to explore. We're curious people. Look back over history, people have put their lives at stake to go out and explore ... We believe in what we're doing. Now it's time to go.\n  </ef-collapse>\n</ef-accordion>","tagName":"pre"},{"text":"Initial expanding state and content spacing.","tagName":"h3"},{"text":"To set an item in the accordion to expand in its initial state, set the expanded attribute to ef-collapse. If you add the spacing attribute to ef-accordion then default padding will be applied to the content section of every collapse item.","tagName":"p"},{"text":"<ef-accordion spacing>\n  <ef-collapse header=\"SpaceX Dragon\">\n    The Earth was small, light blue, and so touchingly alone, our home that must be defended like a holy relic. The Earth was absolutely round. I believe I never knew what the word round meant until I saw Earth from space.\n  </ef-collapse>\n  <ef-collapse expanded header=\"Falcon 9\">\n    We want to explore. We&apos;re curious people. Look back over history, people have put their lives at stake to go out and explore ... We believe in what we&apos;re doing. Now it&apos;s time to go.\n  </ef-collapse>\n</ef-accordion>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"<ef-accordion spacing>\n  <ef-collapse header=\"SpaceX Dragon\">\n    The Earth was small, light blue, and so touchingly alone, our home that must be defended like a holy relic. The Earth was absolutely round. I believe I never knew what the word round meant until I saw Earth from space.\n  </ef-collapse>\n  <ef-collapse expanded header=\"Falcon 9\">\n    We want to explore. We're curious people. Look back over history, people have put their lives at stake to go out and explore ... We believe in what we're doing. Now it's time to go.\n  </ef-collapse>\n</ef-accordion>","tagName":"pre"},{"text":"Using slot","tagName":"h3"},{"text":"Other features of ef-collapse can still be used e.g. slots.","tagName":"p"},{"text":"<ef-accordion>\n  <ef-collapse header=\"SpaceX Dragon\">\n    <ef-checkbox slot=\"header-left\"></ef-checkbox>\n    <div slot=\"header-right\">8</div>\n    <ef-button slot=\"header-right\" icon=\"menu\" transparent></ef-button>\n    The Earth was small, light blue, and so touchingly alone, our home that must be defended like a holy relic. The Earth was absolutely round. I believe I never knew what the word round meant until I saw Earth from space.\n  </ef-collapse>\n\n  <ef-collapse header=\"Falcon 9\">\n    <ef-checkbox slot=\"header-left\"></ef-checkbox>\n    <div slot=\"header-right\">10</div>\n    <ef-button slot=\"header-right\" icon=\"menu\" transparent></ef-button>\n    We want to explore. We&apos;re curious people. Look back over history, people have put their lives at stake to go out and explore ... We believe in what we&apos;re doing. Now it&apos;s time to go.\n  </ef-collapse>\n\n  <ef-collapse header=\"Falcon Heavy\">\n    <ef-checkbox slot=\"header-left\"></ef-checkbox>\n    <div slot=\"header-right\">7</div>\n    <ef-button slot=\"header-right\" icon=\"menu\" transparent></ef-button>\n    Dinosaurs are extinct today because they lacked opposable thumbs and the brainpower to build a space program.\n  </ef-collapse>\n</ef-accordion>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"ef-accordion {\n  margin-top: 35px;\n  margin-bottom: 35px;\n}\n\nef-collapse>ef-checkbox {\n  margin-right: 5px;\n}","tagName":"pre"},{"text":"<ef-accordion>\n  <ef-collapse header=\"SpaceX Dragon\">\n    <ef-checkbox slot=\"header-left\"></ef-checkbox>\n    <div slot=\"header-right\">8</div>\n    <ef-button slot=\"header-right\" icon=\"menu\" transparent></ef-button>\n    The Earth was small, light blue, and so touchingly alone, our home that must be defended like a holy relic. The Earth was absolutely round. I believe I never knew what the word round meant until I saw Earth from space.\n  </ef-collapse>\n\n  <ef-collapse header=\"Falcon 9\">\n    <ef-checkbox slot=\"header-left\"></ef-checkbox>\n    <div slot=\"header-right\">10</div>\n    <ef-button slot=\"header-right\" icon=\"menu\" transparent></ef-button>\n    We want to explore. We're curious people. Look back over history, people have put their lives at stake to go out and explore ... We believe in what we're doing. Now it's time to go.\n  </ef-collapse>\n\n  <ef-collapse header=\"Falcon Heavy\">\n    <ef-checkbox slot=\"header-left\"></ef-checkbox>\n    <div slot=\"header-right\">7</div>\n    <ef-button slot=\"header-right\" icon=\"menu\" transparent></ef-button>\n    Dinosaurs are extinct today because they lacked opposable thumbs and the brainpower to build a space program.\n  </ef-collapse>\n</ef-accordion>","tagName":"pre"},{"text":"Slots","tagName":"h2"},{"text":"API Reference","tagName":"h2"},{"text":"Attributes","tagName":"h3"},{"text":"Properties","tagName":"h3"}]},{"title":"Collapse","filename":"elements/collapse.html","contents":[{"text":"<ef-collapse header=\"Section 1\">\n  <div style=\"padding:10px\">Beans, breve galao froth arabica wings seasonal. Medium, galao redeye single origin brewed rich flavour as crema.</div>\n</ef-collapse>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"ef-collapse allows users to hide non-critical information or areas of the screen, maximizing the amount of real estate available to their primary content.","tagName":"p"},{"text":"The component can wrap around any html content, be it native html elements such as div or custom components.","tagName":"p"},{"text":"Set title","tagName":"h3"},{"text":"The title of each section can be set using the header attribute.","tagName":"p"},{"text":"<ef-collapse header=\"Section 1\">\n  <div>\n    Beans, breve galao froth arabica wings seasonal. Medium, galao redeye single origin brewed rich flavour as crema.\n  </div>\n</ef-collapse>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"<ef-collapse header=\"Section 1\">\n  <div>\n  Beans, breve galao froth arabica wings seasonal. Medium, galao redeye single origin brewed rich flavour as crema.\n  </div>\n</ef-collapse>","tagName":"pre"},{"text":"Set section level","tagName":"h3"},{"text":"You can set the level attribute to visualize hierarchical content. Styling each level is managed by the theme.","tagName":"p"},{"text":"<ef-collapse level=\"1\" header=\"Level 1\">\n  <div>\n    Beans, breve galao froth arabica wings seasonal. Medium, galao redeye single origin brewed rich flavour as crema.\n  </div>\n</ef-collapse>\n<ef-collapse level=\"2\" header=\"Level 2\">\n  <div>\n    Foam, crema pumpkin spice siphon cup aromatic ut turkish plunger pot dark. That macchiato robusta sweet galao blue mountain to go trifecta fair trade.\n  </div>\n</ef-collapse>\n<ef-collapse level=\"3\" header=\"Level 3\">\n  <div>\n    Macchiato grounds cappuccino brewed cortado beans lungo bar mocha. Flavour, irish bar siphon foam siphon skinny est trifecta.\n  </div>\n</ef-collapse>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"<ef-collapse level=\"1\" header=\"Level 1\">\n  <div>\n  Beans, breve galao froth arabica wings seasonal. Medium, galao redeye single origin brewed rich flavour as crema.\n  </div>\n</ef-collapse>\n<ef-collapse level=\"2\" header=\"Level 2\">\n  <div>\n  Foam, crema pumpkin spice siphon cup aromatic ut turkish plunger pot dark. That macchiato robusta sweet galao blue mountain to go trifecta fair trade.\n</div>\n</ef-collapse>\n<ef-collapse level=\"3\" header=\"Level 3\">\n  <div>\n  Macchiato grounds cappuccino brewed cortado beans lungo bar mocha. Flavour, irish bar siphon foam siphon skinny est trifecta.\n  </div>\n</ef-collapse>","tagName":"pre"},{"text":"Content spacing","tagName":"h3"},{"text":"Content can be set to use default padding from the theme by adding the spacing attribute.","tagName":"p"},{"text":"<ef-collapse spacing header=\"Section 1\">\n  <div>\n    Beans, breve galao froth arabica wings seasonal. Medium, galao redeye single origin brewed rich flavour as crema.\n  </div>\n</ef-collapse>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"<ef-collapse spacing header=\"Section 1\">\n  <div>\n  Beans, breve galao froth arabica wings seasonal. Medium, galao redeye single origin brewed rich flavour as crema.\n  </div>\n</ef-collapse>","tagName":"pre"},{"text":"Custom header","tagName":"h3"},{"text":"The header can contain simple text or components such as checkbox, button. These components can be added using slot.","tagName":"p"},{"text":"<ef-collapse header=\"Single Origin Beans\">\n  <ef-checkbox slot=\"header-left\"></ef-checkbox>\n  <div slot=\"header-right\" class=\"badge\">8</div>\n  <ef-button slot=\"header-right\" icon=\"menu\" transparent></ef-button>\n\n  <div>\n    Beans, breve galao froth arabica wings seasonal. Medium, galao redeye single origin brewed rich flavour as crema.\n  </div>\n</ef-collapse>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"ef-collapse {\n  margin-top: 35px;\n  margin-bottom: 35px;\n}\n\nef-collapse>ef-checkbox {\n  margin-right: 5px;\n}","tagName":"pre"},{"text":"<ef-collapse header=\"Single Origin Beans\">\n  <ef-checkbox slot=\"header-left\"></ef-checkbox>\n  <div slot=\"header-right\" class=\"badge\">8</div>\n  <ef-button slot=\"header-right\" icon=\"menu\" transparent></ef-button>\n\n  <div>\n  Beans, breve galao froth arabica wings seasonal. Medium, galao redeye single origin brewed rich flavour as crema.\n  </div>\n</ef-collapse>","tagName":"pre"},{"text":"Events","tagName":"h3"},{"text":"ef-collapse is triggered when the componet is expanded or clicked.","tagName":"p"},{"text":"collapse.addEventListener('expanded-changed', function (e) {\n  // e.detail.value will give the current expanded state\n});","tagName":"pre"},{"text":"Slots","tagName":"h2"},{"text":"API Reference","tagName":"h2"},{"text":"Attributes","tagName":"h3"},{"text":"Properties","tagName":"h3"},{"text":"Events","tagName":"h3"}]},{"title":"Header","filename":"elements/header.html","contents":[{"text":"<ef-header level=\"1\">Header Level 1</ef-header>\n<ef-header level=\"2\">Header Level 2</ef-header>\n<ef-header level=\"3\">Header Level 3</ef-header>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"Header is used to identify and separate different sections of a page. Headers help to organize the page content into a sensible hierarchy and improve the user experience.","tagName":"p"},{"text":"Basic usage","tagName":"h3"},{"text":"Content in ef-header will be displayed as a title.","tagName":"p"},{"text":"<ef-header>Header Title</ef-header>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"<ef-header>Header Title</ef-header>","tagName":"pre"},{"text":"Levels","tagName":"h3"},{"text":"A level can be set in ef-header to improve data hierarchy. Styling of levels is managed by the theme.","tagName":"p"},{"text":"<ef-header level=\"1\">Header Level 1</ef-header>\n<ef-header level=\"2\">Header Level 2</ef-header>\n<ef-header level=\"3\">Header Level 3</ef-header>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"<ef-header level=\"1\">Header Level 1</ef-header>\n<ef-header level=\"2\">Header Level 2</ef-header>\n<ef-header level=\"3\">Header Level 3</ef-header>","tagName":"pre"},{"text":"Including links in headers","tagName":"h3"},{"text":"You can create a header with linking by using an HTML link tag inside the header content.","tagName":"p"},{"text":"<ef-header level=\"1\"><a href=\"#\">Header Level Link 1</a></ef-header>\n<ef-header level=\"2\"><a href=\"#\">Header Level Link 2</a></ef-header>\n<ef-header level=\"3\"><a href=\"#\">Header Level Link 3</a></ef-header>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"<ef-header level=\"1\"><a href=\"#\">Header Level Link 1</a></ef-header>\n<ef-header level=\"2\"><a href=\"#\">Header Level Link 2</a></ef-header>\n<ef-header level=\"3\"><a href=\"#\">Header Level Link 3</a></ef-header>","tagName":"pre"},{"text":"Slotting content","tagName":"h3"},{"text":"You can include a component in a header by assigning the component to a slot.","tagName":"p"},{"text":"<ef-header level=\"1\">Header Level 1\n  <ef-button slot=\"left\" icon=\"menu\" transparent></ef-button>\n  <ef-checkbox slot=\"right\" checked>Option</ef-checkbox>\n</ef-header>\n<ef-header level=\"2\">Header Level 2\n  <ef-checkbox slot=\"right\" checked>Option</ef-checkbox>\n</ef-header>\n<ef-header level=\"3\">Header Level 3\n  <ef-button slot=\"right\" icon=\"filter\" transparent></ef-button>\n  <ef-checkbox slot=\"right\" checked>Option</ef-checkbox>\n</ef-header>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"<ef-header level=\"1\">Header Level 1\n    <ef-button slot=\"left\" icon=\"menu\" transparent></ef-button>\n    <ef-checkbox slot=\"right\" checked>Option</ef-checkbox>\n</ef-header>\n<ef-header level=\"2\">Header Level 2\n    <ef-checkbox slot=\"right\" checked>Option</ef-checkbox>\n</ef-header>\n<ef-header level=\"3\">Header Level 3\n    <ef-button slot=\"right\" icon=\"filter\" transparent></ef-button>\n    <ef-checkbox slot=\"right\" checked>Option</ef-checkbox>\n</ef-header>","tagName":"pre"},{"text":"Slots","tagName":"h2"},{"text":"API Reference","tagName":"h2"},{"text":"Attributes","tagName":"h3"},{"text":"Properties","tagName":"h3"}]},{"title":"Item","filename":"elements/item.html","contents":[{"text":"<ef-item type=\"header\">Menu</ef-item>\n<ef-item icon=\"home\">Home</ef-item>\n<ef-item icon=\"directory\">Contacts</ef-item>\n<ef-item icon=\"calendar\">Calendar</ef-item>\n<ef-item icon=\"briefcase\" disabled>Briefcase</ef-item>\n<ef-item type=\"header\">Advanced</ef-item>\n<ef-item type=\"divider\"></ef-item>\n<ef-item icon=\"compass\">Sneak Peeks</ef-item>\n<ef-item icon=\"dashboard\">Dashboard</ef-item>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"ef-item {\n  width: 300px;\n}","tagName":"pre"},{"text":"ef-item is generally used as a basic building block to compose complex custom elements. Additionally it can be used by applications to create simple menus or navigation panels.","tagName":"p"},{"text":"Basic usage","tagName":"h3"},{"text":"Use ef-item to create an individual list item. It provides features such as types and icons to simplify building menu controls.","tagName":"p"},{"text":"<div id=\"menu\">\n  <ef-item type=\"header\">Edit</ef-item>\n  <ef-item icon=\"undo\" value=\"undo\">Undo</ef-item>\n  <ef-item icon=\"redo\" value=\"redo\" disabled>Redo</ef-item>\n  <ef-item type=\"divider\"></ef-item>\n  <ef-item icon=\"cut\" value=\"cut\">Cut</ef-item>\n  <ef-item icon=\"copy\" value=\"copy\">Copy</ef-item>\n  <ef-item icon=\"paste\" value=\"paste\">Paste</ef-item>\n</div>\n\n<ef-item id=\"selected\" disabled label=\"Try to click menu above\"></ef-item>","tagName":"pre"},{"text":"var menu = document.getElementById(\"menu\");\nvar selectedElement;\nmenu.addEventListener(\"tap\", function(e) {\n  var target = e.target;\n  if (!target.highlightable) {\n    return;\n  }\n  if (selectedElement) {\n    selectedElement.selected = false;\n  }\n  selectedElement = target;\n  selectedElement.selected = true;\n  document.getElementById(\"selected\").label = selectedElement.value + \" is clicked!\";\n});\nmenu.addEventListener('mouseover', function(event) {\n  event.target.highlighted = true;\n});\nmenu.addEventListener('mouseout', function(event) {\n  event.target.highlighted = false;\n});","tagName":"pre"},{"text":"#menu {\n  display: flex;\n  flex-direction: column;\n  width: 300px;\n}\n\n#selected {\n  margin: 10px 0;\n}","tagName":"pre"},{"text":"<div id=\"menu\">\n  <ef-item type=\"header\">Edit</ef-item>\n  <ef-item icon=\"undo\" value=\"undo\">Undo</ef-item>\n  <ef-item icon=\"redo\" value=\"redo\" disabled>Redo</ef-item>\n  <ef-item type=\"divider\"></ef-item>\n  <ef-item icon=\"cut\" value=\"cut\">Cut</ef-item>\n  <ef-item icon=\"copy\" value=\"copy\">Copy</ef-item>\n  <ef-item icon=\"paste\" value=\"paste\">Paste</ef-item>\n</div>","tagName":"pre"},{"text":"ef-item provides styles for the focus, highlighted and selected states. However, only the focus state is managed by ef-item itself. The highlight and selection models should be managed by the external component by setting the highlighted and selected states, respectively.","tagName":"p"},{"text":"menu.addEventListener(\"tap\", function (e) {\n  var target = e.target;\n  // skip if users click on disabled or divider\n  if (!target.highlightable) {\n    return;\n  }\n  // deselected item that currently selected\n  if (selectedElement) {\n    selectedElement.selected = false;\n  }\n  // set selected flag to clicked item\n  selectedElement = target;\n  selectedElement.selected = true;\n});\n\nmenu.addEventListener('mouseover', function (event) {\n  event.target.highlighted = true;\n});\n\nmenu.addEventListener('mouseout', function (event) {\n  event.target.highlighted = false;\n});","tagName":"pre"},{"text":"Using labels","tagName":"h3"},{"text":"ef-item provides label and sub-label attributes to set the label property as a simplified instance of the content.","tagName":"p"},{"text":"<div id=\"menu\">\n  <ef-item label=\"Team Members\" icon=\"directory\"></ef-item>\n  <ef-item label=\"Cornelius Martin\" sub-label=\"Position: Software Engineer\" icon=\"individual\"></ef-item>\n  <ef-item label=\"Angela Lloyd\" sub-label=\"Position: Development Manager\" icon=\"individual\"></ef-item>\n</div>","tagName":"pre"},{"text":"var menu = document.getElementById(\"menu\");\nmenu.addEventListener('mouseover', function(event) {\n  event.target.highlighted = true;\n});\nmenu.addEventListener('mouseout', function(event) {\n  event.target.highlighted = false;\n});","tagName":"pre"},{"text":"#menu {\n  display: flex;\n  flex-direction: column;\n  width: 300px;\n}","tagName":"pre"},{"text":"<div id=\"menu\">\n  <ef-item label=\"Team Members\" icon=\"directory\"></ef-item>\n    <ef-item label=\"Cornelius Martin\" sub-label=\"Position: Software Engineer\" icon=\"individual\"></ef-item>\n  <ef-item label=\"Angela Lloyd\" sub-label=\"Position: Development Manager\" icon=\"individual\" ></ef-item>\n</div>","tagName":"pre"},{"text":"Both label and sub-label are not displayed if ef-item has children.","tagName":"p"},{"text":"<ef-item label=\"This text will not be displayed\" sub-label=\"This text will not be displayed\">\n    This text will be displayed\n</ef-item>","tagName":"pre"},{"text":"Using slots","tagName":"h3"},{"text":"Custom content can be added using slots. ef-item provides bopth left and right slots.","tagName":"p"},{"text":"<div id=\"todo\">\n  <ef-item>\n    <ef-checkbox>Carrots</ef-checkbox>\n    <div class=\"notes\" slot=\"right\">Small bag</div>\n    <ef-button toggles icon=\"trash\" slot=\"right\"></ef-button>\n  </ef-item>\n  <ef-item>\n    <ef-checkbox>Chocolates</ef-checkbox>\n    <div class=\"notes\" slot=\"right\">For Otis</div>\n    <ef-button toggles icon=\"trash\" slot=\"right\"></ef-button>\n  </ef-item>\n  <ef-item>\n    <ef-checkbox>Pumpkins</ef-checkbox>\n    <div class=\"notes\" slot=\"right\">Halloween!</div>\n    <ef-button toggles icon=\"trash\" slot=\"right\"></ef-button>\n  </ef-item>\n</div>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"#todo {\n  display: flex;\n  flex-direction: column;\n  width: 550px;\n  margin: 10px 0;\n}\n\nef-button {\n  margin: 0;\n}\n\n.notes {\n  color: #b7b7b7;\n  margin-right: 10px;\n}\n\nef-item[focused] ef-checkbox {\n  color: white;\n}\n\nef-item[focused] .notes {\n  color: white;\n}","tagName":"pre"},{"text":"<ef-item>\n  <ef-checkbox>Carrots</ef-checkbox>\n  <div class=\"notes\" slot=\"right\">Small bag</div>\n  <ef-button toggles icon=\"trash\" slot=\"right\"></ef-button>\n</ef-item>","tagName":"pre"},{"text":"Advanced usage","tagName":"h3"},{"text":"ef-item can be used to create menu elements. You should implement your own highlight and selection models.","tagName":"p"},{"text":"<div id=\"menu\" tabindex=\"0\">\n  <ef-item type=\"header\">EMEA</ef-item>\n  <ef-item value=\"Spain\">Spain</ef-item>\n  <ef-item value=\"France\" disabled>France</ef-item>\n  <ef-item value=\"Italy\">Italy</ef-item>\n  <ef-item type=\"header\">ASIA</ef-item>\n  <ef-item type=\"divider\"></ef-item>\n  <ef-item value=\"Japan\">Japan</ef-item>\n  <ef-item value=\"China\">China</ef-item>\n</div>\n<div id=\"selected\">Try to click and use keyboard to navigate the menu</div>","tagName":"pre"},{"text":"var menu = document.getElementById('menu');\nvar selectedEl;\n\n// Get highlighted item\nvar getHighlighted = function() {\n  return menu.querySelector('ef-item[highlighted]');\n};\n\n// Get all items that can be highlighted\nvar getHighlightableEls = function() {\n  return Array.prototype.slice.call(menu.querySelectorAll('ef-item'))\n    .filter(function(item) {\n      return item.highlightable;\n    });\n};\n\nvar highlight = function(el) {\n  var highlightedEl = getHighlighted();\n  if (highlightedEl === el) {\n    return true;\n  }\n  if (!el.highlightable) {\n    return false;\n  }\n\n  if (highlightedEl) {\n    highlightedEl.highlighted = false;\n  }\n\n  el.highlighted = true;\n};\n\n// Highlight next or previous item\nvar highlightNextFocusableItem = function(event, dir) {\n  event.stopPropagation();\n  event.preventDefault();\n\n  var highlightableEls = getHighlightableEls();\n  var highlightedEl = getHighlighted();\n\n  if (dir === 1) {\n    newHighlighted = highlightableEls[highlightableEls.indexOf(highlightedEl) + 1] || highlightableEls[0];\n  } else if (dir === -1) {\n    newHighlighted = highlightableEls[highlightableEls.indexOf(highlightedEl) - 1] || highlightableEls[highlightableEls.length - 1];\n  }\n\n  if (newHighlighted) {\n    highlight(newHighlighted);\n    newHighlighted.focus();\n  }\n};\n\nvar select = function(item) {\n  if (selectedEl) {\n    selectedEl.selected = false;\n  }\n  selectedEl = item;\n  item.selected = true;\n  document.getElementById('selected').innerHTML = item.value + ' is selected!';\n};\n\nmenu.addEventListener('keydown', function(event) {\n  switch (event.key) {\n    case 'Down':\n    case 'ArrowDown':\n    case 'Tab':\n      highlightNextFocusableItem(event, 1);\n      break;\n    case 'Up':\n    case 'ArrowUp':\n      highlightNextFocusableItem(event, -1);\n      break;\n    case 'Enter':\n      getHighlighted().focus();\n      getHighlighted() && getHighlighted().click();\n      break;\n    default:\n      // no default\n  }\n});\n\nmenu.addEventListener('mouseover', function(event) {\n  menu.focus();\n  highlight(event.target);\n});\n\nmenu.addEventListener('mouseout', function(event) {\n  if (event.target.highlighted) {\n    event.target.highlighted = false;\n  }\n});\n\nmenu.addEventListener('tap', function(event) {\n  if (event.target.highlightable) {\n    highlight(event.target);\n    select(event.target);\n  }\n});","tagName":"pre"},{"text":"#menu {\n  display: flex;\n  flex-direction: column;\n  width: 300px;\n  outline: none;\n}\n\n#selected {\n  margin: 10px 0;\n}","tagName":"pre"},{"text":"<div id=\"menu\" tabindex=\"0\">\n  <ef-item type=\"header\">EMEA</ef-item>\n  <ef-item value=\"Spain\">Spain</ef-item>\n</div>\n\n<script>\n  var menu = document.getElementById('menu');\n\n  // Get highlighted item\n  var getHighlighted = function () {\n    return menu.querySelector('ef-item[highlighted]');\n  };\n\n  // Get all items that can be highlighted\n  var getHighlightableEls = function () {\n    return Array.prototype.slice.call(menu.querySelectorAll('ef-item'))\n      .filter(function (item) {\n        return item.highlightable;\n      });\n  };\n\n  menu.addEventListener('keydown', function(event) {\n    // Implement keyboard navigation model\n  });\n\n  menu.addEventListener('mouseover', function (event) {\n    // Implement highlight model\n  });\n\n  menu.addEventListener('mouseout', function (event) {\n    // Implement remove highlight model\n  });\n\n  menu.addEventListener('tap', function (event) {\n    // Implement selection model\n  });\n</script>","tagName":"pre"},{"text":"Slots","tagName":"h2"},{"text":"API Reference","tagName":"h2"},{"text":"Attributes","tagName":"h3"},{"text":"Properties","tagName":"h3"}]},{"title":"List","filename":"elements/list.html","contents":[{"text":"<ef-list></ef-list>","tagName":"pre"},{"text":"var makeData = function() {\n  return Array(1000).fill(0).map(function(_, i) {\n    return {\n      type: i % 10 === 0 ? 'header' : 'item',\n      label: i % 10 === 0 ? i + '\\'s' : 'Item number ' + i,\n      value: i.toString(),\n      disabled: i % 10 === 7,\n      hidden: i % 10 === 9\n    };\n  });\n};\ndocument.querySelector('ef-list').data = makeData();","tagName":"pre"},{"text":"ef-list {\n  max-height: 200px;\n}","tagName":"pre"},{"text":"Renders a collection of data items and provides single and multiple selection modes.","tagName":"p"},{"text":"Setting array-based data","tagName":"h2"},{"text":"The easiest way to populate the list is to pass it an array of data items. Items must adhere to the DataItem interface.","tagName":"p"},{"text":"DataItem","tagName":"a"},{"text":"const el = document.querySelector('ef-list');\n\nconst data = [{\n  label: 'Item One',\n  value: '1'\n},\n{\n  label: 'Item Two',\n  value: '2'\n},\n{\n  label: 'Item Three',\n  value: '3'\n}];\n\nel.data = data;","tagName":"pre"},{"text":"Data Property Interface","tagName":"h2"},{"text":"The data property of the ef-list use the ListData interface for its data items which is described below.","tagName":"p"},{"text":"\nName\nType\nDescription\n","tagName":"tr"},{"text":"\nlabel\nstring\nItem's label\n","tagName":"tr"},{"text":"\nvalue\nstring\nValue of an item\n","tagName":"tr"},{"text":"\nselected\nboolean\nSelection state of the item\n","tagName":"tr"},{"text":"\nreadonly\nboolean\nSets the item to be readonly\n","tagName":"tr"},{"text":"\ndisabled\nboolean\nSets the item to be disabled\n","tagName":"tr"},{"text":"Using a composer to set and manage data","tagName":"h2"},{"text":"Setting data using a CollectionComposer can be useful when data needs to be managed externally.","tagName":"p"},{"text":"CollectionComposer","tagName":"a"},{"text":"import { CollectionComposer } from '@refinitiv-ui/utils';\n\nconst el = document.querySelector('ef-list');\n\nconst data = [{\n  label: 'Item One',\n  value: '1'\n},\n{\n  label: 'Item Two',\n  value: '2'\n},\n{\n  label: 'Item Three',\n  value: '3'\n}];\n\nconst composer = new CollectionComposer(data);\n\nel.data = composer;","tagName":"pre"},{"text":"Default renderer","tagName":"h2"},{"text":"By default, the list renders items using Item and therefore can be controlled by passing data of type ItemData.","tagName":"p"},{"text":"Item","tagName":"a"},{"text":"Extending the default renderer","tagName":"h2"},{"text":"Extending the default renderer is the easiest way to display custom content, while retaining all of the default selection states and item types.","tagName":"p"},{"text":"Renders are currently being upgraded and should only be used for testing purposes.","tagName":"p"},{"text":"import { List, DefaultRenderer } from '@refinitiv-ui/list';\n\nconst el = document.querySelector('ef-list');\nconst defaultRenderer = new DefaultRenderer(el);\n\nel.renderer = function (item, composer, element) {\n  const el = defaultRenderer.apply(this, arguments);\n  // do something extra\n  return el;\n};","tagName":"pre"},{"text":"Creating a fully custom renderer","tagName":"h2"},{"text":"Creating a fully custom renderer gives you ultimate flexibility, however, you will have to manually handle all of the different item states.","tagName":"p"},{"text":"const el = document.querySelector('ef-list');\n\nel.renderer = function (item, composer, element) {\n\n  // Reuse/create element for rendering content\n  const el = element || document.createElement('div');\n\n  // Setup the element if it hasn't already been created\n  if (!element) {\n    el.appendChild(document.createElement('div')).textContent = item.label;\n    el.appendChild(document.createElement('ef-sparkline')).data = getLineData(item.value);\n  }\n\n  // Get element states\n  // These values should be retrieved from the composer, as they can change.\n  const selected = composer.getItemPropertyValue(item, 'selected') === true;\n  const disabled = composer.getItemPropertyValue(item, 'disabled') === true;\n\n  // Update the element states\n  el.selected = selected;\n  el.disabled = disabled;\n\n  return el;\n\n};","tagName":"pre"},{"text":"API Reference","tagName":"h2"},{"text":"Attributes","tagName":"h3"},{"text":"Properties","tagName":"h3"},{"text":"Methods","tagName":"h3"},{"text":"Events","tagName":"h3"}]},{"title":"Overlay Menu","filename":"elements/overlay-menu.html","contents":[{"text":"<section>\n  <ef-button cta id=\"button\">Choose Item</ef-button>\n</section>\n<ef-overlay-menu id=\"menu\" opened>\n  <ef-item type=\"header\">Regions</ef-item>\n  <ef-item for=\"emea\">EMEA</ef-item>\n  <ef-item for=\"n-america\">N. America</ef-item>\n  <ef-item for=\"apac\">APAC</ef-item>\n  <ef-item for=\"latin-america\">Latin America</ef-item>\n  <ef-item type=\"header\">Favorites</ef-item>\n  <ef-item icon=\"flame\">Thailand</ef-item>\n  <ef-item type=\"divider\"></ef-item>\n  <ef-item icon=\"dislike-empty\" disabled>Unspecified</ef-item>\n</ef-overlay-menu>\n<ef-overlay-menu id=\"emea\">\n  <ef-item>Spain</ef-item>\n  <ef-item>France</ef-item>\n  <ef-item for=\"united-kingdom\">United Kingdom</ef-item>\n</ef-overlay-menu>\n<ef-overlay-menu id=\"united-kingdom\">\n  <ef-item>Cardiff</ef-item>\n  <ef-item>Edinburgh</ef-item>\n  <ef-item>London</ef-item>\n</ef-overlay-menu>\n<ef-overlay-menu id=\"n-america\">\n  <ef-item>Canada</ef-item>\n</ef-overlay-menu>\n<ef-overlay-menu id=\"apac\">\n  <ef-item>China</ef-item>\n  <ef-item>Australia</ef-item>\n</ef-overlay-menu>\n<ef-overlay-menu id=\"latin-america\">\n  <ef-item>Mexico</ef-item>\n  <ef-item>Brazil</ef-item>\n</ef-overlay-menu>","tagName":"pre"},{"text":"var button = document.getElementById('button');\nvar menu = document.getElementById('menu');\nmenu.positionTarget = button;\n\nbutton.addEventListener('click', function() {\n  if (!menu.fullyOpened && !menu.transitioning) {\n    menu.opened = true;\n  }\n});","tagName":"pre"},{"text":"section {\n  height: 235px;\n  padding: 0 3px;\n}","tagName":"pre"},{"text":"ef-overlay-menu is an overlay window that supports single-level and multi-level menus. It can be positioned by attaching to other elements, or its vertical and horizontal offset can be adjusted, if needed.","tagName":"p"},{"text":"Basic Menu","tagName":"h2"},{"text":"Create ef-overlay-menu with ef-item elements as menu items. Listen for the item-trigger event to identify a clicked item.","tagName":"p"},{"text":"As the overlay menu is designed to support several use cases (multi-selection, toggle, etc.), the menu will not close when an item is clicked. To open or close the menu, simply set the opened property to true or false, respectively.","tagName":"p"},{"text":"<section>\n  <ef-button cta id=\"button\">Choose Item</ef-button>\n</section>\n<ef-overlay-menu id=\"menu\">\n  <ef-item type=\"header\">EMEA</ef-item>\n  <ef-item value=\"Spain\">Spain</ef-item>\n  <ef-item value=\"France\" disabled>France</ef-item>\n  <ef-item value=\"United Kingdom\">United Kingdom</ef-item>\n</ef-overlay-menu>","tagName":"pre"},{"text":"var button = document.getElementById('button');\nvar menu = document.getElementById('menu');\nvar menuController = menu.parentElement;\nmenu.positionTarget = button;\n\nbutton.addEventListener('click', function() {\n  if (!menu.fullyOpened && !menu.transitioning) {\n    menu.opened = true;\n  }\n});\n\nmenuController.addEventListener('item-trigger', function(e) {\n  var value = e.detail.value;\n  console.log('You have clicked on: ' + value);\n  button.innerHTML = value;\n  menu.opened = false;\n});","tagName":"pre"},{"text":"section {\n  height: 135px;\n  padding: 0 3px;\n}","tagName":"pre"},{"text":"<ef-button cta id=\"button\">Choose Item</ef-button>\n<ef-overlay-menu id=\"menu\">\n  <ef-item type=\"header\">EMEA</ef-item>\n  <ef-item value=\"Spain\">Spain</ef-item>\n  <ef-item value=\"France\" disabled>France</ef-item>\n  <ef-item value=\"United Kingdom\">United Kingdom</ef-item>\n</ef-overlay-menu>","tagName":"pre"},{"text":"var button = document.getElementById('button');\nvar menu = document.getElementById('menu');\nvar menuController = menu.parentElement;\nmenu.positionTarget = button;\n\nbutton.addEventListener('click', function() {\n  if (!menu.fullyOpened && !menu.transitioning) {\n    menu.opened = true;\n  }\n});\n\nmenuController.addEventListener('item-trigger', function(e) {\n  var value = e.detail.value;\n  console.log('You have clicked on: ' + value);\n  button.innerHTML = value;\n  menu.opened = false;\n});","tagName":"pre"},{"text":"See Item API document for more detail about ef-item properties","tagName":"p"},{"text":"Nested menus","tagName":"h3"},{"text":"Menu and sub-menus are bound together using the for and id attributes of ef-item and the sub-menu. The for attribute must be equal to the id attribute of the related sub-menu in order to bind the menu and submenu together.","tagName":"p"},{"text":"<section>\n  <ef-button cta id=\"button\">Nested menus</ef-button>\n</section>\n<ef-overlay-menu id=\"menu\">\n  <ef-item type=\"header\">Regions</ef-item>\n  <ef-item for=\"emea\">EMEA</ef-item>\n  <ef-item for=\"apac\">APAC</ef-item>\n</ef-overlay-menu>\n<ef-overlay-menu id=\"emea\">\n  <ef-item>Spain</ef-item>\n  <ef-item disabled>France</ef-item>\n  <ef-item for=\"united-kingdom\">United Kingdom</ef-item>\n</ef-overlay-menu>\n<ef-overlay-menu id=\"united-kingdom\">\n  <ef-item>Cardiff</ef-item>\n  <ef-item>Edinburgh</ef-item>\n  <ef-item for=\"london\">London</ef-item>\n</ef-overlay-menu>\n<ef-overlay-menu id=\"london\">\n  <ef-item>London Bridge</ef-item>\n  <ef-item>Westminster Bridge</ef-item>\n</ef-overlay-menu>\n<ef-overlay-menu id=\"apac\">\n  <ef-item>China</ef-item>\n  <ef-item>Australia</ef-item>\n</ef-overlay-menu>","tagName":"pre"},{"text":"var button = document.getElementById('button');\nvar menu = document.getElementById('menu');\nmenu.positionTarget = button;\n\nbutton.addEventListener('click', function() {\n  if (!menu.fullyOpened && !menu.transitioning) {\n    menu.opened = true;\n  }\n});","tagName":"pre"},{"text":"section {\n  height: 225px;\n  padding: 0 3px;\n}","tagName":"pre"},{"text":"<ef-overlay-menu id=\"menu\">\n  <ef-item type=\"header\">Regions</ef-item>\n  <ef-item for=\"emea\">EMEA</ef-item>\n  <ef-item for=\"apac\">APAC</ef-item>\n</ef-overlay-menu>\n<ef-overlay-menu id=\"emea\">\n  <ef-item>Spain</ef-item>\n  <ef-item disabled>France</ef-item>\n  <ef-item for=\"united-kingdom\">United Kingdom</ef-item>\n</ef-overlay-menu>\n<ef-overlay-menu id=\"united-kingdom\">\n  <ef-item>Cardiff</ef-item>\n  <ef-item>Edinburgh</ef-item>\n  <ef-item for=\"london\">London</ef-item>\n</ef-overlay-menu>\n<ef-overlay-menu id=\"london\">\n  <ef-item>London Bridge</ef-item>\n  <ef-item>Westminster Bridge</ef-item>\n</ef-overlay-menu>\n<ef-overlay-menu id=\"apac\">\n  <ef-item>China</ef-item>\n  <ef-item>Australia</ef-item>\n</ef-overlay-menu>","tagName":"pre"},{"text":"Compact menu","tagName":"h3"},{"text":"If there is not enough space to fit sub-menus, add the compact attribute. In this mode, sub-menus will be opened on top of the parent menu.","tagName":"p"},{"text":"<section>\n  <ef-button cta id=\"button\">Compact menu</ef-button>\n</section>\n<ef-overlay-menu id=\"menu\" compact>\n  <ef-item type=\"header\">Regions</ef-item>\n  <ef-item for=\"emea\">EMEA</ef-item>\n  <ef-item for=\"apac\">APAC</ef-item>\n</ef-overlay-menu>\n<ef-overlay-menu id=\"emea\" compact>\n  <ef-item>Spain</ef-item>\n  <ef-item disabled>France</ef-item>\n  <ef-item for=\"united-kingdom\">United Kingdom</ef-item>\n</ef-overlay-menu>\n<ef-overlay-menu id=\"united-kingdom\" compact>\n  <ef-item>Cardiff</ef-item>\n  <ef-item>Edinburgh</ef-item>\n  <ef-item for=\"london\">London</ef-item>\n</ef-overlay-menu>\n<ef-overlay-menu id=\"london\" compact>\n  <ef-item>London Bridge</ef-item>\n  <ef-item>Westminster Bridge</ef-item>\n</ef-overlay-menu>\n<ef-overlay-menu id=\"apac\" compact>\n  <ef-item>China</ef-item>\n  <ef-item>Australia</ef-item>\n</ef-overlay-menu>","tagName":"pre"},{"text":"var button = document.getElementById('button');\nvar menu = document.getElementById('menu');\nmenu.positionTarget = button;\n\nbutton.addEventListener('click', function() {\n  if (!menu.fullyOpened && !menu.transitioning) {\n    menu.opened = true;\n  }\n});","tagName":"pre"},{"text":"section {\n  height: 135px;\n  padding: 0 3px;\n}","tagName":"pre"},{"text":"<ef-overlay-menu compact>\n  ...\n</ef-overlay-menu>","tagName":"pre"},{"text":"Managing position and user interaction","tagName":"h2"},{"text":"ef-overlay-menu inherits properties from ef-overlay and thus supports the same positioning strategies.","tagName":"p"},{"text":"The developer may specify with-backdrop together with no-cancel-on-outside-click so users must interact with the menu before they can return to the application.","tagName":"p"},{"text":"<section>\n  <ef-button cta id=\"button\">Choose Item</ef-button>\n</section>\n<ef-overlay-menu id=\"menu\" with-backdrop no-cancel-on-outside-click>\n  <ef-item type=\"header\">EMEA</ef-item>\n  <ef-item value=\"Spain\">Spain</ef-item>\n  <ef-item value=\"France\" disabled>France</ef-item>\n  <ef-item value=\"United Kingdom\">United Kingdom</ef-item>\n</ef-overlay-menu>","tagName":"pre"},{"text":"var button = document.getElementById('button');\nvar menu = document.getElementById('menu');\nvar menuController = menu.parentElement;\n\nbutton.addEventListener('click', function() {\n  if (!menu.fullyOpened && !menu.transitioning) {\n    // position at the top right corner of the button\n    menu.positionTarget = button;\n    menu.position = ['right-start'];\n    menu.opened = true;\n  }\n});\n\nmenuController.addEventListener('item-trigger', function(e) {\n  menu.opened = false;\n});","tagName":"pre"},{"text":"section {\n  height: 115px;\n  padding: 0 3px;\n}","tagName":"pre"},{"text":"<ef-button cta id=\"button\">Choose Item</ef-button>\n<ef-overlay-menu id=\"menu\" with-backdrop no-cancel-on-outside-click>...</ef-overlay-menu>","tagName":"pre"},{"text":"var button = document.getElementById('button');\nvar menu = document.getElementById('menu');\n\nbutton.addEventListener('click', function() {\n  if (!menu.fullyOpened && !menu.transitioning) {\n    // position at the top right corner of the button\n    menu.positionTarget = button;\n    menu.position = ['right-start'];\n    menu.opened = true;\n  }\n});","tagName":"pre"},{"text":"Loading from data","tagName":"h2"},{"text":"ef-overlay-menu can be populated using the data property. data fields have the same names as properties in ef-item. Use the items collection to create sub-menus.","tagName":"p"},{"text":"Alternatively, you can set data using a CollectionComposer, which is useful when you need a rich API to manage data externally.","tagName":"p"},{"text":"CollectionComposer","tagName":"a"},{"text":"<section>\n  <ef-button cta id=\"button\">Choose Item</ef-button>\n</section>\n<ef-overlay-menu id=\"menu\"></ef-overlay-menu>","tagName":"pre"},{"text":"var button = document.getElementById('button');\nvar menu = document.getElementById('menu');\n\nmenu.data = [{\n  type: 'header',\n  label: 'Regions'\n}, {\n  icon: 'flame',\n  label: 'EMEA',\n  items: [{\n    label: 'Spain'\n  }, {\n    label: 'France',\n    disabled: true\n  }, {\n    label: 'Italy'\n  }, {\n    label: 'United Kingdom'\n  }]\n}, {\n  type: 'divider'\n}, {\n  label: 'APAC'\n}];\n\nmenu.positionTarget = button;\n\nbutton.addEventListener('click', function() {\n  if (!menu.fullyOpened && !menu.transitioning) {\n    menu.opened = true;\n  }\n});","tagName":"pre"},{"text":"section {\n  height: 165px;\n  padding: 0 3px;\n}","tagName":"pre"},{"text":"<ef-overlay-menu id=\"menu\"></ef-overlay-menu>","tagName":"pre"},{"text":"var menu = document.getElementById('menu');\n\nmenu.data = [{\n  type: 'header',\n  label: 'Regions'\n}, {\n  icon: 'flame',\n  label: 'EMEA',\n  items: [{\n    label: 'Spain'\n  }, {\n    label: 'France',\n    disabled: true\n  }, {\n    label: 'Italy'\n  }, {\n    label: 'United Kingdom'\n  }]\n}, {\n  type: 'divider'\n}, {\n  label: 'APAC'\n}];","tagName":"pre"},{"text":"Data property interface","tagName":"h2"},{"text":"The data property of the ef-overlay-menu use the OverlayMenuData interface for its data items which is described below.","tagName":"p"},{"text":"\nName\nType\nDescription\n","tagName":"tr"},{"text":"\nlabel\nstring\nItem's label\n","tagName":"tr"},{"text":"\nvalue\nstring\nValue of an item\n","tagName":"tr"},{"text":"\ntype\nstring\nType of item. Value can be text, header, divider\n","tagName":"tr"},{"text":"\nicon\nstring\nSet the icon name from the coral-icon list\n","tagName":"tr"},{"text":"\nitems\narray\nChild items collection\n","tagName":"tr"},{"text":"\nreadonly\nboolean\nSets the item to be readonly\n","tagName":"tr"},{"text":"\ndisabled\nboolean\nSets the item to be disabled\n","tagName":"tr"},{"text":"Managing selection","tagName":"h2"},{"text":"ef-overlay-menu does not manage the selected state. Instead, the developer decides the selection model by changing the selected attribute on menu items. Furthermore, the developer may use the values getter and setter to manipulate selected items across a menu and all of its sub-menus.","tagName":"p"},{"text":"<section>\n  <ef-button cta id=\"button\">Choose Item</ef-button>\n</section>\n<ef-overlay-menu id=\"menu\">\n  <ef-item type=\"header\">Regions</ef-item>\n  <ef-item value=\"emea\" for=\"emea\" selected>EMEA</ef-item>\n  <ef-item value=\"apac\" for=\"apac\">APAC</ef-item>\n</ef-overlay-menu>\n<ef-overlay-menu id=\"emea\">\n  <ef-item value=\"spain\">Spain</ef-item>\n  <ef-item value=\"france\" disabled>France</ef-item>\n  <ef-item value=\"united-kingdom\" for=\"united-kingdom\" selected>United Kingdom</ef-item>\n</ef-overlay-menu>\n<ef-overlay-menu id=\"united-kingdom\">\n  <ef-item value=\"cardiff\">Cardiff</ef-item>\n  <ef-item value=\"edinburgh\">Edinburgh</ef-item>\n  <ef-item value=\"london\" selected>London</ef-item>\n</ef-overlay-menu>\n<ef-overlay-menu id=\"apac\">\n  <ef-item value=\"china\">China</ef-item>\n  <ef-item value=\"australia\">Australia</ef-item>\n</ef-overlay-menu>","tagName":"pre"},{"text":"var button = document.getElementById('button');\nvar menu = document.getElementById('menu');\nvar menuController = menu.parentElement;\nmenu.positionTarget = button;\n\nvar getItemDescendants = function(item) {\n  var descendants = [];\n  while (item) {\n    descendants.unshift(item);\n    item = item.parentElement && item.parentElement.id ?\n      menuController.querySelector('ef-item[for=' + item.parentElement.id + ']') :\n      null;\n  }\n\n  return descendants;\n};\n\nmenuController.addEventListener('item-trigger', function(e) {\n  var selectedPath = getItemDescendants(e.target);\n  menu.values = selectedPath.map(function(item) {\n    return item.value;\n  });\n});\n\nbutton.addEventListener('click', function() {\n  if (!menu.fullyOpened && !menu.transitioning) {\n    menu.opened = true;\n  }\n});","tagName":"pre"},{"text":"section {\n  height: 200px;\n  padding: 0 3px;\n}","tagName":"pre"},{"text":"var menuController = menu.parentElement;\n\nvar getItemDescendants = function (item) {\n  var descendants = [];\n  while (item) {\n    descendants.unshift(item);\n    item = item.parentElement && item.parentElement.id\n      ? menuController.querySelector('ef-item[for=' + item.parentElement.id + ']')\n      : null;\n    }\n\n  return descendants;\n};\n\nmenuController.addEventListener('item-trigger', function(e) {\n  var selectedPath = getItemDescendants(e.target);\n  menu.values = selectedPath.map(function (item) {\n    return item.value;\n  });\n});","tagName":"pre"},{"text":"Overlay Transitions","tagName":"h2"},{"text":"ef-overlay-menu supports a number of built-in transitions. To set the transition, use the transition-style attribute.","tagName":"p"},{"text":"<section>\n  <ef-button cta id=\"button\">With Transitions</ef-button>\n</section>\n<ef-overlay-menu id=\"menu\" transition-style=\"slide\">\n  <ef-item type=\"header\">Regions</ef-item>\n  <ef-item for=\"emea\">EMEA</ef-item>\n  <ef-item for=\"apac\">APAC</ef-item>\n</ef-overlay-menu>\n<ef-overlay-menu id=\"emea\" transition-style=\"slide\">\n  <ef-item>Spain</ef-item>\n  <ef-item disabled>France</ef-item>\n  <ef-item for=\"united-kingdom\">United Kingdom</ef-item>\n</ef-overlay-menu>\n<ef-overlay-menu id=\"united-kingdom\" transition-style=\"slide\">\n  <ef-item>Cardiff</ef-item>\n  <ef-item>Edinburgh</ef-item>\n  <ef-item>London</ef-item>\n</ef-overlay-menu>\n<ef-overlay-menu id=\"apac\" transition-style=\"slide\">\n  <ef-item>China</ef-item>\n  <ef-item>Australia</ef-item>\n</ef-overlay-menu>","tagName":"pre"},{"text":"var button = document.getElementById('button');\nvar menu = document.getElementById('menu');\nmenu.positionTarget = button;\n\nbutton.addEventListener('click', function() {\n  if (!menu.fullyOpened && !menu.transitioning) {\n    menu.opened = true;\n  }\n});","tagName":"pre"},{"text":"section {\n  height: 200px;\n  padding: 0 3px;\n}","tagName":"pre"},{"text":"<ef-overlay-menu id=\"menu\" transition-style=\"slide\">\n  <ef-item type=\"header\">Regions</ef-item>\n  <ef-item for=\"emea\">EMEA</ef-item>\n  <ef-item for=\"apac\">APAC</ef-item>\n</ef-overlay-menu>\n<ef-overlay-menu id=\"emea\" transition-style=\"slide\">\n  <ef-item>Spain</ef-item>\n  <ef-item disabled>France</ef-item>\n  <ef-item for=\"united-kingdom\">United Kingdom</ef-item>\n</ef-overlay-menu>\n<ef-overlay-menu id=\"united-kingdom\" transition-style=\"slide\">\n  <ef-item>Cardiff</ef-item>\n  <ef-item>Edinburgh</ef-item>\n  <ef-item>London</ef-item>\n</ef-overlay-menu>\n<ef-overlay-menu id=\"apac\" transition-style=\"slide\">\n  <ef-item>China</ef-item>\n  <ef-item>Australia</ef-item>\n</ef-overlay-menu>","tagName":"pre"},{"text":"Position against target","tagName":"h2"},{"text":"Position may contain a single word or a comma separated list to set the priority. Position is not applied if attachTarget is not HTML Element. For instance:","tagName":"p"},{"text":"menu.position = ['bottom-end', 'bottom-start', 'right-end', 'center-middle'];","tagName":"pre"},{"text":"The first part defines position. The optional second part defines align. For instance: bottom, top-start, right-middle.","tagName":"p"},{"text":"\nPosition\nDescription\n","tagName":"tr"},{"text":"\ntop\nAbove target (same as top-start)\n","tagName":"tr"},{"text":"\nright\nAfter target (same as right-middle)\n","tagName":"tr"},{"text":"\nbottom\nBelow target (same as bottom-start)\n","tagName":"tr"},{"text":"\nleft\nBefore target (same as left-middle)\n","tagName":"tr"},{"text":"\ncenter\nAt the center of target (same as center-middle)\n","tagName":"tr"},{"text":"\nAlign\nDescription\n","tagName":"tr"},{"text":"\nstart\nTarget is aligned at the start of popup\n","tagName":"tr"},{"text":"\nmiddle\nTarget is aligned at the middle of popup\n","tagName":"tr"},{"text":"\nend\nTarget is aligned at the end of popup\n","tagName":"tr"},{"text":"API Reference","tagName":"h2"},{"text":"Attributes","tagName":"h3"},{"text":"Properties","tagName":"h3"},{"text":"Events","tagName":"h3"}]},{"title":"Tree","filename":"elements/tree.html","contents":[{"text":"<ef-tree></ef-tree>","tagName":"pre"},{"text":"const tree = document.querySelector('ef-tree');\ntree.data = [{\n    label: 'Group 1',\n    expanded: true,\n    items: [{\n        label: 'Item 1.1',\n        value: '1.1'\n      },\n      {\n        label: 'Item 1.2',\n        value: '1.2'\n      },\n      {\n        label: 'Item 1.3',\n        value: '1.3',\n        selected: true\n      }\n    ]\n  },\n  {\n    label: 'Group 2',\n    items: [{\n        label: 'Item 2.1',\n        value: '2.1'\n      },\n      {\n        label: 'Item 2.2',\n        value: '2.2'\n      },\n      {\n        label: 'Item 2.3',\n        value: '2.3'\n      }\n    ]\n  }\n]","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"Displays a nested data structure as a tree menu. Useful for navigating grouped/categorized data.","tagName":"p"},{"text":"Basic usage","tagName":"h2"},{"text":"The data of ef-tree can be set by passing an array of objects to the element's data property.","tagName":"p"},{"text":"<ef-tree></ef-tree>","tagName":"pre"},{"text":"const tree = document.querySelector('ef-tree');\ntree.data = [{\n  label: 'Group 1',\n  expanded: true,\n  items: [{\n    label: 'Item 1.1',\n    value: '1.1'\n  },\n  {\n    label: 'Item 1.2',\n    value: '1.2'\n  },\n  {\n    label: 'Item 1.3',\n    value: '1.3',\n    selected: true\n  }]\n},\n{\n  label: 'Group 2',\n  items: [{\n    label: 'Item 2.1',\n    value: '2.1'\n  },\n  {\n    label: 'Item 2.2',\n    value: '2.2'\n  },\n  {\n    label: 'Item 2.3',\n    value: '2.3'\n  }]\n}]","tagName":"pre"},{"text":"Tree item with icon","tagName":"h2"},{"text":"Icon can be set to show on each node in tree by using icon key in item object. You can pass icon name, url of icon svg file or empty string.","tagName":"p"},{"text":"<ef-tree></ef-tree>","tagName":"pre"},{"text":"const tree = document.querySelector('ef-tree');\ntree.data = [{\n  label: 'Request 5 Rank 1: custom leage table',\n  icon: 'list',\n  selected: true,\n  expanded: true,\n  items: [{\n    label: 'Req. 5 Rnk. 1 Dr.Req. 1: Goldman Sachs & Co',\n    value: '1.1',\n    icon: 'https://cdn.refinitiv.com/public/libs/elf/assets/elf-theme-halo/resources/icons/grid.svg'\n  },\n  {\n    label: 'Req. 5 Rnk. 1 Dr.Req. 2: Allen & Co Inc',\n    value: '1.2',\n    icon: 'https://cdn.refinitiv.com/public/libs/elf/assets/elf-theme-halo/resources/icons/grid.svg'\n  }]\n},\n{\n  label: 'Session Details',\n  icon: 'sendfeed',\n}]","tagName":"pre"},{"text":"<div class=\"container\">\n  <ef-tree id=\"basic\"></ef-tree>\n  <ef-tree multiple id=\"multiple\"></ef-tree>\n</div>","tagName":"pre"},{"text":"var basicTree = document.getElementById('basic');\nvar multipleTree = document.getElementById('multiple');\nbasicTree.data = [{\n    label: 'Request 5 Rank 1: custom leage table',\n    icon: 'list',\n    selected: true,\n    expanded: true,\n    items: [{\n        label: 'Req. 5 Rnk. 1 Dr.Req. 1: Goldman Sachs & Co',\n        value: '1.1',\n        icon: 'https://cdn.refinitiv.com/public/libs/elf/assets/elf-theme-halo/resources/icons/grid.svg'\n      },\n      {\n        label: 'Req. 5 Rnk. 1 Dr.Req. 2: Allen & Co Inc',\n        value: '1.2',\n        icon: 'https://cdn.refinitiv.com/public/libs/elf/assets/elf-theme-halo/resources/icons/grid.svg'\n      }\n    ]\n  },\n  {\n    label: 'Session Details',\n    icon: 'sendfeed',\n  }\n]\nmultipleTree.data = [{\n    label: 'Request 5 Rank 1: custom leage table',\n    icon: 'list',\n    selected: true,\n    expanded: true,\n    items: [{\n        label: 'Req. 5 Rnk. 1 Dr.Req. 1: Goldman Sachs & Co',\n        value: '1.1',\n        icon: 'https://cdn.refinitiv.com/public/libs/elf/assets/elf-theme-halo/resources/icons/grid.svg'\n      },\n      {\n        label: 'Req. 5 Rnk. 1 Dr.Req. 2: Allen & Co Inc',\n        value: '1.2',\n        icon: 'https://cdn.refinitiv.com/public/libs/elf/assets/elf-theme-halo/resources/icons/grid.svg'\n      }\n    ]\n  },\n  {\n    label: 'Session Details',\n    icon: 'sendfeed',\n  }\n]","tagName":"pre"},{"text":".container {\n  display: flex;\n}\n\nef-tree {\n  margin-right: 20px;\n}","tagName":"pre"},{"text":"Data property interface","tagName":"h2"},{"text":"The data property that passes through the ef-tree uses the TreeData interface for its data items which is described below.","tagName":"p"},{"text":"\nName\nType\nDescription\n","tagName":"tr"},{"text":"\nlabel\nstring\nItem's label\n","tagName":"tr"},{"text":"\nvalue\nstring\nValue of an item\n","tagName":"tr"},{"text":"\nicon\nstring\nIcon of an item\n","tagName":"tr"},{"text":"\nselected\nboolean\nSelection state of the item\n","tagName":"tr"},{"text":"\nexpanded\nboolean\nExpanded state of child items\n","tagName":"tr"},{"text":"\nitems\narray\nChild items collection\n","tagName":"tr"},{"text":"\nreadonly\nboolean\nSets the item to be readonly\n","tagName":"tr"},{"text":"\ndisabled\nboolean\nSets the item to be disabled\n","tagName":"tr"},{"text":"Multiple selection","tagName":"h2"},{"text":"Tree uses single selection mode by default. Use the multiple attribute if you need multiple selections.","tagName":"p"},{"text":"<ef-tree multiple></ef-tree>","tagName":"pre"},{"text":"<ef-tree multiple></ef-tree>","tagName":"pre"},{"text":"const tree = document.querySelector('ef-tree');\ntree.data = [{\n    label: 'Group 1',\n    items: [{\n        label: 'Item 1.1',\n        value: '1.1'\n      },\n      {\n        label: 'Item 1.2',\n        value: '1.2'\n      },\n      {\n        label: 'Item 1.3',\n        value: '1.3',\n        selected: true\n      }\n    ]\n  },\n  {\n    label: 'Group 2',\n    items: [{\n        label: 'Item 2.1',\n        value: '2.1'\n      },\n      {\n        label: 'Item 2.2',\n        value: '2.2'\n      },\n      {\n        label: 'Item 2.3',\n        value: '2.3'\n      }\n    ]\n  }\n]","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"Turn off parent/child relationship","tagName":"h2"},{"text":"For multiple selection mode, Tree manages the relationship between parent and child items. Use the no-relation attribute to turn this feature off.","tagName":"p"},{"text":"<ef-tree multiple no-relation></ef-tree>","tagName":"pre"},{"text":"<ef-tree multiple no-relation></ef-tree>","tagName":"pre"},{"text":"const tree = document.querySelector('ef-tree');\ntree.data = [{\n    label: 'Group 1',\n    items: [{\n        label: 'Item 1.1',\n        value: '1.1'\n      },\n      {\n        label: 'Item 1.2',\n        value: '1.2'\n      },\n      {\n        label: 'Item 1.3',\n        value: '1.3',\n        selected: true\n      }\n    ]\n  },\n  {\n    label: 'Group 2',\n    items: [{\n        label: 'Item 2.1',\n        value: '2.1'\n      },\n      {\n        label: 'Item 2.2',\n        value: '2.2'\n      },\n      {\n        label: 'Item 2.3',\n        value: '2.3'\n      }\n    ]\n  }\n]","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"Tree value(s) and events","tagName":"h2"},{"text":"Use the value-changed event to know when the user has changed any selection in Tree. Tree provides value and values properties for accessing selected item(s).","tagName":"p"},{"text":"Typically, you can just use the values property, as it will work for both multiple and single selection mode. With single selection mode, value represents a single value, whereas in multiple selection mode, it will store the first value of the values array.","tagName":"p"},{"text":"const tree = document.querySelector('ef-tree');\n\ntree.addEventListener('value-changed', (e) => {\n  console.log(e.detail); // value that users changed\n  console.log(tree.values); // access selected items\n});","tagName":"pre"},{"text":"API Reference","tagName":"h2"},{"text":"Attributes","tagName":"h3"},{"text":"Properties","tagName":"h3"},{"text":"Methods","tagName":"h3"},{"text":"Events","tagName":"h3"}]},{"title":"Card","filename":"elements/card.html","contents":[{"text":"<ef-card style=\"margin: 10px\" header=\"Vlad the vaccinator: Dracula&apos;s castle lures visitors with COVID-19 jabs\" footer=\"Source: Reuters\">\n  <img style=\"width: 100%; height:auto;\" src=\"https://cloudfront-us-east-2.images.arcpublishing.com/reuters/FCGFMWQNF5MAZHNHQFVP5LUV3M.jpg\">\n  <div style=\"padding: 10px 0\">Visitors to Dracula&apos;s castle are more likely to find puncture marks in their arms than their necks this month, after medics set up a COVID-19 vaccination centre at the Transylvanian attraction.</div>\n</ef-card>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"ef-card is a versatile container that can display content inside the card frame.","tagName":"p"},{"text":"Basic usage","tagName":"h3"},{"text":"You can wrap any content with ef-card.","tagName":"p"},{"text":"Header and footer can be set by using slotted content or by using header and footer attributes.","tagName":"p"},{"text":"<ef-card style=\"margin: 10px;\" header=\"NASA spacecraft starts trip back to Earth after collecting asteroid samples\" footer=\"Source: Reuters\">\n  <p>A NASA spacecraft, which scientists believe has collected samples from an asteroid, began its two-year journey back to Earth on Monday.</p>\n  <p>NASA OSIRIS-REx spacecraft is attempting to complete a mission to visit Bennu, a skyscraper-sized asteroid some 200 million miles (320 million km) from Earth, survey the surface, collect samples and deliver them back to Earth.</p>\n</ef-card>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"<ef-card>\n    <span slot=\"header\">NASA spacecraft starts trip back to Earth after collecting asteroid samples</span>\n    <span slot=\"footer\">Source: Reuters</span>\n    <p>A NASA spacecraft, which scientists believe has collected samples from an asteroid, began its two-year journey back to Earth on Monday.</p>\n    <p>NASA's OSIRIS-REx spacecraft is attempting to complete a mission to visit Bennu, a skyscraper-sized asteroid some 200 million miles (320 million km) from Earth, survey the surface, collect samples and deliver them back to Earth.</p>\n</ef-card>","tagName":"pre"},{"text":"<ef-card\n    header=\"NASA spacecraft starts trip back to Earth after collecting asteroid samples\"\n    footer=\"Source: Reuters\" >\n        <p>A NASA spacecraft, which scientists believe has collected samples from an asteroid, began its two-year journey back to Earth on Monday.</p>\n        <p>NASA's OSIRIS-REx spacecraft is attempting to complete a mission to visit Bennu, a skyscraper-sized asteroid some 200 million miles (320 million km) from Earth, survey the surface, collect samples and deliver them back to Earth.</p>\n</ef-card>","tagName":"pre"},{"text":"Card Menu","tagName":"h3"},{"text":"ef-card can show a menu by passing the data through the property using the config property. The schema of data is the same as (Overlay Menu)","tagName":"p"},{"text":"Overlay Menu","tagName":"a"},{"text":"Use the item-trigger event to detect when users click on any menu item.","tagName":"p"},{"text":"<ef-card style=\"margin: 10px;\" id=\"card\" header=\"Chart\">\n  <ef-interactive-chart id=\"chart\"></ef-interactive-chart>\n</ef-card>","tagName":"pre"},{"text":"var card = document.getElementById('card');\nvar chart = document.getElementById('chart');\ncard.config = {\n  menu: {\n    data: [\n      { label: 'Price', value: 'price' },\n      { label: 'Percentage', value: 'percent' }\n    ]\n  }\n};\n\nchart.config = {\n  options: {\n    priceScale: {\n      mode: 1\n    }\n  },\n  series: [{\n      symbol: 'Tesla',\n      type: \"area\",\n      data: [\n        { time: \"2021-12-22\", value: 32.51 },\n        { time: \"2021-12-23\", value: 31.11 },\n        { time: \"2021-12-24\", value: 27.02 },\n        { time: \"2021-12-25\", value: 27.32 },\n        { time: \"2021-12-26\", value: 25.17 },\n        { time: \"2021-12-27\", value: 28.89 },\n        { time: \"2021-12-28\", value: 25.46 },\n        { time: \"2021-12-29\", value: 23.92 },\n        { time: \"2021-12-30\", value: 22.68 },\n        { time: \"2021-12-31\", value: 22.67 }\n      ]\n    },\n    {\n      symbol: 'TSLA Futures',\n      type: \"line\",\n      data: [\n        { time: \"2021-12-22\", value: 22.51 },\n        { time: \"2021-12-23\", value: 11.11 },\n        { time: \"2021-12-24\", value: 37.02 },\n        { time: \"2021-12-25\", value: 17.32 },\n        { time: \"2021-12-26\", value: 5.17 },\n        { time: \"2021-12-27\", value: 18.89 },\n        { time: \"2021-12-28\", value: 15.46 },\n        { time: \"2021-12-29\", value: 13.92 },\n        { time: \"2021-12-30\", value: 32.68 },\n        { time: \"2021-12-31\", value: 12.67 }\n      ]\n    }\n  ]\n}\n\ncard.addEventListener('item-trigger', function(event) {\n  var value = event.detail.value;\n  var newConfig = JSON.parse(JSON.stringify(chart.config));\n  newConfig.options.priceScale.mode = value === 'percent' ? 2 : 1;\n  chart.config = newConfig;\n});","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"<ef-card id=\"card\" header=\"Chart\">\n    <ef-interactive-chart id=\"chart\"></ef-interactive-chart>\n</ef-card>","tagName":"pre"},{"text":"var card = document.getElementById('card');\nvar chart = document.getElementById('chart');\ncard.config = {\n    menu: {\n        data: [\n            { label: 'Price', value: 'price' },\n            { label: 'Percentage',value: 'percent' }\n        ]\n    }\n};\n\nchart.config =\n{\n...\n}\n\ncard.addEventListener('item-trigger', function (event) {\n    var value = event.detail.value;\n    var newConfig = JSON.parse(JSON.stringify(chart.config));\n    newConfig.options.priceScale.mode = value === 'percent' ? 2 : 1;\n    chart.config = newConfig;\n});\n","tagName":"pre"},{"text":"Slots","tagName":"h2"},{"text":"API Reference","tagName":"h2"},{"text":"Attributes","tagName":"h3"},{"text":"Properties","tagName":"h3"},{"text":"Events","tagName":"h3"}]},{"title":"Dialog","filename":"elements/dialog.html","contents":[{"text":"<ef-dialog id=\"d1\" header=\"System Permissions\" draggable opened>\n  <p>Grant geolocation permissions?</p>\n  <p>This will allow the application to see your real-time location at any point in time.</p>\n</ef-dialog>\n<div class=\"container\">\n  <ef-button onclick=\"document.querySelector(&apos;#d1&apos;).opened = true;\">Open Dialog</ef-button>\n</div>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":".container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  height: 300px;\n}","tagName":"pre"},{"text":"ef-dialog is a popup window designed to contain and display any HTML content. It provides modal and dragging functionality, and also allows custom footers and control buttons to be included.","tagName":"p"},{"text":"Basic usage","tagName":"h3"},{"text":"Dialog can easily be launched by adding the opened property. If you want the dialog to open by default, include the opened attribute when you embed ef-dialog.","tagName":"p"},{"text":"<ef-dialog id=\"dlg1\" header=\"System Permissions\">\n  <p>Grant geolocation permissions?</p>\n  <p>This will allow the application to see your real-time location at any point in time.</p>\n</ef-dialog>","tagName":"pre"},{"text":"var dlg = document.getElementById('dlg1');\nfunction showDialog(open) {\n  dlg.opened = open;\n}","tagName":"pre"},{"text":"The default behavior of ef-dialog is to display at the center of the viewport and to not be draggable. You can enable dragging by adding the draggable attribute or using the property setting.","tagName":"p"},{"text":"<ef-dialog id=\"d1\" header=\"System Permissions\">\n  <p>Grant geolocation permissions?</p>\n  <p>This will allow the application to see your real-time location at any point in time.</p>\n</ef-dialog>\n<div class=\"container\">\n  <ef-button onclick=\"openDialog(&apos;d1&apos;, true)\">Draggable</ef-button>\n  <ef-button onclick=\"openDialog(&apos;d1&apos;, false)\">Fixed</ef-button>\n</div>","tagName":"pre"},{"text":"function openDialog(id, dragMode) {\n  var dlg = document.getElementById(id);\n  dlg.draggable = dragMode;\n  dlg.opened = true;\n}","tagName":"pre"},{"text":".container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  height: 300px;\n}\n\nef-button {\n  margin: 0 5px;\n}","tagName":"pre"},{"text":"<ef-dialog id=\"dlg1\" header=\"System Permissions\" draggable>\n  <p>Grant geolocation permissions?</p>\n  <p>This will allow the application to see your real-time location at any point in time.</p>\n</ef-dialog>","tagName":"pre"},{"text":"Confirmed vs cancelled","tagName":"h3"},{"text":"You may want to detect if the user has closed the dialog by clicking the OK or Cancel button. You can listen to the opened-changed event and check the value of the confirmed property, which will be set to true if the user clicked the OK button to close the dialog.","tagName":"p"},{"text":"<ef-dialog id=\"d1\" header=\"System Permissions\" draggable opened>\n  <p>Grant geolocation permissions?</p>\n  <p>This will allow the application to see your real-time location at any point in time.</p>\n</ef-dialog>\n<div class=\"container\">\n  <ef-button onclick=\"document.getElementById(&apos;d1&apos;).opened = true;\">Open Dialog</ef-button>\n  <p id=\"close-result\"></p>\n  <p>\n  </p>\n</div>","tagName":"pre"},{"text":"var dlg = document.getElementById('d1');\ndlg.addEventListener('opened-changed', function(e) {\n  document.getElementById('close-result').innerHTML = dlg.confirmed ? 'User clicked OK' : 'User clicked Cancel';\n});","tagName":"pre"},{"text":".container {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  height: 300px;\n}","tagName":"pre"},{"text":"<ef-dialog id=\"d1\" header=\"System Permissions\">\n  <p>Grant geolocation permissions?</p>\n  <p>This will allow the application to see your real-time location at any point in time.</p>\n</ef-dialog>","tagName":"pre"},{"text":"var dlg = document.getElementById('d1');\ndlg.addEventListener('opened-changed', function (e) {\n  if (dlg.confirmed) {\n    // user clicked OK button\n  }\n  else {\n    // user clicked Cancel button\n  }\n});","tagName":"pre"},{"text":"Customize footer content","tagName":"h3"},{"text":"The dialog provides default OK and Cancel buttons. To replace those buttons with your own content, assign content to the footer slot.","tagName":"p"},{"text":"<ef-dialog id=\"d1\" header=\"System Permissions\">\n  <p>Grant geolocation permissions?</p>\n  <p>This will allow the application to see your real-time location at any point in time.</p>\n  <div slot=\"footer\" style=\"padding: 15px 25px;\">\n    <ef-button style=\"width:100%\" cta onclick=\"accept()\">Accept</ef-button>\n  </div>\n</ef-dialog>\n<div class=\"container\">\n  <ef-button onclick=\"document.getElementById(&apos;d1&apos;).opened = true;\">Custom Dialog</ef-button>\n</div>","tagName":"pre"},{"text":"function accept() {\n  document.getElementById('d1').opened = false;\n}","tagName":"pre"},{"text":".container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  height: 300px;\n}","tagName":"pre"},{"text":"<ef-dialog id=\"d1\" header=\"System Permissions\">\n  <p>Grant geolocation permissions?</p>\n  <p>This will allow the application to see your real-time location at any point in time.</p>\n  <div slot=\"footer\" style=\"padding: 15px 25px;\">\n      <ef-button style=\"width:100%\" cta onclick=\"accept()\">Accept</ef-button>\n  </div>\n</ef-dialog>","tagName":"pre"},{"text":"function accept () {\n  // user clicked accept button, close dialog.\n  document.getElementById('d1').opened = false;\n}","tagName":"pre"},{"text":"Customize close behaviors","tagName":"h3"},{"text":"By default, ef-dialog will only close when the user clicks the OK or Cancel button, or presses the ESC key. However, you can allow the dialog to close when the user clicks outside of the dialog, or prevent the dialog from closing when the ESC key is pressed.","tagName":"p"},{"text":"To close the dialog when the user clicks outside of the dialog, set the noCancelOnOutsideClick property to false.","tagName":"p"},{"text":"<ef-dialog id=\"d1\" header=\"System Permissions\">\n  <p>Grant geolocation permissions?</p>\n  <p>This will allow the application to see your real-time location at any point in time.</p>\n</ef-dialog>","tagName":"pre"},{"text":"document.getElementById('d1').noCancelOnOutsideClick = false;","tagName":"pre"},{"text":"To prevent the dialog from closing on ESC key press, add the no-cancel-on-esc-key attribute to ef-dialog.","tagName":"p"},{"text":"<ef-dialog id=\"d1\" header=\"System Permissions\" no-cancel-on-esc-key>\n  <p>Grant geolocation permissions?</p>\n  <p>This will allow the application to see your real-time location at any point in time.</p>\n</ef-dialog>","tagName":"pre"},{"text":"Slots","tagName":"h2"},{"text":"API Reference","tagName":"h2"},{"text":"Attributes","tagName":"h3"},{"text":"Properties","tagName":"h3"},{"text":"Methods","tagName":"h3"},{"text":"Events","tagName":"h3"}]},{"title":"Label","filename":"elements/label.html","contents":[{"text":"<div class=\"wrapper\">\n  <ef-label class=\"animation\">\n    Universal basic income (UBI) is a government program in which every adult citizen receives a set amount of money on a regular basis. The goals of a basic income system are to alleviate poverty and replace other need-based social programs that potentially require greater bureaucratic involvement.\n  </ef-label>\n  <hr>\n  <ef-label line-clamp=\"1\" class=\"animation\">\n    Universal basic income (UBI) is a government program in which every adult citizen receives a set amount of money on a regular basis. The goals of a basic income system are to alleviate poverty and replace other need-based social programs that potentially require greater bureaucratic involvement.\n  </ef-label>\n  <hr>\n  <ef-label line-clamp=\"2\" class=\"animation\">\n    Universal basic income (UBI) is a government program in which every adult citizen receives a set amount of money on a regular basis. The goals of a basic income system are to alleviate poverty and replace other need-based social programs that potentially require greater bureaucratic involvement.\n  </ef-label>\n</div>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"@keyframes resize {\n  from {\n    width: 95%;\n  }\n\n  to {\n    width: 60%;\n  }\n}\n\n.wrapper {\n  display: flex;\n  flex-direction: column;\n  border: 1px solid #9ea8f4;\n  width: 100%;\n  animation: resize ease-in-out 3s alternate infinite;\n  height: 120px;\n}\n\nef-label.animation {\n  padding: 0px 20px;\n  margin: 10px 0px;\n}\n\nhr {\n  background: #9ea8f4;\n  margin: 0px;\n  width: 100%;\n  height: 1px;\n}","tagName":"pre"},{"text":"ef-label is a responsive text container that provides automatic ellipsis and middle truncation. A tooltip is shown if the text does not fit.","tagName":"p"},{"text":"Basic Usage","tagName":"h2"},{"text":"Wrap the text with ef-label. Middle truncation and tooltip are applied automatically.","tagName":"p"},{"text":"<ef-label style=\"width:400px\">\n  Universal basic income (UBI) is a government program in which every adult citizen receives a set amount of money on a regular basis. The goals of a basic income system are to alleviate poverty and replace other need-based social programs that potentially require greater bureaucratic involvement.\n</ef-label>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"ef-label {\n  margin: 10px 0 120px 0;\n}","tagName":"pre"},{"text":"<ef-label style=\"width:400px\">\n  Universal basic income (UBI) is a government program in which every adult citizen receives a set amount of money on a regular basis. The goals of a basic income system are to alleviate poverty and replace other need-based social programs that potentially require greater bureaucratic involvement.\n</ef-label>","tagName":"pre"},{"text":"Line clamp","tagName":"h2"},{"text":"Use line-clamp attribute to handle the maximum number of lines to display.","tagName":"p"},{"text":"<ef-label style=\"width:400px\" line-clamp=\"1\">\n  Universal basic income (UBI) is a government program in which every adult citizen receives a set amount of money on a regular basis. The goals of a basic income system are to alleviate poverty and replace other need-based social programs that potentially require greater bureaucratic involvement.\n</ef-label>\n<br>\n<ef-label style=\"width:400px\" line-clamp=\"2\">\n  Universal basic income (UBI) is a government program in which every adult citizen receives a set amount of money on a regular basis. The goals of a basic income system are to alleviate poverty and replace other need-based social programs that potentially require greater bureaucratic involvement.\n</ef-label>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"ef-label {\n  margin: 5px 0px 45px;\n}","tagName":"pre"},{"text":"<ef-label style=\"width:400px\" line-clamp=\"1\">\n    Universal basic income (UBI) is a government program in which every adult citizen receives a set amount of money on a regular basis. The goals of a basic income system are to alleviate poverty and replace other need-based social programs that potentially require greater bureaucratic involvement.\n</ef-label>\n<br/>\n<ef-label style=\"width:400px\" line-clamp=\"2\">\n    Universal basic income (UBI) is a government program in which every adult citizen receives a set amount of money on a regular basis. The goals of a basic income system are to alleviate poverty and replace other need-based social programs that potentially require greater bureaucratic involvement.\n</ef-label>","tagName":"pre"},{"text":"API Reference","tagName":"h2"},{"text":"Attributes","tagName":"h3"},{"text":"Properties","tagName":"h3"}]},{"title":"Layout","filename":"elements/layout.html","contents":[{"text":"<ef-layout id=\"wrapper\" debug flex container>\n  <ef-layout debug id=\"header\" noflex>HEADER</ef-layout>\n  <ef-layout id=\"content\" flex nowrap>\n    <ef-layout debug id=\"left\"></ef-layout>\n    <ef-layout debug id=\"right\"></ef-layout>\n  </ef-layout>\n  <ef-layout debug id=\"footer\" noflex>FOOTER</ef-layout>\n</ef-layout>","tagName":"pre"},{"text":"customElements.whenDefined('ef-layout').then(function() {\n  var left = document.querySelector('#left');\n  var right = document.querySelector('#right');\n  left.addEventListener('resize', function(e) {\n    left.textContent = e.detail.width.toFixed(2) + 'px';\n  });\n  right.addEventListener('resize', function(e) {\n    right.textContent = e.detail.width.toFixed(2) + 'px';\n  });\n});","tagName":"pre"},{"text":"@keyframes resize {\n  from {\n    width: 10%;\n  }\n\n  to {\n    width: 30%;\n  }\n}\n\n#wrapper {\n  height: 120px;\n  color: #9ea8f4;\n}\n\n#header,\n#footer {\n  padding: 3px 7px;\n}\n\n#header,\n#footer,\n#content {\n  width: 100%;\n}\n\n#left,\n#right {\n  width: 20%;\n  text-align: center;\n  font-size: 40px;\n  justify-content: center;\n  align-items: center;\n  display: flex;\n}\n\n#left {\n  animation: resize ease-in-out 2s alternate infinite;\n}","tagName":"pre"},{"text":"ef-layout is a layout element designed to handle core layouts for Element Framework components and applications.","tagName":"p"},{"text":"By default, ef-layout is like any other block element, very much like a div. Therefore, additional attributes and child elements must be used in order to create layouts.","tagName":"p"},{"text":"Horizontal Alignment","tagName":"h3"},{"text":"Items can be arranged horizontally by specifying the flex attribute on a container.","tagName":"p"},{"text":"<ef-layout flex>\n  <ef-layout>LEFT</ef-layout>\n  <ef-layout>RIGHT</ef-layout>\n</ef-layout>","tagName":"pre"},{"text":"<ef-layout flex class=\"outer\">\n  <ef-layout class=\"inner\">LEFT</ef-layout>\n  <ef-layout class=\"inner\">RIGHT</ef-layout>\n</ef-layout>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":".outer {\n  background-color: #d0d4db;\n  padding: 10px;\n  overflow: hidden;\n}\n\n.inner {\n  background-color: #e4e8ed;\n  margin: 10px;\n  padding: 10px;\n}","tagName":"pre"},{"text":"Vertical Alignment","tagName":"h3"},{"text":"Items can be arranged vertically by specifying both the flex and container attributes on the container.","tagName":"p"},{"text":"<ef-layout flex container>\n  <ef-layout>TOP</ef-layout>\n  <ef-layout>BOTTOM</ef-layout>\n</ef-layout>","tagName":"pre"},{"text":"<ef-layout flex container class=\"outer\">\n  <ef-layout class=\"inner\">TOP</ef-layout>\n  <ef-layout class=\"inner\">BOTTOM</ef-layout>\n</ef-layout>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":".outer {\n  background-color: #d0d4db;\n  padding: 10px;\n}\n\n.inner {\n  background-color: #e4e8ed;\n  margin: 10px;\n  padding: 10px;\n}","tagName":"pre"},{"text":"No Wrap","tagName":"h3"},{"text":"By default, items will be wrapped to a new row if there is not enough space to fit them. However, you can prevent items from wrapping by specifying the nowrap attribute on the container.","tagName":"p"},{"text":"<ef-layout flex nowrap>\n  <ef-layout size=\"150px\">LEFT</ef-layout>\n  <ef-layout>CENTER</ef-layout>\n  <ef-layout size=\"150px\">RIGHT</ef-layout>\n</ef-layout>","tagName":"pre"},{"text":"<ef-layout flex nowrap class=\"outer\">\n  <ef-layout size=\"150px\" class=\"inner\">LEFT</ef-layout>\n  <ef-layout class=\"inner\">CENTER</ef-layout>\n  <ef-layout size=\"150px\" class=\"inner\">RIGHT</ef-layout>\n</ef-layout>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":".outer {\n  background-color: #d0d4db;\n  padding: 10px;\n  height: 180px;\n}\n\n.inner {\n  background-color: #e4e8ed;\n  margin: 10px;\n  padding: 10px;\n}","tagName":"pre"},{"text":"Item attributes","tagName":"h2"},{"text":"Defining the behavior of items is important for creating a responsive layout in an application.","tagName":"p"},{"text":"basis","tagName":"h3"},{"text":"The basis attribute is used as a rough guide for the container to set the size of items. You can define a basis value in percentages (e.g. 50%) or pixels (e.g. 150px).","tagName":"p"},{"text":"This property does not place an exact size on the element - instead it is more of a ratio among each of the children. For example, the sample layout below will try to keep each item size 1:2:1.","tagName":"p"},{"text":"Whenever the size of the container cannot accommodate all items in the same row, the last item will be wrapped to a new row and the size of items in the same row will be recalculated. In the example, when the row is wrapped, the items in the first row should have a ratio of 1:2.","tagName":"p"},{"text":"<ef-layout flex>\n  <ef-layout basis=\"150px\">LEFT</ef-layout>\n  <ef-layout basis=\"300px\">CENTER</ef-layout>\n  <ef-layout basis=\"150px\">RIGHT</ef-layout>\n</ef-layout>","tagName":"pre"},{"text":"<ef-layout flex class=\"outer\">\n  <ef-layout basis=\"150px\" class=\"inner\">LEFT</ef-layout>\n  <ef-layout basis=\"300px\" class=\"inner\">CENTER</ef-layout>\n  <ef-layout basis=\"150px\" class=\"inner\">RIGHT</ef-layout>\n</ef-layout>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"@keyframes resize {\n  from {\n    width: 100%;\n  }\n\n  to {\n    width: 300px;\n  }\n}\n\n.outer {\n  animation: resize 10s ease-in-out alternate infinite;\n  background-color: #d0d4db;\n  padding: 10px;\n  overflow: hidden;\n  height: 200px;\n  margin: 0 auto;\n}\n\n.inner {\n  background-color: #e4e8ed;\n  margin: 10px;\n  padding: 10px;\n}","tagName":"pre"},{"text":"Size","tagName":"h3"},{"text":"The size attribute is used when you want an item with a fixed size. This attribute is mostly used when applications need to fix the size of a layout. For example, the demo below shows two sidebars, each fixed at 150px. The middle item will then fill the rest of the available space.","tagName":"p"},{"text":"<ef-layout flex>\n  <ef-layout size=\"150px\">LEFT</ef-layout>\n  <ef-layout>CENTER</ef-layout>\n  <ef-layout size=\"150px\">RIGHT</ef-layout>\n</ef-layout>","tagName":"pre"},{"text":"<ef-layout flex class=\"outer\">\n  <ef-layout size=\"150px\" class=\"inner\">LEFT</ef-layout>\n  <ef-layout class=\"inner\">CENTER</ef-layout>\n  <ef-layout size=\"150px\" class=\"inner\">RIGHT</ef-layout>\n</ef-layout>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":".outer {\n  background-color: #d0d4db;\n  padding: 10px;\n  overflow: hidden;\n  height: 180px;\n}\n\n.inner {\n  background-color: #e4e8ed;\n  margin: 10px;\n  padding: 10px;\n  min-height: 30px;\n}","tagName":"pre"},{"text":"Break points","tagName":"h3"},{"text":"A break point is when the container has been resized to a certain width or height and the items in the application rearrange to accommodate the new size.","tagName":"p"},{"text":"You could use min-width to control a break point when an application should wrap items to a new row. In a flexible layout, items will try to fill up all available space. If an item cannot shrink to be smaller than the min-width the container will try to wrap the item (unless the nowrap attribute is set).","tagName":"p"},{"text":"The min-height could be used in a similar way for vertical layouts.","tagName":"p"},{"text":"In this example, the LEFT and RIGHT items will be laid up 1:3. Watch as the RIGHT item wraps when there is not enough space left on the first row.","tagName":"p"},{"text":"<ef-layout flex>\n  <ef-layout basis=\"75px\">LEFT</ef-layout>\n  <ef-layout basis=\"225px\" min-width=\"250px\">RIGHT</ef-layout>\n</ef-layout>","tagName":"pre"},{"text":"<ef-layout flex class=\"outer\">\n  <ef-layout basis=\"75px\" class=\"inner\">LEFT</ef-layout>\n  <ef-layout basis=\"225px\" min-width=\"250px\" class=\"inner\">RIGHT</ef-layout>\n</ef-layout>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"@keyframes resize {\n  from {\n    width: 100%;\n  }\n\n  to {\n    width: 300px;\n  }\n}\n\n.outer {\n  background-color: #d0d4db;\n  padding: 10px;\n  overflow: hidden;\n  height: 140px;\n  margin-bottom: 30px;\n  animation: resize 10s ease-in-out alternate infinite;\n  margin: 0 auto;\n}\n\n.inner {\n  background-color: #e4e8ed;\n  margin: 10px;\n  padding: 10px;\n}","tagName":"pre"},{"text":"Additional options","tagName":"h2"},{"text":"Debug","tagName":"h3"},{"text":"The debug attribute makes ef-layout display a thin border. This is useful to visualize the current structure of your layout on the screen.","tagName":"p"},{"text":"<ef-layout debug container flex>\n  <ef-layout>HEADER</ef-layout>\n  <ef-layout flex>\n      <ef-layout container>\n        <ef-layout>ITEM 1</ef-layout>\n        <ef-layout>ITEM 2</ef-layout>\n    </ef-layout>\n    <ef-layout>ITEM 3</ef-layout>\n  </ef-layout>\n</ef-layout>","tagName":"pre"},{"text":"<ef-layout debug container flex class=\"outer\">\n  <ef-layout class=\"inner\">HEADER</ef-layout>\n  <ef-layout flex class=\"inner\">\n    <ef-layout container class=\"inner\">\n      <ef-layout class=\"inner\">ITEM 1</ef-layout>\n      <ef-layout class=\"inner\">ITEM 2</ef-layout>\n    </ef-layout>\n    <ef-layout class=\"inner\">ITEM 3</ef-layout>\n  </ef-layout>\n</ef-layout>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":".outer {\n  background-color: #d0d4db;\n  padding: 10px;\n  overflow: hidden;\n}\n\n.inner {\n  background-color: #e4e8ed;\n  margin: 10px;\n  padding: 10px;\n}","tagName":"pre"},{"text":"Scrollable","tagName":"h3"},{"text":"The scrollable attribute can be specified on the container. This makes the container show a scrollbar when there is not enough space to display all items.","tagName":"p"},{"text":"<ef-layout flex>\n  <ef-layout container flex max-height=\"155px\" scrollable>\n    <ef-layout>ITEM 1</ef-layout>\n    <ef-layout>ITEM 2</ef-layout>\n    <ef-layout>ITEM 3</ef-layout>\n    <ef-layout>ITEM 4</ef-layout>\n    <ef-layout>ITEM 5</ef-layout>\n    <ef-layout>ITEM 6</ef-layout>\n    <ef-layout>ITEM 7</ef-layout>\n  </ef-layout>\n  <ef-layout flex>\n    <ef-layout>ITEM 8</ef-layout>\n  </ef-layout>\n</ef-layout>","tagName":"pre"},{"text":"<ef-layout flex>\n  <ef-layout container flex class=\"outer\" max-height=\"155px\" scrollable>\n    <ef-layout class=\"inner\">ITEM 1</ef-layout>\n    <ef-layout class=\"inner\">ITEM 2</ef-layout>\n    <ef-layout class=\"inner\">ITEM 3</ef-layout>\n    <ef-layout class=\"inner\">ITEM 4</ef-layout>\n    <ef-layout class=\"inner\">ITEM 5</ef-layout>\n    <ef-layout class=\"inner\">ITEM 6</ef-layout>\n    <ef-layout class=\"inner\">ITEM 7</ef-layout>\n  </ef-layout>\n  <ef-layout flex class=\"outer\">\n    <ef-layout class=\"inner\">ITEM 8</ef-layout>\n  </ef-layout>\n</ef-layout>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":".outer {\n  background-color: #d0d4db;\n  padding: 10px;\n}\n\n.inner {\n  background-color: #e4e8ed;\n  margin: 10px;\n  padding: 10px;\n  min-height: 35px;\n}","tagName":"pre"},{"text":"API Reference","tagName":"h2"},{"text":"Attributes","tagName":"h3"},{"text":"Properties","tagName":"h3"},{"text":"Events","tagName":"h3"}]},{"title":"Overlay","filename":"elements/overlay.html","contents":[{"text":"<ef-overlay id=\"overlay\" with-backdrop with-shadow>\n  <h3>Hello!</h3>\n  <p>Click grey area to close this overlay.</p>\n</ef-overlay>\n<section>\n  <ef-button cta id=\"open-overlay\">Open</ef-button>\n</section>","tagName":"pre"},{"text":"var openButton = document.getElementById('open-overlay');\nvar overlay = document.getElementById('overlay');\nopenButton.addEventListener('click', function() {\n  overlay.opened = true;\n});","tagName":"pre"},{"text":"section {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 300px;\n}\n\n#overlay {\n  height: 200px;\n  width: 400px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  text-align: center;\n}","tagName":"pre"},{"text":"ef-overlay is a base modal container for components. It helps create dialogs, tooltips, menus and other elements that should appear on top of the main application window. It is highly configurable, including positioning, attaching to elements, transition styles, backdrops and much more.","tagName":"p"},{"text":"Basic usage","tagName":"h3"},{"text":"Using overlayPosition against windowAttach to targetPosition against targetCustomize behavior","tagName":"p"},{"text":"Using overlay","tagName":"a"},{"text":"Position against window","tagName":"a"},{"text":"Attach to target","tagName":"a"},{"text":"Position against target","tagName":"a"},{"text":"Customize behavior","tagName":"a"},{"text":"Advanced usage","tagName":"h3"},{"text":"Advanced attributesControl focus behavior","tagName":"p"},{"text":"Advanced attributes","tagName":"a"},{"text":"Control focus behavior","tagName":"a"},{"text":"Using overlay","tagName":"h2"},{"text":"ef-overlay is typically initiated by a user action. The overlay can be opened by setting the opened property. Remove the property to close the overlay. In addition, the user can close the overlay by clicking outside overlay area or by pressing the ESC key.","tagName":"p"},{"text":"<ef-overlay id=\"overlay\">Default</ef-overlay>\n<section>\n  <ef-button cta id=\"open-overlay\">Open</ef-button>\n</section>","tagName":"pre"},{"text":"var openButton = document.getElementById('open-overlay');\nvar overlay = document.getElementById('overlay');\nopenButton.addEventListener('click', function() {\n  overlay.opened = true;\n});","tagName":"pre"},{"text":"section {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 200px;\n}\n\n#overlay {\n  height: 150px;\n  width: 150px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}","tagName":"pre"},{"text":"<ef-overlay id=\"overlay\">Default</ef-overlay>\n\n<!-- button to initiate the overlay -->\n<ef-button cta id=\"open-overlay\">Open</ef-button>","tagName":"pre"},{"text":"var openButton = document.getElementById('open-overlay');\nvar overlay = document.getElementById('overlay');\nopenButton.addEventListener('click', function () {\n  overlay.opened = true;\n});","tagName":"pre"},{"text":"Position against window","tagName":"h3"},{"text":"By default ef-overlay appears at the centre of the window. You can set position-target to change that behavior.","tagName":"p"},{"text":"\nPosition Target\nDescription\n","tagName":"tr"},{"text":"\ntop\nTop side of the screen (same as top center or center top)\n","tagName":"tr"},{"text":"\ntop left\nTop left corner of the screen (same as left top)\n","tagName":"tr"},{"text":"\ntop right\nTop right corner of the screen (same as right top)\n","tagName":"tr"},{"text":"\nright\nRight side of the screen (same as right center or center right)\n","tagName":"tr"},{"text":"\nbottom\nBottom side of the screen (same as bottom center or center bottom)\n","tagName":"tr"},{"text":"\nbottom left\nBottom left corner of the screen (same as left bottom)\n","tagName":"tr"},{"text":"\nbottom right\nBottom right corner of the screen (same as right bottom)\n","tagName":"tr"},{"text":"\nleft\nLeft side of the screen (same as left center or center left)\n","tagName":"tr"},{"text":"\ncenter (default)\nCenter of the screen (same as center center)\n","tagName":"tr"},{"text":"ef-overlay supports x and y attributes, which define an offset in pixels based on the position target. For instance, if position-target=\"top left\", offset is calculated from the top left corner. If position-target=\"bottom right\", offset is calculated from the bottom right corner.","tagName":"p"},{"text":"<ef-overlay id=\"overlay\" with-shadow></ef-overlay>\n<section>\n  <ef-button cta id=\"open-overlay\">Open</ef-button>\n</section>","tagName":"pre"},{"text":"var openButton = document.getElementById('open-overlay');\nvar overlay = document.getElementById('overlay');\nvar idx = 0;\nvar x;\nvar y;\n\nvar positions = ['top', 'top left', 'left', 'bottom left', 'bottom', 'bottom right', 'right', 'top right', 'center'];\n\nvar setPositionTarget = function() {\n  if (overlay.opened) {\n    var position = positions[idx];\n    overlay.positionTarget = position;\n\n    x = position === 'center' || position === 'top' || position === 'bottom' ? 0 : 20;\n    y = position === 'center' || position === 'left' || position === 'right' ? 0 : 20;\n\n    overlay.innerHTML = position + '<br><br>x: ' + x + '<br>y: ' + y;\n    overlay.x = x;\n    overlay.y = y;\n    overlay.fit();\n    setTimeout(function() {\n      idx += 1;\n      if (idx >= positions.length) {\n        idx = 0;\n      }\n      setPositionTarget();\n    }, 1000);\n  }\n};\n\nopenButton.addEventListener('click', function() {\n  overlay.opened = true;\n  setPositionTarget();\n});","tagName":"pre"},{"text":"section {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 300px;\n}\n\n#overlay {\n  height: 100px;\n  width: 100px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  text-align: center;\n}","tagName":"pre"},{"text":"<ef-overlay position-target=\"top right\" x=\"20\" y=\"40\"></ef-overlay>","tagName":"pre"},{"text":"Attach to target","tagName":"h3"},{"text":"Overlay can be attached to an element by setting the positionTarget property to an HTMLElment object.","tagName":"p"},{"text":"<ef-overlay id=\"overlay\" spacing no-autofocus with-shadow offset=\"4\"></ef-overlay>\n<section>\n  <ef-text-field id=\"target\" placeholder=\"Type to trigger overlay\"></ef-text-field>\n</section>","tagName":"pre"},{"text":"var target = document.getElementById('target');\nvar overlay = document.getElementById('overlay');\noverlay.positionTarget = target;\ntarget.addEventListener('value-changed', function() {\n  if (target.value) {\n    overlay.opened = true;\n    overlay.innerHTML = target.value;\n  } else {\n    overlay.opened = false;\n  }\n});","tagName":"pre"},{"text":"section {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 200px;\n}\n\n#overlay {\n  min-width: 152px;\n}","tagName":"pre"},{"text":"var target = document.getElementById('target');\nvar overlay = document.getElementById('overlay');\noverlay.positionTarget = target;","tagName":"pre"},{"text":"Position against target","tagName":"h3"},{"text":"Position strategies are set using the position property. ef-overlay picks the best strategy to show maximum content without overlapping the target element. If none of the position strategies can be used, the overlay may overlap the target element or restrict the overlay size.","tagName":"p"},{"text":"overlay.position = ['bottom-end', 'bottom-start', 'right-end', 'center-middle'];","tagName":"pre"},{"text":"Position strategy","tagName":"h4"},{"text":"The first part defines position. The optional second part defines align. For instance: bottom, top-start, right-middle.","tagName":"p"},{"text":"\nPosition\nDescription\n","tagName":"tr"},{"text":"\ntop\nAbove target (same as top-start)\n","tagName":"tr"},{"text":"\nright\nAfter target (same as right-middle)\n","tagName":"tr"},{"text":"\nbottom\nBelow target (same as bottom-start)\n","tagName":"tr"},{"text":"\nleft\nBefore target (same as left-middle)\n","tagName":"tr"},{"text":"\ncenter\nAt the center of target (same as center-middle)\n","tagName":"tr"},{"text":"\nAlign\nDescription\n","tagName":"tr"},{"text":"\nstart\nTarget is aligned at the start of overlay\n","tagName":"tr"},{"text":"\nmiddle\nTarget is aligned at the middle of overlay\n","tagName":"tr"},{"text":"\nend\nTarget is aligned at the end of overlay\n","tagName":"tr"},{"text":"<ef-overlay id=\"overlay\" lock-position-target with-shadow offset=\"4\"></ef-overlay>\n<section>\n  <ef-button cta id=\"open-overlay\">Open</ef-button>\n</section>","tagName":"pre"},{"text":"var openButton = document.getElementById('open-overlay');\nvar overlay = document.getElementById('overlay');\noverlay.positionTarget = openButton;\n\nvar idx = 0;\nvar positions = [\n  'bottom-end', 'bottom-middle', 'bottom-start',\n  'right-start', 'right-middle', 'right-end',\n  'top-start', 'top-middle', 'top-end',\n  'left-end', 'left-middle', 'left-start',\n  'center-end', 'center-middle', 'center-start'\n];\n\nvar setPosition = function() {\n  if (overlay.opened) {\n    overlay.position = [positions[idx]];\n    overlay.innerHTML = positions[idx];\n    overlay.fit();\n    setTimeout(function() {\n      idx += 1;\n      if (idx >= positions.length) {\n        idx = 0;\n      }\n      setPosition();\n    }, 1000);\n  }\n};\n\nopenButton.addEventListener('click', function() {\n  overlay.opened = true;\n  setPosition();\n});","tagName":"pre"},{"text":"section {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 300px;\n}\n\n#overlay {\n  height: 100px;\n  width: 100px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}","tagName":"pre"},{"text":"Use no-overlap to ensure that the overlay never overlaps the target element. If there is not enough space, the overlay will restrict its size.","tagName":"p"},{"text":"<ef-overlay no-overlap></ef-overlay>","tagName":"pre"},{"text":"Use offset to add pixel offset from the target element.","tagName":"p"},{"text":"<ef-overlay offset=\"4\"></ef-overlay>","tagName":"pre"},{"text":"Customize behavior","tagName":"h3"},{"text":"It is easy to customize overlay behavior. The styles are driven by the theme.","tagName":"p"},{"text":"<ef-overlay id=\"overlay\" with-shadow spacing>\n  <ef-button id=\"close-overlay\">Close</ef-button>\n</ef-overlay>\n<section>\n  <div id=\"configuration\">\n    <ef-checkbox ref=\"fullScreen\">full-screen</ef-checkbox>\n    <ef-checkbox ref=\"transparent\">transparent</ef-checkbox>\n    <ef-checkbox ref=\"withShadow\" checked>with-shadow</ef-checkbox>\n    <ef-checkbox ref=\"withBackdrop\">with-backdrop</ef-checkbox>\n    <ef-checkbox ref=\"spacing\" checked>spacing</ef-checkbox>\n  </div>\n  <ef-button cta id=\"open-overlay\">Open</ef-button>\n</section>","tagName":"pre"},{"text":"var openButton = document.getElementById('open-overlay');\nvar overlay = document.getElementById('overlay');\nopenButton.addEventListener('click', function() {\n  overlay.opened = true;\n});\ndocument.getElementById('close-overlay').addEventListener('click', function() {\n  overlay.opened = false;\n});\nvar setCheckboxProperty = function(ch) {\n  var set = function() {\n    overlay[ch.getAttribute('ref')] = ch.checked;\n  };\n  ch.addEventListener('checked-changed', set);\n};\ndocument.querySelectorAll('ef-checkbox[ref]').forEach(setCheckboxProperty);","tagName":"pre"},{"text":"section {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 200px;\n}\n\n#configuration {\n  display: flex;\n  flex-direction: column;\n  position: absolute;\n  top: 20px;\n  left: 20px;\n}\n\n#overlay {\n  min-height: 150px;\n  min-width: 150px;\n  display: flex;\n  justify-content: flex-end;\n  align-items: flex-end;\n}","tagName":"pre"},{"text":"Use full-screen to make the overlay full screen.","tagName":"p"},{"text":"<ef-overlay full-screen></ef-overlay>","tagName":"pre"},{"text":"Use transparent to make the overlay background transparent.","tagName":"p"},{"text":"<ef-overlay transparent></ef-overlay>","tagName":"pre"},{"text":"Use with-shadow to show shadow for overlay.","tagName":"p"},{"text":"<ef-overlay with-shadow></ef-overlay>","tagName":"pre"},{"text":"Use with-backdrop to show a backdrop when the overlay is shown.","tagName":"p"},{"text":"<ef-overlay with-backdrop></ef-overlay>","tagName":"pre"},{"text":"Use spacing to add spacing inside the overlay. Spacing is controlled by the theme.","tagName":"p"},{"text":"<ef-overlay spacing></ef-overlay>","tagName":"pre"},{"text":"Use transition-style to add a transition.","tagName":"p"},{"text":"<ef-overlay id=\"overlay\" with-shadow transition-style=\"zoom\"></ef-overlay>\n<section>\n  <ef-select id=\"transition\">\n    <ef-item value=\"fade\">fade</ef-item>\n    <ef-item value=\"zoom\" selected>zoom</ef-item>\n    <ef-item value=\"slide\">slide</ef-item>\n    <ef-item value=\"slide-down\">slide-down</ef-item>\n    <ef-item value=\"slide-up\">slide-up</ef-item>\n    <ef-item value=\"slide-right\">slide-right</ef-item>\n    <ef-item value=\"slide-left\">slide-left</ef-item>\n    <ef-item value=\"slide-right-up\">slide-right-up</ef-item>\n    <ef-item value=\"slide-left-up\">slide-left-up</ef-item>\n    <ef-item value=\"slide-right-down\">slide-right-down</ef-item>\n    <ef-item value=\"slide-left-down\">slide-left-down</ef-item>\n  </ef-select>\n  <ef-button cta id=\"open-overlay\">Open</ef-button>\n</section>","tagName":"pre"},{"text":"var openButton = document.getElementById('open-overlay');\nvar transitionStyle = document.getElementById('transition');\nvar overlay = document.getElementById('overlay');\noverlay.attachTarget = transitionStyle;\nopenButton.addEventListener('click', function() {\n  overlay.transitionStyle = transitionStyle.value;\n  overlay.innerHTML = transitionStyle.value;\n  overlay.opened = true;\n});","tagName":"pre"},{"text":"section {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 200px;\n}\n\n#overlay {\n  height: 100px;\n  width: 212px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}","tagName":"pre"},{"text":"<ef-overlay transition-style=\"fade\"></ef-overlay>","tagName":"pre"},{"text":"\nTransition Styles\nDescription\n","tagName":"tr"},{"text":"\nfade\nFade overlay in\n","tagName":"tr"},{"text":"\nslide\nSlide overlay from center in\n","tagName":"tr"},{"text":"\nzoom\nZoom overlay from center in\n","tagName":"tr"},{"text":"\nslide-down\nSlide down from top\n","tagName":"tr"},{"text":"\nslide-up\nSlide up from bottom\n","tagName":"tr"},{"text":"\nslide-right\nSlide in from right\n","tagName":"tr"},{"text":"\nslide-left\nSlide in from left\n","tagName":"tr"},{"text":"\nslide-right-down\nSlide down from the top left to bottom right\n","tagName":"tr"},{"text":"\nslide-right-up\nSlide up from the bottom left to top right\n","tagName":"tr"},{"text":"\nslide-left-down\nSlide down from the top right to bottom left\n","tagName":"tr"},{"text":"\nslide-left-up\nSlide up from the bottom right to top left\n","tagName":"tr"},{"text":"Advanced usage","tagName":"h2"},{"text":"Applying exotic CSS properties","tagName":"h3"},{"text":"ef-overlay calculates x and y coordinates based on screen dimension and position target (if any). An overlay using position: fixed is removed from the normal document flow and is positioned relative to the initial containing block established by the viewport. The positioning algorithm assumes that overlay, viewport and positionTarget are located within the same coordinate system.","tagName":"p"},{"text":"However, there are exceptions when the positioning algorithm may behave differently, or may not work at all. According to CSS Transforms Specs, if transform, perspective or filter properties are set to something other than none, then that ancestor behaves as the containing block. In addition, if the zoom property is set on anything other than the html or body tag, then the coordinate system will be different for different parts of the document, and the overlay may not be positioned correctly.","tagName":"p"},{"text":"CSS Transforms Specs","tagName":"a"},{"text":"While the above is true for most modern browsers, the actual implementation may differ between browsers and versions.","tagName":"p"},{"text":"Below is a brief summary of supported use cases.","tagName":"p"},{"text":"\n\nCSS Property\nStatus\nNotes\n","tagName":"tr"},{"text":"\n✓\nzoom\nPartial Support\nProperty is only supported on html and body elements.\n","tagName":"tr"},{"text":"\n✓\nfilter\nPartial Support\nOverlay position/size is relative to the filter container.If filter is applied to html element, overlay size is not restricted by window size.\n","tagName":"tr"},{"text":"\n✓\ntransform:translatetransform:translate3d\nPartial Support\nOverlay position/size is relative to the transform container.If transform is applied to html element, overlay size is not restricted by window size.Translating z-axis is not supported.\n","tagName":"tr"},{"text":"\n✗\ntransform:rotatetransform:rotate3d\nNo Support\n-\n","tagName":"tr"},{"text":"\n✗\ntransform:matrixtransform:matrix3d\nNo Support\n-\n","tagName":"tr"},{"text":"\n✗\ntransform:scaletransform:scale3d\nNo Support\n-\n","tagName":"tr"},{"text":"\n✗\ntransform:skew\nNo Support\n-\n","tagName":"tr"},{"text":"\n✗\ntransform:perspective\nNo Support\n-\n","tagName":"tr"},{"text":"\n✗\nperspective\nNo Support\n-\n","tagName":"tr"},{"text":"Advanced attributes","tagName":"h3"},{"text":"To create a modal overlay, use the no-cancel-on-outside-click, no-cancel-on-esc-key, and with-backdrop attributes together.","tagName":"p"},{"text":"<ef-overlay no-cancel-on-outside-click no-cancel-on-esc-key with-backdrop></ef-overlay>","tagName":"pre"},{"text":"By default ef-overlay automatically sets z-index=103. If there are other absolutely positioned elements not controlled by the Element Framework, you can override the initial value by setting the z-index attribute.","tagName":"p"},{"text":"<ef-overlay z-index=\"1000\"></ef-overlay>","tagName":"pre"},{"text":"By default ef-overlay locks document level interaction. This allows only the content inside the overlay to be scrollable and clickable. To change this behavior, set no-interaction-lock.","tagName":"p"},{"text":"<ef-overlay no-interaction-lock></ef-overlay>","tagName":"pre"},{"text":"If the developer needs to keep multiple elements interactive, then the interactiveElements property is used.","tagName":"p"},{"text":"overlay.interactiveElements = [\n  htmlElement1,\n  htmlElement2\n];","tagName":"pre"},{"text":"Control focus behavior","tagName":"h3"},{"text":"ef-overlay controls the tabbing and focus behavior. When the overlay is opened, only elements inside the overlay can be tabbed through. In addition, the overlay puts the focus on itself when opened.","tagName":"p"},{"text":"Use no-autofocus to stop the overlay from focusing on its content when opened.","tagName":"p"},{"text":"<ef-overlay no-autofocus></ef-overlay>","tagName":"pre"},{"text":"When the overlay is attached to a position target element, the user can still interact with the target element. Use lock-position-target to change this default behavior.","tagName":"p"},{"text":"<ef-overlay lock-position-target></ef-overlay>","tagName":"pre"},{"text":"When the overlay is open, only the elements inside the overlay can be tabbed through. You can change the default by setting the focusBoundary property.","tagName":"p"},{"text":"In the example below, the focus boundary is kept within custom-element. Even when the overlay is open, the user is still able to focus and tab on ef-text-field.","tagName":"p"},{"text":"<custom-element id=\"customElement\">\n  <ef-text-field id=\"input\"></ef-text-field>\n  <ef-overlay id=\"overlay\" no-autofocus></ef-overlay>\n</custom-element>","tagName":"pre"},{"text":"var customElement = document.getElementById('customElement');\nvar input = document.getElementById('input');\nvar overlay = document.getElementById('overlay');\n\noverlay.positionTarget = input;\noverlay.focusBoundary = customElement;","tagName":"pre"},{"text":"API Reference","tagName":"h2"},{"text":"Attributes","tagName":"h3"},{"text":"Position can be: top, right, bottom, left, centerAlign can be: start, middle, end","tagName":"p"},{"text":"Properties","tagName":"h3"},{"text":"","tagName":"p"},{"text":"Position can be: top, right, bottom, left, centerAlign can be: start, middle, end","tagName":"p"},{"text":"Methods","tagName":"h3"},{"text":"Events","tagName":"h3"},{"text":"","tagName":"p"}]},{"title":"Panel","filename":"elements/panel.html","contents":[{"text":"<ef-panel spacing>\n  <h3>Section</h3>\n  <p>Leverage agile frameworks to provide a robust synopsis for high level overviews. Iterative approaches to corporate strategy foster collaborative thinking to further the overall value proposition.</p>\n</ef-panel>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"ef-panel is a container for components. It provides a standard background color and padding, depending on the theme.","tagName":"p"},{"text":"Creating a panel","tagName":"h3"},{"text":"ef-panel can be used as a generic container for housing any components.","tagName":"p"},{"text":"<ef-panel>\n  <h3>Section</h3>\n  <p>Leverage agile frameworks to provide a robust synopsis for high level overviews. Iterative approaches to corporate strategy foster collaborative thinking to further the overall value proposition.</p>\n</ef-panel>","tagName":"pre"},{"text":"Add spacing","tagName":"h3"},{"text":"Default padding is managed by the theme and can be set to ef-panel using the spacing attribute.","tagName":"p"},{"text":"<ef-panel spacing>\n  <h3>Section</h3>\n  <p>Leverage agile frameworks to provide a robust synopsis for high level overviews. Iterative approaches to corporate strategy foster collaborative thinking to further the overall value proposition.</p>\n</ef-panel>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"<ef-panel spacing>\n  <h3>Section</h3>\n  <p>Leverage agile frameworks to provide a robust synopsis for high level overviews. Iterative approaches to corporate strategy foster collaborative thinking to further the overall value proposition.</p>\n</ef-panel>","tagName":"pre"},{"text":"Customizing panel style","tagName":"h3"},{"text":"ef-panel can be styled similarly to div. For example, background color and other styles can be changed using a CSS class.","tagName":"p"},{"text":"<ef-panel class=\"primary-section\">\n  <h3># New Normal</h3>\n  <p>New Normal is a term in business and economics that refers to financial conditions following the financial crisis of 2007-2008, the aftermath of the 2008&#x2013;2012 global recession, and the COVID-19 pandemic. <a style=\"color:white; text-decoration:underline;\" href=\"https://en.wikipedia.org/wiki/New_Normal_(business)\">Wikipedia</a></p>\n</ef-panel>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":".primary-section {\n  padding: 14px 20px;\n  background-color: #001eff;\n  color: #ffffff;\n}","tagName":"pre"},{"text":"<style>\n  .primary-section {\n    padding: 14px 20px;\n    background-color: #001eff;\n    color: #ffffff;\n  }\n</style>","tagName":"pre"},{"text":"<ef-panel class=\"primary-section\">\n  <h3># New Normal</h3>\n  <p>New Normal is a term in business and economics that refers to financial conditions following the financial crisis of 2007-2008, the aftermath of the 2008–2012 global recession, and the COVID-19 pandemic. <a style=\"color:white; text-decoration:underline;\" href=\"https://en.wikipedia.org/wiki/New_Normal_(business)\">Wikipedia</a></p>\n</ef-panel>","tagName":"pre"},{"text":"API Reference","tagName":"h2"},{"text":"Attributes","tagName":"h3"},{"text":"Properties","tagName":"h3"}]},{"title":"Sidebar Layout","filename":"elements/sidebar-layout.html","contents":[{"text":"<ef-sidebar-layout>\n  <ef-header slot=\"sidebar-header\" level=\"1\">Sidebar Layout</ef-header>\n  <ef-panel slot=\"sidebar-content\" spacing>Menus</ef-panel>\n  <ef-panel slot=\"main-content\" spacing>This is awesome.</ef-panel>\n</ef-sidebar-layout>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"ef-sidebar-layout {\n  height: 200px;\n}\n\n[slot=\"sidebar-content\"] {\n  text-align: center;\n  padding: 50px 0;\n  background-color: #dfe2e8;\n}\n\n[slot=\"main-content\"] {\n  text-align: center;\n  padding: 90px 0;\n  background-color: #f1f1f1;\n}","tagName":"pre"},{"text":"ef-sidebar-layout provides an app layout with a sidebar. There are four sections where a component can be slotted in.","tagName":"p"},{"text":"The header slots can be omitted. Also, the component will automatically provide a vertical scrollbar if content is too long.","tagName":"p"},{"text":"Using sidebar layout","tagName":"h3"},{"text":"ef-sidebar-layout is a layout, it is up to the developer to slot any contents into it. Typically, ef-sidebar-layout should be used together with ef-header for header slots, and ef-panel for content. Components that are used inside the layout must be imported by the app.","tagName":"p"},{"text":"<ef-sidebar-layout>\n  <ef-header slot=\"sidebar-header\" level=\"1\">Sidebar Layout</ef-header>\n  <ef-panel slot=\"sidebar-content\" spacing class=\"sidebar-content\">Sidebar Content</ef-panel>\n  <ef-header slot=\"main-header\" level=\"1\">Main Header</ef-header>\n  <ef-panel slot=\"main-content\" spacing class=\"main-content\">Main Content</ef-panel>\n</ef-sidebar-layout>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"ef-sidebar-layout {\n  height: 200px;\n}\n\n[slot=\"sidebar-content\"] {\n  text-align: center;\n  padding: 70px 0;\n}\n\n[slot=\"main-content\"] {\n  text-align: center;\n  padding: 70px 0;\n}","tagName":"pre"},{"text":"<ef-sidebar-layout>\n  <ef-header slot=\"sidebar-header\" level=\"1\">Sidebar Header</ef-header>\n  <ef-panel slot=\"sidebar-content\" spacing>Sidebar Content</ef-panel>\n  <ef-header slot=\"main-header\" level=\"1\">Main Header</ef-header>\n  <ef-panel slot=\"main-content\" spacing>Main Content</ef-panel>\n</ef-sidebar-layout>","tagName":"pre"},{"text":"Add toolbar commands","tagName":"h3"},{"text":"Menus on header could be implemented by using slots of ef-header.","tagName":"p"},{"text":"<ef-sidebar-layout>\n  <ef-header slot=\"sidebar-header\" level=\"1\">Title</ef-header>\n  <ef-panel slot=\"sidebar-content\" spacing>Sidebar Content</ef-panel>\n  <ef-header slot=\"main-header\" level=\"1\">\n    <ef-button slot=\"right\" transparent icon=\"settings\"></ef-button>\n    <ef-button slot=\"right\" transparent icon=\"share\"></ef-button>\n  </ef-header>\n  <ef-panel slot=\"main-content\" spacing>Main Content</ef-panel>\n</ef-sidebar-layout>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"ef-sidebar-layout {\n  height: 200px;\n}\n\n[slot=\"sidebar-content\"] {\n  text-align: center;\n  padding: 60px 0;\n}\n\n[slot=\"main-content\"] {\n  text-align: center;\n  padding: 60px 0;\n}","tagName":"pre"},{"text":"<ef-sidebar-layout>\n  <ef-header slot=\"sidebar-header\" level=\"1\">Title</ef-header>\n  <ef-panel slot=\"sidebar-content\" spacing>Sidebar Content</ef-panel>\n  <ef-header slot=\"main-header\" level=\"1\">\n    <ef-button slot=\"right\" transparent icon=\"settings\"></ef-button>\n    <ef-button slot=\"right\" transparent icon=\"share\"></ef-button>\n  </ef-header>\n  <ef-panel slot=\"main-content\" spacing>Main Content</ef-panel>\n</ef-sidebar-layout>","tagName":"pre"},{"text":"Toggled sidebar","tagName":"h3"},{"text":"Sidebar can be hidden by adding the collapsed attribute. A toggle button to collapse the sidebar can be implemented by code.","tagName":"p"},{"text":"<ef-sidebar-layout id=\"layout\">\n  <ef-header slot=\"sidebar-header\" level=\"1\">Title</ef-header>\n  <ef-panel spacing slot=\"sidebar-content\">Sidebar Content</ef-panel>\n  <ef-header slot=\"main-header\" level=\"1\">\n    <ef-button transparent slot=\"left\" id=\"toggleBtn\" icon=\"leftpanel-open\"></ef-button>\n    <ef-button slot=\"right\" transparent icon=\"settings\"></ef-button>\n  </ef-header>\n  <ef-panel spacing slot=\"main-content\">Main Content</ef-panel>\n</ef-sidebar-layout>","tagName":"pre"},{"text":"var layout = document.getElementById('layout');\nvar toggleBtn = document.getElementById('toggleBtn');\ntoggleBtn.addEventListener('click', function() {\n  layout.collapsed = !layout.collapsed;\n  toggleBtn.setAttribute('icon', layout.collapsed ? 'leftpanel-closed' : 'leftpanel-open');\n});","tagName":"pre"},{"text":"ef-sidebar-layout {\n  height: 200px;\n}\n\n[slot=\"sidebar-content\"] {\n  text-align: center;\n  padding: 60px 0;\n}\n\n[slot=\"main-content\"] {\n  text-align: center;\n  padding: 60px 0;\n}","tagName":"pre"},{"text":"<ef-sidebar-layout id=\"layout\">\n  <ef-header slot=\"sidebar-header\" level=\"1\">Title</ef-header>\n  <ef-panel spacing slot=\"sidebar-content\">Sidebar Content</ef-panel>\n  <ef-header slot=\"main-header\" level=\"1\">\n    <ef-button transparent slot=\"left\" id=\"toggleBtn\" icon=\"leftpanel-open\"></ef-button>\n    <ef-button slot=\"right\" transparent icon=\"settings\"></ef-button>\n  </ef-header>\n  <ef-panel spacing slot=\"main-content\">Main Content</ef-panel>\n</ef-sidebar-layout>\n\n<script>\n  var layout = document.getElementById('layout');\n  var toggleBtn = document.getElementById('toggleBtn');\n  toggleBtn.addEventListener('click', function () {\n    layout.collapsed = !layout.collapsed;\n    toggleBtn.setAttribute('icon', layout.collapsed ? 'leftpanel-closed' : 'leftpanel-open');\n  });\n</script>","tagName":"pre"},{"text":"Slots","tagName":"h2"},{"text":"API Reference","tagName":"h2"},{"text":"Attributes","tagName":"h3"},{"text":"Properties","tagName":"h3"}]},{"title":"Appstate Bar","filename":"elements/appstate-bar.html","contents":[{"text":"<div id=\"wrapper\">\n  <ef-appstate-bar heading=\"Preview\">This is a preview version.\n    <a alt href=\"#\">What&apos;s changing?</a>\n  </ef-appstate-bar>\n  <ef-appstate-bar heading=\"IN DEVELOPMENT\" state=\"info\">Internal use only.\n    <a alt href=\"#\" slot=\"right\">\n      <ef-icon icon=\"present\"></ef-icon>Send us feedback\n    </a>\n  </ef-appstate-bar>\n  <ef-appstate-bar heading=\"New\" state=\"highlight\">Welcome to new version.\n    <a alt href=\"#\">What&apos;s new?</a>\n    <a alt href=\"#\" slot=\"right\">\n      <ef-icon icon=\"help\"></ef-icon>Help\n    </a>\n  </ef-appstate-bar>\n</div>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"#wrapper {\n  padding: 1px;\n}\n\nef-appstate-bar {\n  margin-bottom: 10px;\n}\n\n[slot=\"right\"] {\n  display: flex;\n  align-items: center;\n}\n\n[slot=\"right\"] ef-icon {\n  padding-right: 3px;\n}","tagName":"pre"},{"text":"ef-appstate-bar is used to display status or other information at the top of an application. App State Bar comes with pre-defined colors in the theme.","tagName":"p"},{"text":"Basic usage","tagName":"h3"},{"text":"Styles for App State Bar content can be set using the state attribute/property. The App State Bar's heading can be set via the heading attribute/property.","tagName":"p"},{"text":"<div id=\"wrapper\">\n  <ef-appstate-bar heading=\"Heading\">\n    Here is your content message.\n  </ef-appstate-bar>\n\n  <ef-appstate-bar heading=\"Info\" state=\"info\">\n    Set attribute as state = &quot;info&quot;\n  </ef-appstate-bar>\n\n  <ef-appstate-bar heading=\"Highlight\" state=\"highlight\">\n    Set attribute as state = &quot;highlight&quot;\n  </ef-appstate-bar>\n</div>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"#wrapper {\n  padding: 1px;\n}\n\nef-appstate-bar {\n  margin-bottom: 10px;\n}","tagName":"pre"},{"text":"<ef-appstate-bar heading=\"Heading\">\n  Here is your content message.\n</ef-appstate-bar>\n\n<ef-appstate-bar heading=\"Info\" state=\"info\">\n  Set attribute as state = \"info\".\n</ef-appstate-bar>\n\n<ef-appstate-bar heading=\"Highlight\" state=\"highlight\">\n  Set attribute as state = \"highlight\".\n</ef-appstate-bar>","tagName":"pre"},{"text":"Right slot","tagName":"h3"},{"text":"The App State Bar provides a slot to display content at the right of bar. The slot can contain any kind of content e.g. normal text, links, or icons.","tagName":"p"},{"text":"<div id=\"wrapper\">\n  <ef-appstate-bar heading=\"Sample\" state=\"highlight\">\n    see on the right of bar\n    <a alt href=\"#\" slot=\"right\">\n      <ef-icon icon=\"like-empty\"></ef-icon>This is the Right slot\n    </a>\n  </ef-appstate-bar>\n</div>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"#wrapper {\n  padding: 1px;\n}\n\n[slot=\"right\"] {\n  display: flex;\n  align-items: center;\n}\n\n[slot=\"right\"] ef-icon {\n  padding-right: 3px;\n}","tagName":"pre"},{"text":"  <style>\n    #wrapper {\n      padding: 1px;\n    }\n    [slot=\"right\"] {\n      display: flex;\n      align-items: center;\n    }\n    [slot=\"right\"] ef-icon {\n      padding-right: 3px;\n    }\n  </style>","tagName":"pre"},{"text":"  <ef-appstate-bar heading=\"Sample\" state=\"highlight\">\n    See on the right of bar.\n    <a alt href=\"#\" slot=\"right\">\n      <ef-icon icon=\"like-empty\"></ef-icon>This is the Right slot</a>\n  </ef-appstate-bar>","tagName":"pre"},{"text":"Slots","tagName":"h2"},{"text":"API Reference","tagName":"h2"},{"text":"Attributes","tagName":"h3"},{"text":"Properties","tagName":"h3"},{"text":"Events","tagName":"h3"}]},{"title":"Loader","filename":"elements/loader.html","contents":[{"text":"<div class=\"container\">\n  <ef-loader></ef-loader>\n</div>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":".container {\n  height: 100px;\n}","tagName":"pre"},{"text":"ef-loader is an animated graphical component used to show that an app is performing an action in the background, such as downloading content.","tagName":"p"},{"text":"Basic usage","tagName":"h3"},{"text":"Add ef-loader into your document, and the animation will begin. When the loader is no longer needed, hide it with display: none.","tagName":"p"},{"text":"If the loader is only used once, it can be also be removed from the DOM ","tagName":"p"},{"text":"<div class=\"item\">\n  <ef-loader></ef-loader>\n</div>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":".item {\n  position: relative;\n  height: 50px;\n}","tagName":"pre"},{"text":"<ef-loader></ef-loader>","tagName":"pre"},{"text":"API Reference","tagName":"h2"}]},{"title":"Notification","filename":"elements/notification.html","contents":[{"text":"","tagName":"pre"},{"text":"var el;\nvar createNotification = function() {\n  el = document.createElement('ef-notification');\n  el.innerText = 'Notifcation received at ' + new Date().toLocaleTimeString();\n  el.addEventListener('dismiss', createNotification, { once: true });\n  document.body.appendChild(el);\n  el.updateStyles({\n    '--background-color': 'hsl(' + Math.random() * 360 + ', 50%, 50%)'\n  });\n};\ncreateNotification();","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"The notification bar is used to show informative content when something happens in the application.","tagName":"p"},{"text":"Standard Usage","tagName":"h3"},{"text":"ef-notification provides an out-of-the-box set of notification methods to use within an application.","tagName":"p"},{"text":"These methods work in a similar way to those provided by window.console.","tagName":"p"},{"text":"Make sure that the element and its theme is imported into your application, otherwise no notifications will be styled.","tagName":"p"},{"text":"import { info, confirm, warn, error } from '@refinitiv-ui/notification/lib/helpers';\n\n// Show an info notification\ninfo('Info Notification');\n\n// Show a confirmation notification\nconfirm('Confirmation Notification', 3000/* Show for 3 seconds */);\n\n// Show a warning notification\nwarn('Warning Notification', 5000/* Show for 5 seconds */);\n\n// Show an error notification\nerror('Error Notification', Infinity/* Show until user dismisses */);","tagName":"pre"},{"text":"Inserting HTML","tagName":"h3"},{"text":"When using the notification methods provided by the module, you can gain access to the created element using the returned result.","tagName":"p"},{"text":"import { info } from '@refinitiv-ui/notification';\n\nconst notification = info('Info Notification');\n\nnotification.innerHTML = 'Hello <strong>World</strong>!';","tagName":"pre"},{"text":"Using a custom background color","tagName":"h3"},{"text":"Custom background colors can be set using the --background-color variable.","tagName":"p"},{"text":"<ef-notification>I&apos;m a custom color!</ef-notification>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"ef-notification {\n  --background-color: #3344ff;\n}","tagName":"pre"},{"text":"ef-notification {\n  --background-color: #3344ff;\n}","tagName":"pre"},{"text":"Custom use of notifications","tagName":"h3"},{"text":"This element can be used natively, like any other element. Using notifications this way requires you to manage and position the element correctly within your application.","tagName":"p"},{"text":"<ef-notification>Hello Everyone! &#x1F44B;</ef-notification>\n<ef-notification confirm>Hello Everyone! &#x1F44B;</ef-notification>\n<ef-notification warning>Hello Everyone! &#x1F44B;</ef-notification>\n<ef-notification error>Hello Everyone! &#x1F44B;</ef-notification>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"<ef-notification>Hello Everyone! 👋</ef-notification>\n<ef-notification confirm>Hello Everyone! 👋</ef-notification>\n<ef-notification warning>Hello Everyone! 👋</ef-notification>\n<ef-notification error>Hello Everyone! 👋</ef-notification>","tagName":"pre"},{"text":"Application Error Notifications","tagName":"h3"},{"text":"During development, when the application is running on localhost or 127.0.0.1, application errors will be shown as a notification. This is to aid development and highlight any errors that may occur, so that they can be addressed before the application is deployed. These error messages will not be shown when your application is hosted in a non-dev environment.","tagName":"p"},{"text":"API Reference","tagName":"h2"},{"text":"Attributes","tagName":"h3"},{"text":"Properties","tagName":"h3"},{"text":"Methods","tagName":"h3"},{"text":"Events","tagName":"h3"}]},{"title":"Tooltip","filename":"elements/tooltip.html","contents":[{"text":"<div style=\"padding: 20px 0;\">\n  <ef-button cta title=\"Sweet! Here is tooltip text.\">Hover Me</ef-button>\n</div>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"Tooltip displays information when the user hovers over an item.","tagName":"p"},{"text":"Basic usage","tagName":"h3"},{"text":"Import the ef-tooltip component and use the title attribute, just like with a standard tooltip.","tagName":"p"},{"text":"<div class=\"wrapper\">\n  <abbr title=\"Don&apos;t Forget To Be Awesome\">DFTBA</abbr>\n  <abbr title=\"May The Force Be With You\">MTFBWY</abbr>\n  <abbr title=\"Element Framework\">ELF</abbr>\n</div>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":".wrapper {\n  padding: 40px 0;\n  display: flex;\n  align-items: center;\n}\n\n.wrapper>*:not(:last-child) {\n  margin-right: 30px;\n}","tagName":"pre"},{"text":"<abbr title=\"Don't Forget To Be Awesome\">DFTBA</abbr>\n<abbr title=\"May The Force Be With You\">MTFBWY</abbr>\n<abbr title=\"Element Framework\">ELF</abbr>","tagName":"pre"},{"text":"ef-tooltip overrides the default title attribute behavior of the browser","tagName":"p"},{"text":"Selector","tagName":"h3"},{"text":"ef-tooltip can be used for advanced use cases, such as specifying a position for tooltips, custom rendering, or displaying a tooltip only when certain conditions are met.","tagName":"p"},{"text":"To customize the behavior of ef-tooltip, use selector to specify the CSS selector for the elemens and tooltip to specify the text content of the tooltip.","tagName":"p"},{"text":"<div class=\"navigation\" style=\"padding: 40px 0;\">\n  <ef-button tooltip=\"Hooray!\">Hover Me</ef-button>\n  <!-- Tooltip will not show on this button as tooltip nor title is defined -->\n  <ef-button>No Tooltip</ef-button>\n</div>\n\n<ef-tooltip selector=\".navigation ef-button\"></ef-tooltip>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"<div class=\"navigation\">\n    <ef-button tooltip=\"Hooray!\">Hover Me</ef-button>\n    <!-- Tooltip will not show on this button as tooltip nor title is defined -->\n    <ef-button>No Tooltip</ef-button>\n</div>\n<ef-tooltip selector=\".navigation ef-button\"></ef-tooltip>","tagName":"pre"},{"text":"Positioning tooltips","tagName":"h3"},{"text":"By default, the tooltip position is based on the pointer coordinates (auto). However, the tooltip can be configured to display above, below, left, or right of the element.","tagName":"p"},{"text":"<div class=\"navigation\" style=\"padding: 40px 0;\">\n  <label above tooltip=\"Above tooltip\">Above</label>\n  <label below tooltip=\"Below tooltip\">Below</label>\n  <label left tooltip=\"Left tooltip\">Left</label>\n  <label right tooltip=\"Right tooltip\">Right</label>\n  <label auto tooltip=\"Auto tooltip\">Auto</label>\n</div>\n\n<ef-tooltip position=\"above\" selector=\".navigation label[above]\"></ef-tooltip>\n<ef-tooltip position=\"right\" selector=\".navigation label[right]\"></ef-tooltip>\n<ef-tooltip position=\"below\" selector=\".navigation label[below]\"></ef-tooltip>\n<ef-tooltip position=\"left\" selector=\".navigation label[left]\"></ef-tooltip>\n<ef-tooltip selector=\".navigation label[auto]\"></ef-tooltip>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":".navigation>* {\n  margin-right: 30px;\n}","tagName":"pre"},{"text":"<label above tooltip=\"Above tooltip\">Above</label>\n<label below tooltip=\"Below tooltip\">Below</label>\n<label left tooltip=\"Left tooltip\">Left</label>\n<label right tooltip=\"Right tooltip\">Right</label>\n<label auto tooltip=\"Auto tooltip\">Auto</label>\n\n<ef-tooltip position=\"above\" selector=\"label[above]\"></ef-tooltip>\n<ef-tooltip position=\"right\" selector=\"label[right]\"></ef-tooltip>\n<ef-tooltip position=\"below\" selector=\"label[below]\"></ef-tooltip>\n<ef-tooltip position=\"left\" selector=\"label[left]\"></ef-tooltip>\n<ef-tooltip selector=\"label[auto]\"></ef-tooltip>","tagName":"pre"},{"text":"Tooltip transition styles","tagName":"h3"},{"text":"The default tooltip transition is fade. To make tooltips display with a different transition style, use the transition-style attribute. Note: the transition style should be used rationally with tooltip position.","tagName":"p"},{"text":"<div class=\"navigation\">\n  <label fade tooltip=\"Fade\">Fade</label>\n  <label zoom tooltip=\"Zoom\">Zoom</label>\n  <label slide-down tooltip=\"Slide down\">Slide Down</label>\n  <label slide-up tooltip=\"Slide up\">Slide Up</label>\n  <label slide-left tooltip=\"Slide left\">Slide Left</label>\n  <label slide-right tooltip=\"Slide right\">Slide Right</label>\n</div>\n<div class=\"navigation\">\n  <label slide-right-up tooltip=\"Slide right up\">Slide Right Up</label>\n  <label slide-right-down tooltip=\"Slide right down\">Slide Right Down</label>\n  <label slide-left-up tooltip=\"Slide left up\">Slide Left Up</label>\n  <label slide-left-down tooltip=\"Slide left down\">Slide Left Down</label>\n</div>\n\n<ef-tooltip transition-style=\"fade\" selector=\".navigation label[fade]\"></ef-tooltip>\n<ef-tooltip transition-style=\"zoom\" selector=\".navigation label[zoom]\"></ef-tooltip>\n<ef-tooltip transition-style=\"slide-down\" position=\"below\" selector=\".navigation label[slide-down]\"></ef-tooltip>\n<ef-tooltip transition-style=\"slide-up\" position=\"above\" selector=\".navigation label[slide-up]\"></ef-tooltip>\n<ef-tooltip transition-style=\"slide-left\" position=\"left\" selector=\".navigation label[slide-left]\"></ef-tooltip>\n<ef-tooltip transition-style=\"slide-right\" position=\"right\" selector=\".navigation label[slide-right]\"></ef-tooltip>\n<ef-tooltip transition-style=\"slide-right-up\" position=\"right\" selector=\".navigation label[slide-right-up]\"></ef-tooltip>\n<ef-tooltip transition-style=\"slide-right-down\" position=\"right\" selector=\".navigation label[slide-right-down]\"></ef-tooltip>\n<ef-tooltip transition-style=\"slide-left-up\" position=\"left\" selector=\".navigation label[slide-left-up]\"></ef-tooltip>\n<ef-tooltip transition-style=\"slide-left-down\" position=\"left\" selector=\".navigation label[slide-left-down]\"></ef-tooltip>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":".navigation {\n  padding: 20px 0px;\n}\n\n.navigation>* {\n  margin-right: 30px;\n}","tagName":"pre"},{"text":"<ef-tooltip transition-style=\"fade\" selector=\".navigation label[fade]\"></ef-tooltip>\n<ef-tooltip transition-style=\"zoom\" selector=\".navigation label[zoom]\"></ef-tooltip>\n<ef-tooltip transition-style=\"slide-down\" position=\"below\" selector=\".navigation label[slide-down]\"></ef-tooltip>\n<ef-tooltip transition-style=\"slide-up\" position=\"above\" selector=\".navigation label[slide-up]\"></ef-tooltip>\n<ef-tooltip transition-style=\"slide-left\" position=\"left\" selector=\".navigation label[slide-left]\"></ef-tooltip>\n<ef-tooltip transition-style=\"slide-right\" position=\"right\" selector=\".navigation label[slide-right]\"></ef-tooltip>\n<ef-tooltip transition-style=\"slide-right-up\" position=\"right\" selector=\".navigation label[slide-right-up]\"></ef-tooltip>\n<ef-tooltip transition-style=\"slide-right-down\" position=\"right\" selector=\".navigation label[slide-right-down]\"></ef-tooltip>\n<ef-tooltip transition-style=\"slide-left-up\" position=\"left\" selector=\".navigation label[slide-left-up]\"></ef-tooltip>\n<ef-tooltip transition-style=\"slide-left-down\" position=\"left\" selector=\".navigation label[slide-left-down]\"></ef-tooltip>","tagName":"pre"},{"text":"Custom content","tagName":"h3"},{"text":"Custom content can be added to a tooltip instead of just text.","tagName":"p"},{"text":"<div class=\"navigation\" style=\"padding: 40px 0;\">\n  <ef-button>Hover Me</ef-button>\n</div>\n\n<ef-tooltip selector=\".navigation ef-button\">\n  <table>\n    <thead>\n      <tr>\n        <th>GOOGL.O</th>\n        <th>NFLX.O</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr>\n        <td style=\"color: green\">$1,030.45 (+0.2949%)</td>\n        <td style=\"color: red\">$266.98 (-1.3378%)</td>\n      </tr>\n    </tbody>\n  </table>\n</ef-tooltip>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"<div class=\"navigation\">\n    <ef-button>Hover Me</ef-button>\n</div>\n<ef-tooltip selector=\".navigation ef-button\">\n  <table>\n    <thead>\n      <tr>\n        <th>GOOGL.O</th>\n        <th>NFLX.O</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr>\n        <td style=\"color: green\">$1,030.45 (+0.2949%)</td>\n        <td style=\"color: red\">$266.98 (-1.3378%)</td>\n      </tr>\n    </tbody>\n  </table>\n</ef-tooltip>","tagName":"pre"},{"text":"Custom rendering","tagName":"h3"},{"text":"Use custom rendering to display HTML content in a tooltip. The content passed to the renderer function needs to be an HTMLElement object.","tagName":"p"},{"text":"Note: If title attribute is provided; or custom content of tooltip is specified, renderer will be ignored.","tagName":"p"},{"text":"<div style=\"padding: 60px 0;\">\n  <label class=\"symbol\" id=\"google\">GOOGL.O</label>\n  <label class=\"symbol\" id=\"facebook\">FB.O</label>\n  <label class=\"symbol\" id=\"netflix\">NFLX.O</label>\n</div>\n<ef-tooltip id=\"symbol-tooltip\" selector=\".symbol\"></ef-tooltip>","tagName":"pre"},{"text":"var tooltip = document.getElementById('symbol-tooltip');\ntooltip.renderer = function(target) {\n  var ret = document.createElement('div');\n  var title = document.createElement('div');\n  title.style.fontWeight = 'bold';\n  title.style.paddingBottom = '3px';\n  var price = document.createElement('div');\n  ret.appendChild(title);\n  ret.appendChild(price);\n\n  switch (target.id) {\n    case 'google':\n      title.innerText = 'Alphabet Inc';\n      price.innerText = '$1,030.45 (+0.2949%)';\n      price.style.color = 'green';\n      break;\n    case 'facebook':\n      title.innerText = 'Facebook Inc';\n      price.innerText = '$132.43 (+0.6689%)';\n      price.style.color = 'green';\n      break;\n    case 'netflix':\n      title.innerText = 'Netflix Inc';\n      price.innerText = '$266.98 (-1.3378%)';\n      price.style.color = 'red';\n      break;\n    default:\n      ret = null;\n      break;\n  }\n  return ret;\n}","tagName":"pre"},{"text":".symbol {\n  margin-right: 30px;\n}","tagName":"pre"},{"text":"<label class=\"symbol\" id=\"google\">GOOGL.O</label>\n<label class=\"symbol\" id=\"facebook\">FB.O</label>\n<label class=\"symbol\" id=\"netflix\">NFLX.O</label>\n<ef-tooltip id=\"symbol-tooltip\" selector=\".symbol\"></ef-tooltip>","tagName":"pre"},{"text":"<script>\n    var tooltip = document.getElementById('symbol-tooltip');\n    tooltip.renderer = function (target) {\n        var ret = document.createElement('div');\n        var title = document.createElement('div');\n        title.style.fontWeight = 'bold';\n        title.style.paddingBottom = '3px';\n        var price = document.createElement('div');\n        ret.appendChild(title);\n        ret.appendChild(price);\n\n        switch(target.id) {\n            case 'google':\n                title.innerText = 'Alphabet Inc';\n                price.innerText = '$1,030.45 (+0.2949%)';\n                price.style.color = 'green';\n                break;\n            case 'facebook':\n                title.innerText = 'Facebook Inc';\n                price.innerText = '$132.43 (+0.6689%)';\n                price.style.color = 'green';\n                break;\n            case 'netflix':\n                title.innerText = 'Netflix Inc';\n                price.innerText = '$266.98 (-1.3378%)';\n                price.style.color = 'red';\n                break;\n            default:\n                ret = null;\n                break;\n        }\n        return ret;\n    }\n</script>","tagName":"pre"},{"text":"A custom renderer can also be applied to only show tooltips when the text is too long and does not fit the container.","tagName":"p"},{"text":".item {\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n}","tagName":"pre"},{"text":"var tooltip = document.getElementById('item-tooltip');\n\ntooltip.renderer = function (target) {\n  if (target.scrollWidth - target.clientWidth === 0) {\n    return null;\n  }\n  // return itself as content of tooltip\n  return target;\n};","tagName":"pre"},{"text":"Conditioning tooltip","tagName":"h3"},{"text":"Use custom condition to trigger a tooltip only when a condition is met.","tagName":"p"},{"text":"<div style=\"padding: 30px 0;\">\n  <ef-text-field style=\"width:400px\" id=\"amount\" tooltip=\"Value must be number and at least 100\" placeholder=\"Input amount. Tooltip will show when input invalid.\"></ef-text-field>\n  <ef-tooltip id=\"amount-tooltip\"></ef-tooltip>\n</div>","tagName":"pre"},{"text":"var input = document.getElementById('amount');\nvar tooltip = document.getElementById('amount-tooltip');\nvar isValid = function(val) {\n  return isNaN(parseInt(val, 10)) || parseInt(val, 10) < 100;\n};\n\ninput.addEventListener('value-changed', function() {\n  input.error = isValid(input.value);\n});\n\ntooltip.condition = function(target, paths) {\n  return target === input && isValid(target.value);\n};","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"<ef-text-field id=\"amount\" tooltip=\"Value must be number and at least 100\" placeholder=\"Input amount. Tooltip will show when input invalid.\"></ef-text-field>\n<ef-tooltip id=\"amount-tooltip\"></ef-tooltip>","tagName":"pre"},{"text":"var input = document.getElementById('amount');\nvar tooltip = document.getElementById('amount-tooltip');\nvar isValid = function (val) {\n  return isNaN(parseInt(val, 10)) || parseInt(val, 10) < 100;\n};\n\ninput.addEventListener('value-changed', function () {\n  input.error = isValid(input.value);\n});\n\ntooltip.condition = function (target, paths) {\n  return target === input && isValid(target.value);\n};","tagName":"pre"},{"text":"Default tooltip","tagName":"h2"},{"text":"It is recommended to have only one instance of tooltip per page. A default tooltip element is always included when the developer adds ef-tooltip to an application.","tagName":"p"},{"text":"Use addTooltipCondition and removeTooltipCondition to reuse the default tooltip:","tagName":"p"},{"text":"import { addTooltipCondition, removeTooltipCondition } from '@refinitiv-ui/tooltip';\n\n// Show tooltip for elements that have \"ref\" attribute\nconst condition = target => target.hasAttribute('ref');\n\n// Show tooltip content\nconst render = target => `My reference is: ${target.getAttribute('ref')}`;\n\naddTooltipCondition(condition, render);\n\n// Do not forget to remove tooltip condition once not required to avoid memory leaks\nremoveTooltipCondition(condition);","tagName":"pre"},{"text":"Overflow tooltip","tagName":"h3"},{"text":"Overflow tooltip reuses the concept of Default tooltip to display a tooltip when text overflows:","tagName":"p"},{"text":"<style>\n  .overflow {\n    white-space: nowrap;\n    width: 20px;\n    overflow: hidden;\n    text-overflow: ellipsis;\n  }\n</style>\n<div class=\"overflow\">Very long text with overflow</div>","tagName":"pre"},{"text":"import { registerOverflowTooltip } from '@refinitiv-ui/tooltip';\nconst overflowElement = document.querySelector('.overflow');\nregisterOverflowTooltip(overflowElement);","tagName":"pre"},{"text":"Time Delay","tagName":"h2"},{"text":"A timer to show or hide a tooltip can be customized using the --show-delay and --hide-delay CSS variables.","tagName":"p"},{"text":"\nCSS Variables Name\nDescription\n","tagName":"tr"},{"text":"\n--show-delay\nTime to show tooltip when mouse hovers, in milliseconds\n","tagName":"tr"},{"text":"\n--hide-delay\nTime to hide tooltip when mouse leaves, in milliseconds\n","tagName":"tr"},{"text":"Note: setting these variables to small values can cause performance issues.","tagName":"p"},{"text":"<div style=\"padding: 30px 0;\">\n  <label id=\"delay-label\" tooltip=\"Hello! I will hide within 2 seconds.\">Hover me. and wait for 3 second</label>\n  <ef-tooltip class=\"delay\" selector=\"#delay-label\"></ef-tooltip>\n</div>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":".delay {\n  --show-delay: 3000ms;\n  --hide-delay: 2000ms;\n}","tagName":"pre"},{"text":".delay {\n  --show-delay: 3000ms;\n  --hide-delay: 2000ms;\n}","tagName":"pre"},{"text":"<label id=\"delay-label\" tooltip=\"Hello! 2 seconds, I will hide.\">Hover me. and wait 3 second</label>\n<ef-tooltip class=\"delay\" selector=\"#delay-label\"></ef-tooltip>","tagName":"pre"},{"text":"API Reference","tagName":"h2"},{"text":"Attributes","tagName":"h3"},{"text":"Properties","tagName":"h3"}]},{"title":"Canvas","filename":"elements/canvas.html","contents":[{"text":"<ef-canvas></ef-canvas>","tagName":"pre"},{"text":"var canvas = document.querySelector('ef-canvas');\n\nvar x;\nvar y;\nvar tShift;\nvar amplitude;\nvar frequency;\nvar tStart = performance.now();\nvar frameId;\n\nvar loop = (t) => {\n\n  cancelAnimationFrame(frameId);\n\n  var ctx = canvas.getContext('2d');\n  var style = getComputedStyle(canvas);\n\n  tShift = (t - tStart) / 1000;\n  amplitude = canvas.height * 0.8;\n  frequency = 15 / canvas.width;\n  frequency = frequency < 0.02 ? 0.02 : frequency > 0.03 ? 0.03 : frequency;\n  ctx.lineWidth = 7;\n  ctx.lineJoin = 'round';\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  ctx.beginPath();\n  ctx.strokeStyle = 'hsl(' + (tShift + 2) * 10 + ', 100%, 50%)';\n  for (x = -ctx.lineWidth; x < canvas.width + ctx.lineWidth * 2; x++) {\n    y = (Math.sin(x * frequency + tShift) * amplitude / 2 +\n      canvas.height / 2 * 0.8) + canvas.height * 0.1; // 10% offset\n    if (x === -ctx.lineWidth) {\n      ctx.moveTo(x, x % 2 ? canvas.height : y);\n    }\n    ctx.lineTo(x, y);\n  }\n  ctx.stroke();\n\n  ctx.fillStyle = style.getPropertyValue('color');\n  ctx.font = style.getPropertyValue('font-size') + ' ' + style.getPropertyValue('font-family');\n  ctx.fillText(canvas.tagName, canvas.width / 2 - ctx.measureText(canvas.tagName).width / 2, canvas.height / 2 + 30);\n\n  frameId = window.requestAnimationFrame(loop);\n}\n\ncanvas.addEventListener('resize', function() {\n  loop(performance.now());\n});","tagName":"pre"},{"text":"ef-canvas {\n  height: 200px;\n  width: 100%;\n  font-size: 60px;\n}","tagName":"pre"},{"text":"Styling","tagName":"h2"},{"text":"ef-canvas starts out like any other block element, in that it fills its container width and has a default height of 0px.","tagName":"p"},{"text":"In order to be able to see anything, we must set its size. To do this, we just use CSS.Note: There is no need for setting the width and height attributes on the element.","tagName":"p"},{"text":"ef-canvas {\n  width: 600px;\n  height: 250px;\n}","tagName":"pre"},{"text":"Rendering","tagName":"h3"},{"text":"ef-canvas works like the normal HTML5 Canvas element. To use it, you must first get its context.","tagName":"p"},{"text":"Unlike the normal canvas, ef-canvas only supports CanvasRenderingContext2D, and therefore instantly provides a context object for you to use.","tagName":"p"},{"text":"Basic example","tagName":"h3"},{"text":"<ef-canvas></ef-canvas>\n\n<script type=\"text/javascript\">\n\n  var canvas = document.querySelector('ef-canvas');\n  var ctx = canvas.ctx || canvas.context || canvas.getContext('2d'); // All valid\n\n  var draw = function () {\n    ctx.fillStyle = '#888';\n    ctx.fillRect(10, 10, 100, 100);\n  }\n\n  // Draw on resize\n  canvas.addEventListener('resize', draw);\n\n</script>","tagName":"pre"},{"text":"Animation loop","tagName":"h3"},{"text":"ef-canvas provides an automatic animation loop. This loop can either be enabled constantly or only when the canvas needs to be modified/animated.","tagName":"p"},{"text":"To use the animation loop, just set the autoloop attribute and listen to the frame event.","tagName":"p"},{"text":"<ef-canvas autoloop></ef-canvas>\n\n<script type=\"text/javascript\">\n\n  var canvas = document.querySelector('ef-canvas');\n  var ctx = canvas.ctx || canvas.context || canvas.getContext('2d'); // All valid\n\n  var x;\n  var y;\n  var factor;\n\n  var draw = function (e) {\n\n    // Clear the canvas\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    // Do some drawing\n    factor = e.detail.timestamp / 100 % 100 / 100;\n    x = factor * canvas.width - 100 + 100 * factor;\n    y = canvas.height / 2;\n    ctx.fillStyle = '#888';\n    ctx.fillRect(x, y - 50, 100, 100);\n\n  }\n\n  // Draw on every animation frame\n  canvas.addEventListener('frame', draw);\n\n</script>","tagName":"pre"},{"text":"API Reference","tagName":"h2"},{"text":"Attributes","tagName":"h3"},{"text":"Properties","tagName":"h3"},{"text":"Methods","tagName":"h3"},{"text":"Events","tagName":"h3"}]},{"title":"Chart","filename":"elements/chart.html","contents":[{"text":"<ef-chart id=\"combo\"></ef-chart>","tagName":"pre"},{"text":"var comboDatasets = [{\n  type: 'line',\n  label: 'Price',\n  data: [37.40, 36.60, 40.48, 41.13, 42.05, 40.42],\n  yAxisID: 'y-axis-1',\n  fill: true // not fill the area under the line\n}, {\n  type: 'bar',\n  label: 'Volume',\n  data: [8.09, 8.79, 7.77, 6.77, 6.52, 6.77],\n  yAxisID: 'y-axis-2'\n}];\nvar combo = document.getElementById('combo');\ncombo.config = {\n  type: 'bar',\n  data: {\n    labels: ['January', 'February', 'March', 'April', 'May', 'June'],\n    datasets: comboDatasets\n  },\n  options: {\n    scales: {\n      yAxes: [{\n        display: true,\n        position: 'left',\n        id: 'y-axis-1',\n        ticks: {\n          min: 36,\n          max: 43,\n          stepSize: 1\n        },\n        scaleLabel: {\n          display: true,\n          labelString: 'Price ($)'\n        }\n      }, {\n        display: true,\n        position: 'right',\n        id: 'y-axis-2',\n        gridLines: {\n          drawOnChartArea: false // only want the grid lines for one axis to show up\n        },\n        ticks: {\n          min: 6.0,\n          max: 9.5,\n          stepSize: 0.5,\n          callback: function(label, index) {\n            var val = label.toString();\n            if (val.indexOf('.') === -1) {\n              val += '.0';\n            }\n            return val + 'M';\n          }\n        },\n        scaleLabel: {\n          display: true,\n          labelString: 'Volume'\n        }\n      }]\n    },\n    tooltips: {\n      callbacks: {\n        title: function(tooltipItems, data) {\n          return 'TRI.N';\n        },\n        label: function(tooltipItem, data) {\n          var yLabel = tooltipItem.yLabel;\n          if (tooltipItem.datasetIndex === 0) {\n            return 'Price: ' + yLabel;\n          } else {\n            return 'Volume: ' + yLabel + 'M';\n          }\n        }\n      }\n    }\n  }\n};","tagName":"pre"},{"text":"ef-chart {\n  max-width: 600px;\n}","tagName":"pre"},{"text":"ef-chart is a charting component that leverages the Chart.js library. See Chart.js documentation for full chart configuration.","tagName":"p"},{"text":"Chart.js","tagName":"a"},{"text":"documentation","tagName":"a"},{"text":"The styling of ef-chart is inherited from the theme, but you can customize styling at the individual chart level.","tagName":"p"},{"text":"Creating a chart","tagName":"h3"},{"text":"A chart can be created by passing a configuration to the config attribute. The configuration object is identical to the chartjs configuration.","tagName":"p"},{"text":"<ef-chart id=\"line\"></ef-chart>","tagName":"pre"},{"text":"var line = document.getElementById('line');\nline.config = {\n  type: 'line',\n  data: {\n    labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\n    datasets: [{\n      label: 'Price',\n      data: [37.4, 36.6, 40.48, 41.13, 42.05, 40.42, 43.09]\n    }]\n  },\n  options: {\n    title: {\n      text: 'Line chart'\n    },\n    legend: {\n      display: true\n    },\n    scales: {\n      yAxes: [{\n        scaleLabel: {\n          display: true,\n          labelString: 'Price ($)'\n        }\n      }]\n    },\n    tooltips: {\n      callbacks: {\n        label: function(tooltipItem, data) {\n          return tooltipItem.yLabel + ' $';\n        }\n      }\n    }\n  }\n};","tagName":"pre"},{"text":"ef-chart {\n  max-width: 600px;\n}","tagName":"pre"},{"text":"<ef-chart id=\"line\"></ef-chart>\n\n<script>\n  var line = document.getElementById('line');\n  line.config = {\n    type: 'line',\n    data: {\n      labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\n      datasets: [{\n        label: 'Price',\n        data: [37.4, 36.6, 40.48, 41.13, 42.05, 40.42, 43.09]\n      }]\n    },\n    options: {\n      title: {\n        text: 'Line chart'\n      },\n      legend: {\n        display: false\n      },\n      scales: {\n        yAxes: [{\n          scaleLabel: {\n            display: true,\n            labelString: 'Price ($)'\n          }\n        }]\n      },\n      tooltips: {\n        callbacks: {\n          label: function (tooltipItem, data) {\n            return tooltipItem.yLabel + ' $';\n          }\n        }\n      }\n    }\n  };\n</script>","tagName":"pre"},{"text":"Update chart data or configurations","tagName":"h3"},{"text":"To update chart datasets or configurations, you can modify the value in the config property and then call updateChart().","tagName":"p"},{"text":"However, you do not have to call updateChart() if you set a new config object for the chart.","tagName":"p"},{"text":"<ef-chart id=\"line\"></ef-chart>","tagName":"pre"},{"text":"var random = function(number) {\n  var val = [];\n  for (var i = 0; i < number; i++) {\n    val.push(Math.floor(Math.random() * 101));\n  }\n  return val;\n}\nvar line = document.getElementById('line');\nline.config = {\n  type: 'line',\n  data: {\n    labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\n    datasets: [{\n      label: 'Price',\n      data: [37.4, 36.6, 40.48, 41.13, 42.05, 40.42, 43.09],\n      lineTension: 0.3\n    }]\n  },\n  options: {\n    legend: {\n      display: false\n    },\n    scales: {\n      yAxes: [{\n        scaleLabel: {\n          display: true,\n          labelString: 'Price ($)'\n        },\n        ticks: {\n          beginAtZero: true,\n          steps: 10,\n          max: 100\n        }\n      }]\n    },\n    tooltips: {\n      callbacks: {\n        label: function(tooltipItem, data) {\n          return tooltipItem.yLabel + ' $';\n        }\n      }\n    }\n  }\n};\nsetInterval(function() {\n  line.config.data.datasets[0].data = random(7)\n  line.updateChart();\n}, 1200);","tagName":"pre"},{"text":"ef-chart {\n  max-width: 600px;\n}","tagName":"pre"},{"text":"<ef-chart id=\"line\"></ef-chart>\n\n<script>\nvar line = document.getElementById('line');\nline.config.data.datasets[0].data = [31.4, 6.6, 43.48, 40.13, 44.05, 46.42, 47.09]\nline.updateChart();\n</script>","tagName":"pre"},{"text":"You can also control animation on the update process by using additional configurations. You can find more details at Chart.js API.","tagName":"p"},{"text":"Chart.js API","tagName":"a"},{"text":"line.updateChart({\n    duration: 800,\n    lazy: false, // If true, the animation can be interrupted by other animation\n    easing: 'easeOutBounce'\n});","tagName":"pre"},{"text":"Chartjs instance","tagName":"h3"},{"text":"A chart instance of chartjs or canvas can be accessed using the chart property of ef-chart.","tagName":"p"},{"text":"var line = document.getElementById('line');\nconsole.log(line.chart); // instance of chartjs\nconsole.log(line.chart.canvas) // canvas of instance of chartjs","tagName":"pre"},{"text":"Doughnut with center label","tagName":"h3"},{"text":"To create a doughnut with a center label, define the plugins.centerLabel property in options.","tagName":"p"},{"text":"<ef-chart id=\"doughnut-center-label\"></ef-chart>","tagName":"pre"},{"text":"var doughnutDataSets = [{\n  data: [36, 22, 16, 8.2, 5.7, 12],\n}];\nvar doughnut = document.getElementById('doughnut-center-label');\ndoughnut.config = {\n  type: 'doughnut',\n  data: {\n    labels: ['Americas', 'Europe', 'Greater China', 'Japan', 'Asia Pacific', 'Retail'],\n    datasets: doughnutDataSets,\n  },\n  options: {\n    onHover: function(event, chartItem) {\n      // console.log('hover: ', chartItem);\n    },\n    onClick: function(event, chartItem) {\n      // console.log('click: ', chartItem);\n    },\n    plugins: {\n      centerLabel: {\n        defaultText: [{\n            label: 'AAPL.O',\n            bold: true\n          },\n          {\n            label: 'Segments in 2014'\n          }\n        ],\n        onRenderLabel: function(chart, chartItems) {\n          if (chartItems.length) {\n            const chartItem = chartItems[0];\n            const data = chart.data;\n            const title = data.labels[chartItem._index];\n            const value = data.datasets[chartItem._datasetIndex].data[chartItem._index];\n            const total = data.datasets[chartItem._datasetIndex].data.reduce(function(total, num) { return total + num; });\n            const percent = parseFloat(parseFloat(value) / parseFloat(total)).toFixed(2);\n\n            return [{\n                label: title,\n                bold: true\n              },\n              {\n                label: value\n              }, {\n                label: percent + ' %'\n              }\n            ]\n          }\n        },\n        selected: {\n          datasetIndex: 0,\n          index: 4\n        },\n      },\n    },\n    tooltips: {\n      enabled: false\n    }\n  }\n};","tagName":"pre"},{"text":"ef-chart {\n  max-width: 600px;\n}","tagName":"pre"},{"text":"var doughnut = document.getElementById('doughnut-center-label');\ndoughnut.config = {\n  type: 'doughnut',\n  data: {\n    ...\n  },\n  options: {\n    plugins: {\n      centerLabel: {\n        // default center label, pass multiple object to show multiple line\n        defaultText: [\n            {\n              label: 'AAPL.O',\n              bold: true\n            },\n            {\n              label: 'Segments in 2014'\n            }\n        ],\n        // define text to show at center\n        onRenderLabel: function (chart, chartItems) {\n          if (chartItems.length) {\n            const chartItem = chartItems[0];\n            const data = chart.data;\n            const title = data.labels[chartItem._index];\n            const value = data.datasets[chartItem._datasetIndex].data[chartItem._index];\n            const total = data.datasets[chartItem._datasetIndex].data.reduce((total, num) function(total, num) { return total + num; });\n            const percent = parseFloat(parseFloat(value) / parseFloat(total)).toFixed(2);\n\n            return [{\n              label: title,\n              bold: true\n            },\n            {\n              label: value\n            }, {\n              label: percent + ' %'\n            }];\n          }\n        },\n        selected: {\n          datasetIndex: 0,\n          index: 4\n        },\n      },\n    },\n    ...\n  }\n};","tagName":"pre"},{"text":"You can add onHover and onClick to the chart config to handle when users hover or click on each chart segment.","tagName":"p"},{"text":"doughnut.config = {\n  type: 'doughnut',\n  data: {\n    ...\n  },\n  options: {\n    onHover: function (event, chartItem) {\n      console.log('hover: ', chartItem);\n    },\n    onClick: function (event, chartItem) {\n      console.log('click: ', chartItem);\n    },\n    plugins: {\n      ...\n    }\n  }\n};","tagName":"pre"},{"text":"Customize colors and font size","tagName":"h3"},{"text":"Colors and font size of the center label can be customized using CSS.","tagName":"p"},{"text":"\nCSS Variable Name\nDescription\n","tagName":"tr"},{"text":"\n--doughnut-center-text-color\nCustom text color of center label\n","tagName":"tr"},{"text":"\n--doughnut-center-background-color\nCustom background color of center label\n","tagName":"tr"},{"text":"\n--doughnut-center-font-size\nCustom font size percentage of center label\n","tagName":"tr"},{"text":"Chart types","tagName":"h3"},{"text":"You can create various chart types as per chartjs configurations. Samples are on this page.","tagName":"p"},{"text":"this page","tagName":"a"},{"text":"<ef-chart id=\"multipleLines\"></ef-chart>","tagName":"pre"},{"text":"var multipleLines = document.getElementById('multipleLines');\nvar multipleLinesDatasets = [{\n  label: '.DJI',\n  data: [16466, 16517, 17685, 17774, 17787, 17930, 18432],\n  fill: false,\n  pointBackgroundColor: 'transparent',\n  pointBorderColor: 'transparent'\n}, {\n  label: '.N225',\n  data: [17518, 16027, 16759, 16666, 17235, 15576, 16569],\n  fill: false,\n  pointBackgroundColor: 'transparent',\n  pointBorderColor: 'transparent'\n}, {\n  label: '.FTMIB',\n  data: [18657, 17623, 18117, 18601, 18025, 16198, 16847],\n  fill: false,\n  pointBackgroundColor: 'transparent',\n  pointBorderColor: 'transparent'\n}, {\n  label: '.HSI',\n  data: [19683, 19112, 20777, 21067, 20815, 20794, 21891],\n  fill: false,\n  pointBackgroundColor: 'transparent',\n  pointBorderColor: 'transparent'\n}];\nmultipleLines.config = {\n  type: 'line',\n  data: {\n    labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\n    datasets: multipleLinesDatasets\n  },\n  options: {\n    scales: {\n      yAxes: [{\n        ticks: {\n          stepSize: 1000,\n          callback: function(label, index) {\n            return label.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n          }\n        }\n      }]\n    },\n    tooltips: {\n      callbacks: {\n        title: function(tooltipItems, data) {\n          return data.datasets[tooltipItems[0].datasetIndex].label;\n        },\n        label: function(tooltipItem, data) {\n          var month = tooltipItem.xLabel;\n          var value = tooltipItem.yLabel;\n          value = value.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n          return month + ': ' + value;\n        }\n      }\n    }\n  }\n};","tagName":"pre"},{"text":"ef-chart {\n  max-width: 600px;\n}","tagName":"pre"},{"text":"<ef-chart id=\"bar\"></ef-chart>","tagName":"pre"},{"text":"var bar = document.getElementById('bar');\nbar.config = {\n  type: 'bar',\n  data: {\n    labels: ['2010', '2011', '2012', '2013'],\n    datasets: [{\n      label: 'GOOGL.O',\n      data: [29321, 37905, 50175, 59825]\n    }, {\n      label: 'AAPL.O',\n      data: [65225, 108249, 156508, 170910]\n    }, {\n      label: 'MSFT.O',\n      data: [62484, 69943, 73723, 77849]\n    }]\n  },\n  options: {\n    scales: {\n      yAxes: [{\n        ticks: {\n          min: 0,\n          max: 180000,\n          stepSize: 30000,\n          callback: function(label, index) {\n            return label.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n          }\n        },\n        scaleLabel: {\n          display: true,\n          labelString: 'Revenue (in millions $)'\n        }\n      }]\n    },\n    tooltips: {\n      callbacks: {\n        title: function(tooltipItems, data) {\n          return 'Revenue';\n        },\n        label: function(tooltipItem, data) {\n          var year = tooltipItem.xLabel;\n          var rev = tooltipItem.yLabel;\n          rev = rev.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n          return year + ': ' + rev;\n        }\n      }\n    }\n  }\n};","tagName":"pre"},{"text":"ef-chart {\n  max-width: 600px;\n}","tagName":"pre"},{"text":"<ef-chart id=\"stackedBar\"></ef-chart>","tagName":"pre"},{"text":"var stackedBar = document.getElementById('stackedBar');\nstackedBar.config = {\n  type: 'bar',\n  data: {\n    labels: ['2010', '2011', '2012', '2013'],\n    datasets: [{\n      label: 'GOOGL.O',\n      data: [29321, 37905, 50175, 59825]\n    }, {\n      label: 'AAPL.O',\n      data: [65225, 108249, 156508, 170910]\n    }, {\n      label: 'MSFT.O',\n      data: [62484, 69943, 73723, 77849]\n    }]\n  },\n  options: {\n    scales: {\n      xAxes: [{\n        stacked: true\n      }],\n      yAxes: [{\n        stacked: true,\n        ticks: {\n          min: 0,\n          stepSize: 50000,\n          callback: function(label, index) {\n            return label.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n          }\n        },\n        scaleLabel: {\n          display: true,\n          labelString: 'Revenue (in millions $)'\n        }\n      }]\n    },\n    tooltips: {\n      callbacks: {\n        title: function(tooltipItems, data) {\n          return data.datasets[tooltipItems[0].datasetIndex].label;\n        },\n        label: function(tooltipItem, data) {\n          var year = tooltipItem.xLabel;\n          var rev = tooltipItem.yLabel;\n          rev = rev.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n          return year + ': ' + rev;\n        }\n      }\n    }\n  }\n};","tagName":"pre"},{"text":"ef-chart {\n  max-width: 600px;\n}","tagName":"pre"},{"text":"<ef-chart id=\"combo\"></ef-chart>","tagName":"pre"},{"text":"var comboDatasets = [{\n  type: 'line',\n  label: 'Price',\n  data: [37.40, 36.60, 40.48, 41.13, 42.05, 40.42],\n  yAxisID: 'y-axis-1',\n  fill: true // not fill the area under the line\n}, {\n  type: 'bar',\n  label: 'Volume',\n  data: [8.09, 8.79, 7.77, 6.77, 6.52, 6.77],\n  yAxisID: 'y-axis-2'\n}];\nvar combo = document.getElementById('combo');\ncombo.config = {\n  type: 'bar',\n  data: {\n    labels: ['January', 'February', 'March', 'April', 'May', 'June'],\n    datasets: comboDatasets\n  },\n  options: {\n    scales: {\n      yAxes: [{\n        display: true,\n        position: 'left',\n        id: 'y-axis-1',\n        ticks: {\n          min: 36,\n          max: 43,\n          stepSize: 1\n        },\n        scaleLabel: {\n          display: true,\n          labelString: 'Price ($)'\n        }\n      }, {\n        display: true,\n        position: 'right',\n        id: 'y-axis-2',\n        gridLines: {\n          drawOnChartArea: false // only want the grid lines for one axis to show up\n        },\n        ticks: {\n          min: 6.0,\n          max: 9.5,\n          stepSize: 0.5,\n          callback: function(label, index) {\n            var val = label.toString();\n            if (val.indexOf('.') === -1) {\n              val += '.0';\n            }\n            return val + 'M';\n          }\n        },\n        scaleLabel: {\n          display: true,\n          labelString: 'Volume'\n        }\n      }]\n    },\n    tooltips: {\n      callbacks: {\n        title: function(tooltipItems, data) {\n          return 'TRI.N';\n        },\n        label: function(tooltipItem, data) {\n          var yLabel = tooltipItem.yLabel;\n          if (tooltipItem.datasetIndex === 0) {\n            return 'Price: ' + yLabel;\n          } else {\n            return 'Volume: ' + yLabel + 'M';\n          }\n        }\n      }\n    }\n  }\n};","tagName":"pre"},{"text":"ef-chart {\n  max-width: 600px;\n}","tagName":"pre"},{"text":"<ef-chart id=\"pie\"></ef-chart>","tagName":"pre"},{"text":"var pieDatasets = [{\n  data: [36, 22, 16, 8.2, 5.7, 12]\n}];\nvar pie = document.getElementById('pie');\npie.config = {\n  type: 'pie',\n  data: {\n    labels: ['Americas', 'Europe', 'Greater china', 'Japan', 'Asia Pacific', 'Retail'],\n    datasets: pieDatasets\n  },\n  options: {\n    tooltips: {\n      callbacks: {\n        label: function(tooltipItem, data) {\n          var title = data.labels[tooltipItem.index];\n          var result = data.datasets[0].data[tooltipItem.index];\n          return title + ': ' + result + '%';\n        }\n      }\n    }\n  }\n};","tagName":"pre"},{"text":"ef-chart {\n  max-width: 600px;\n}","tagName":"pre"},{"text":"<ef-chart id=\"doughnut\"></ef-chart>","tagName":"pre"},{"text":"var doughnutDataSets = [{\n  data: [36, 22, 16, 8.2, 5.7, 12]\n}];\nvar doughnut = document.getElementById('doughnut');\ndoughnut.config = {\n  type: 'doughnut',\n  data: {\n    labels: ['Americas', 'Europe', 'Greater China', 'Japan', 'Asia Pacific', 'Retail'],\n    datasets: doughnutDataSets\n  },\n  options: {\n    tooltips: {\n      callbacks: {\n        label: function(tooltipItem, data) {\n          var title = data.labels[tooltipItem.index];\n          var result = data.datasets[0].data[tooltipItem.index];\n          return title + ': ' + result + '%';\n        }\n      }\n    }\n  }\n};","tagName":"pre"},{"text":"ef-chart {\n  max-width: 600px;\n}","tagName":"pre"},{"text":"<div>\n  <ef-chart id=\"doughnut\"></ef-chart>\n</div>","tagName":"pre"},{"text":"var doughnutDataSets = [{\n  data: [36, 22, 16, 8.2, 5.7, 12]\n}];\nvar doughnut = document.getElementById('doughnut');\ndoughnut.config = {\n  type: 'doughnut',\n  data: {\n    datasets: doughnutDataSets\n  },\n  options: {\n    plugins: {\n      centerLabel: {\n        selected: {\n          index: 2\n        },\n        onRenderLabel: function(chart, chartItems) {\n          if (chartItems.length) {\n            const chartItem = chartItems[0];\n            const data = chart.data;\n            const value = data.datasets[chartItem._datasetIndex].data[chartItem._index];\n            const total = data.datasets[chartItem._datasetIndex].data.reduce(\n              function(total, num) {\n                return (total + num);\n              });\n            const percent = parseFloat(parseFloat(value) / parseFloat(total)).toFixed(2);\n\n            return [{\n              label: percent * 100,\n              bold: true\n            }];\n          }\n        }\n      }\n    },\n    tooltips: {\n      enabled: false\n    }\n  }\n};","tagName":"pre"},{"text":"ef-chart {\n  width: 150px;\n  height: 150px;\n  --doughnut-center-text-color: #ffffff;\n  --doughnut-center-background-color: #4caf50;\n  --doughnut-center-font-size: 70%;\n}\n\ndiv {\n  display: flex;\n  justify-content: center;\n  width: 500px;\n}","tagName":"pre"},{"text":"<ef-chart id=\"timeScale\"></ef-chart>","tagName":"pre"},{"text":"var timeScale = document.getElementById('timeScale');\ntimeScale.config = {\n  type: 'line',\n  data: {\n    labels: [\n      new Date(2016, 8, 7, 10, 0, 0),\n      new Date(2016, 8, 7, 11, 0, 0),\n      new Date(2016, 8, 7, 12, 0, 0),\n      new Date(2016, 8, 7, 13, 0, 0),\n      new Date(2016, 8, 7, 14, 0, 0),\n      new Date(2016, 8, 7, 15, 0, 0),\n      new Date(2016, 8, 7, 16, 0, 0),\n      new Date(2016, 8, 7, 17, 0, 0)\n    ],\n    datasets: [{\n      label: 'Price',\n      data: [107.53, 107.32, 107.35, 107.41, 107.56, 107.23, 108.37, 108.36]\n    }]\n  },\n  options: {\n    legend: {\n      display: false // Not display legend\n    },\n    scales: {\n      xAxes: [{\n        type: 'time', // Set type of scale as time\n        time: {\n          displayFormats: {\n            hour: 'hA' // Set custom format for hour unit\n          },\n          unit: 'hour',\n          tooltipFormat: 'D MMM YYYY - hA'\n        }\n      }],\n      yAxes: [{\n        scaleLabel: {\n          display: true,\n          labelString: 'Price ($)'\n        }\n      }]\n    },\n    tooltips: {\n      callbacks: {\n        label: function(tooltipItem, data) {\n          var result = data.datasets[0].data[tooltipItem.index];\n          return 'Price: $' + result;\n        }\n      }\n    }\n  }\n};","tagName":"pre"},{"text":"ef-chart {\n  max-width: 600px;\n}","tagName":"pre"},{"text":"<ef-chart id=\"scatterplot\"></ef-chart>","tagName":"pre"},{"text":"var scatterplot = document.getElementById('scatterplot');\nscatterplot.config = {\n  type: 'line',\n  data: {\n    datasets: [{\n      data: [\n        { x: 37.04, y: 72.88 },\n        { x: 33.16, y: 74.59 },\n        { x: 29.42, y: 77.75 },\n        { x: 32.19, y: 78.10 },\n        { x: 33.62, y: 75.46 },\n        { x: 30.89, y: 77.51 },\n        { x: 29.44, y: 78.34 },\n        { x: 29.64, y: 77.02 },\n        { x: 32.78, y: 76.13 },\n        { x: 35.92, y: 71.92 },\n        { x: 38.50, y: 69.86 },\n        { x: 39.44, y: 68.50 },\n        { x: 39.46, y: 68.31 },\n        { x: 36.79, y: 67.64 },\n        { x: 39.72, y: 67.13 },\n        { x: 40.36, y: 66.41 },\n        { x: 43.73, y: 66.37 },\n        { x: 45.92, y: 64.69 },\n        { x: 44.66, y: 65.85 },\n        { x: 46.21, y: 65.53 },\n        { x: 47.75, y: 66.73 },\n        { x: 49.33, y: 65.82 },\n        { x: 48.62, y: 65.61 },\n        { x: 49.07, y: 65.23 },\n        { x: 47.98, y: 64.75 },\n        { x: 47.64, y: 64.74 }\n      ],\n      pointRadius: 1\n    }]\n  },\n  options: {\n    showLines: false,\n    legend: {\n      display: false // not display legend\n    },\n    scales: {\n      xAxes: [{\n        type: 'linear',\n        position: 'bottom',\n        scaleLabel: {\n          display: true,\n          labelString: 'Price of Oil ($)'\n        }\n      }],\n      yAxes: [{\n        scaleLabel: {\n          display: true,\n          labelString: 'Russian ruble (per $)'\n        }\n      }]\n    },\n    tooltips: {\n      callbacks: {\n        title: function() {\n          return '';\n        },\n        label: function(tooltipItem, data) {\n          var x = tooltipItem.xLabel;\n          return 'Oil\\'s price : ' + x + ' $';\n        },\n        afterLabel: function(tooltipItem, data) {\n          var y = tooltipItem.yLabel;\n          return 'Ruble : ' + y;\n        }\n      }\n    }\n  }\n};","tagName":"pre"},{"text":"ef-chart {\n  max-width: 600px;\n}","tagName":"pre"},{"text":"<ef-chart id=\"bubble\"></ef-chart>","tagName":"pre"},{"text":"var bubble = document.getElementById('bubble');\n\nbubble.config = {\n  type: 'bubble',\n  data: {\n    datasets: [{\n        label: 'Zimbabwe',\n        data: [{ x: 450, y: 46, r: 3 }]\n      },\n      {\n        label: 'Ethiopia',\n        data: [{ x: 950, y: 56, r: 8 }]\n      },\n      {\n        label: 'India',\n        data: [{ x: 3000, y: 64, r: 18 }]\n      },\n      {\n        label: 'China',\n        data: [{ x: 6500, y: 73, r: 26 }]\n      },\n      {\n        label: 'Russia',\n        data: [{ x: 16000, y: 67, r: 8 }]\n      },\n      {\n        label: 'UK',\n        data: [{ x: 35000, y: 79, r: 6 }]\n      },\n      {\n        label: 'USA',\n        data: [{ x: 45000, y: 78, r: 12 }]\n      }\n    ]\n  },\n  options: {\n    scales: {\n      xAxes: [{\n        type: 'logarithmic',\n        position: 'bottom',\n        ticks: {\n          min: 450,\n          max: 50000,\n          maxRotation: 10,\n          callback: function(label, index) {\n            var xLabels = ['500', '1000', '2000', '5000', '10,000', '20000', '50000'];\n            return xLabels.indexOf(label.toString()) > -1 ? label : '';\n          }\n        },\n        scaleLabel: {\n          display: true,\n          labelString: 'GDP per person in US dollars (log scale)'\n        }\n      }],\n      yAxes: [{\n        ticks: {\n          min: 45,\n          max: 85,\n          stepSize: 5\n        },\n        scaleLabel: {\n          display: true,\n          labelString: 'Life expectancy at birth (years)'\n        }\n      }]\n    },\n    tooltips: {\n      callbacks: {\n        title: function(tooltipItem, data) {\n          var item = tooltipItem[0];\n          var dataset = data.datasets[item.datasetIndex];\n          return dataset.label;\n        },\n        label: function(tooltipItem, data) {\n          var x = tooltipItem.xLabel;\n          return 'GDP per Capita : ' + x + '$';\n        },\n        afterLabel: function(tooltipItem, data) {\n          var y = tooltipItem.yLabel;\n          return 'Life expectancy : ' + y + ' Yrs';\n        }\n      }\n    }\n  }\n};","tagName":"pre"},{"text":"ef-chart {\n  max-width: 600px;\n}","tagName":"pre"},{"text":"<ef-chart id=\"radar\"></ef-chart>","tagName":"pre"},{"text":"var radar = document.getElementById('radar');\n\nradar.config = {\n  type: 'radar',\n  data: {\n    labels: [\n      ['Eating', 'Dinner'],\n      ['Drinking', 'Water'], 'Sleeping', ['Designing', 'Graphics'], 'Coding', 'Cycling', 'Running'\n    ],\n    datasets: [{\n        label: 'Humanoid A',\n        data: [\n          13,\n          10,\n          9,\n          14,\n          9,\n          5,\n          10\n        ]\n      },\n      {\n        label: 'Humanoid B',\n        data: [\n          8,\n          5,\n          9,\n          7,\n          17,\n          11,\n          4\n        ]\n      }\n    ]\n  },\n  options: {\n    legend: {\n      position: 'right'\n    }\n  }\n};","tagName":"pre"},{"text":"ef-chart {\n  max-width: 600px;\n}","tagName":"pre"},{"text":"API Reference","tagName":"h2"},{"text":"Attributes","tagName":"h3"},{"text":"Properties","tagName":"h3"},{"text":"Methods","tagName":"h3"}]},{"title":"Clock","filename":"elements/clock.html","contents":[{"text":"<div>\n  <ef-clock></ef-clock>\n  <ef-clock am-pm></ef-clock>\n  <ef-clock show-seconds></ef-clock>\n  <ef-clock am-pm show-seconds></ef-clock>\n</div>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"div {\n  padding: 30px 0 20px;\n  display: flex;\n}\n\nef-clock:not(last-child) {\n  margin-right: 40px;\n}","tagName":"pre"},{"text":"Clock component displays a clock with the time in HH:MM:SS format. It can be configured to show any custom time.","tagName":"p"},{"text":"Basic Usage","tagName":"h2"},{"text":"The clock is set to display the time as 00:00:00 by default. You can configure the component to show the seconds segment, display it in a 12-hour format or tick the clock.","tagName":"p"},{"text":"<div>\n  <ef-clock></ef-clock>\n  <ef-clock show-seconds></ef-clock>\n  <ef-clock show-seconds tick></ef-clock>\n  <ef-clock am-pm></ef-clock>\n</div>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"div {\n  padding: 30px 0 20px;\n  display: flex;\n}\n\nef-clock:not(last-child) {\n  margin-right: 40px;\n}","tagName":"pre"},{"text":"<ef-clock></ef-clock>\n<ef-clock show-seconds></ef-clock>\n<ef-clock show-seconds tick></ef-clock>\n<ef-clock am-pm></ef-clock>","tagName":"pre"},{"text":"Custom initial time","tagName":"h2"},{"text":"You can customize the intitial time of ef-clock using value.","tagName":"p"},{"text":"<div>\n  <ef-clock value=\"6:5\"></ef-clock>\n  <ef-clock value=\"06:05\"></ef-clock>\n  <ef-clock value=\"6:05:20\"></ef-clock>\n  <ef-clock value=\"06:05:20\"></ef-clock>\n</div>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"div {\n  padding: 30px 0 20px;\n  display: flex;\n}\n\nef-clock:not(last-child) {\n  margin-right: 40px;\n}","tagName":"pre"},{"text":"<ef-clock value=\"06:05\"></ef-clock>\n<ef-clock value=\"06:05:20\"></ef-clock>","tagName":"pre"},{"text":"Valid time formats are hh:mm and hh:mm:ss. This component does not support milliseconds.","tagName":"p"},{"text":"Offset","tagName":"h2"},{"text":"You can shift the time displayed by setting the offset attribute in seconds. The clock will display the offset time by calculating value and offset together without affecting the original value data.","tagName":"p"},{"text":"<div>\n  <ef-clock offset=\"3600\"></ef-clock>\n  <ef-clock offset=\"9000\"></ef-clock>\n  <ef-clock offset=\"19800\"></ef-clock>\n</div>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"div {\n  padding: 30px 0 20px;\n  display: flex;\n}\n\nef-clock:not(last-child) {\n  margin-right: 40px;\n}","tagName":"pre"},{"text":"<ef-clock offset=\"3600\"></ef-clock>\n<ef-clock offset=\"9000\"></ef-clock>\n<ef-clock offset=\"19800\"></ef-clock>","tagName":"pre"},{"text":"Interactive mode","tagName":"h2"},{"text":"Set the interactive attribute of ef-clock to allow users to interact with it. When interactive is set, users can click on clock segments to set the offset values.","tagName":"p"},{"text":"<div>\n  <ef-clock id=\"clock\" interactive></ef-clock>\n  <ef-button onclick=\"resetClock()\">Reset</ef-button>\n</div>","tagName":"pre"},{"text":"function resetClock() {\n  document.getElementById('clock').offset = 0;\n}","tagName":"pre"},{"text":"div {\n  padding: 30px 0 20px;\n  display: flex;\n  align-items: center;\n}\n\nef-clock:not(last-child) {\n  margin-right: 40px;\n}","tagName":"pre"},{"text":"<ef-clock interactive></ef-clock>","tagName":"pre"},{"text":"Responsive size","tagName":"h2"},{"text":"Clock size can be responsive if you set the font-size style with viewport units.","tagName":"p"},{"text":"<div>\n  <ef-clock style=\"font-size: 2vw;\"></ef-clock>\n  <ef-clock style=\"font-size: 5vw;\"></ef-clock>\n  <ef-clock style=\"font-size: 10vw;\"></ef-clock>\n</div>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"div {\n  display: flex;\n  flex-wrap: nowrap;\n  align-item: center;\n  padding: 30px 0 20px;\n}\n\nef-clock {\n  flex-grow: 0.1;\n  margin: 5px;\n}","tagName":"pre"},{"text":"<ef-clock style=\"font-size: 2vw;\" am-pm></ef-clock>\n<ef-clock style=\"font-size: 5vw;\" am-pm></ef-clock>\n<ef-clock style=\"font-size: 10vw;\" am-pm></ef-clock>","tagName":"pre"},{"text":"Analogue","tagName":"h2"},{"text":"Set analogue attribute will change digital clock to analogue display. When the size of analogue clock is smaller than the break point, It will switch to a simple clock face.","tagName":"p"},{"text":"<div>\n  <ef-clock analogue tick show-seconds am-pm></ef-clock>\n  <ef-clock id=\"smallSize\" analogue tick show-seconds am-pm></ef-clock>\n</div>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"div {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\nef-clock {\n  margin: 0px 20px;\n}\n\n#smallSize {\n  width: 64px;\n  height: 64px;\n}","tagName":"pre"},{"text":"<ef-clock analogue tick show-seconds am-pm></ef-clock>","tagName":"pre"},{"text":"API Reference","tagName":"h2"},{"text":"Attributes","tagName":"h3"},{"text":"Properties","tagName":"h3"},{"text":"Methods","tagName":"h3"},{"text":"Events","tagName":"h3"}]},{"title":"Heatmap","filename":"elements/heatmap.html","contents":[{"text":"  <ef-heatmap style=\"width: 80%;\"></ef-heatmap>","tagName":"pre"},{"text":"var el = document.querySelector('ef-heatmap');\nvar generateData = function(r, c) {\n  var rows = Array(r);\n  for (var i = 0; i < rows.length; i++) {\n    var columns = Array(c);\n    for (var ii = 0; ii < columns.length; ii++) {\n      var shift = (i * ii) / (c * r);\n      var value = -1 + shift + (Math.random() / 2 + 0.5 * shift) * (2 - shift) * 1;\n      columns[ii] = {\n        value: value\n      };\n    }\n    rows[i] = columns;\n  }\n  return rows;\n};\nel.config = {\n  data: generateData(12, 12),\n  yAxis: {\n    labels: ['2019', '2018', '2017', '2016', '2015', '2014', '2013', '2012', '2011', '2010', '2009', '2008', '2007']\n  },\n  xAxis: {\n    labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n    shortLabels: ['JAN', 'FEB', 'MAR', 'APR', 'MAY', 'JUN', 'JUL', 'AUG', 'SEP', 'OCT', 'NOV', 'DEC']\n  }\n};","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"ef-heatmap is a graphical representation of data where the individual values contained in a matrix are represented as colors.","tagName":"p"},{"text":"Basic Usage","tagName":"h2"},{"text":"To initialize the heatmap, pass a configuration object to the config property. Heatmap uses mid-point and a cell's value to determine the colors of cells.","tagName":"p"},{"text":"The default values of min, mid and max points are -1, 0 and 1, respectively.","tagName":"p"},{"text":"var el = document.querySelector(\"ef-heatmap\");\nel.config = {\n  data: [\n    [{ value: 0.1 }, { value: 0.2 }, { value: 0.3 }],\n    [{ value: 0.4 }, { value: 0.5 }, { value: 0.6 }],\n    [{ value: 0.7 }, { value: 0.8 }, { value: 0.9 }],\n    [{ value: 1.0 }, { value: 1.1 }, { value: 1.2 }],\n  ],\n};","tagName":"pre"},{"text":"Config","tagName":"h4"},{"text":"\nProperties\nType\nRequired\nDescription\n","tagName":"tr"},{"text":"\ndata\nCell[][]\n✓\nrows[ columns[Cell] ]\n","tagName":"tr"},{"text":"Cell","tagName":"a"},{"text":"\nyAxis\nYAxis\n✗\nConfiguration for Y-Axis\n","tagName":"tr"},{"text":"Y-Axis","tagName":"a"},{"text":"\nxAxis\nXAxis\n✗\nConfiguration for X-Axis\n","tagName":"tr"},{"text":"X-Axis","tagName":"a"},{"text":"Min, max and mid data point","tagName":"h2"},{"text":"You can configure min, mid and max points to match your data format using the min-point, mid-point and max-point attributes.","tagName":"p"},{"text":"The example below shows how to configure the heatmap when data is ranged between 250 and 800 and the mid point is 600.","tagName":"p"},{"text":"  <ef-heatmap min-point=\"250\" mid-point=\"600\" max-point=\"800\" axis-hidden></ef-heatmap>","tagName":"pre"},{"text":"var el = document.querySelector('ef-heatmap');\nvar generateSequentialData = function(start, count, step) {\n  var rows = [];\n  var columns = [];\n  for (var i = 0; i < count; i++) {\n    columns.push({ value: start + step * i });\n  }\n  rows.push(columns);\n  return rows;\n};\nel.config = {\n  data: generateSequentialData(250, 15, 39.286),\n};","tagName":"pre"},{"text":"ef-heatmap {\n  height: 35px;\n}","tagName":"pre"},{"text":"<ef-heatmap\n  min-point=\"250\"\n  mid-point=\"600\"\n  max-point=\"800\"\n></ef-heatmap>","tagName":"pre"},{"text":"Cell appearances","tagName":"h2"},{"text":"A Heatmap cell's appearance derives from data in config. However, a certain degree of customization and features addition is allowed for each individual cell.","tagName":"p"},{"text":"Cell header","tagName":"h3"},{"text":"Besides a cell's label, there is also a cell header property which is bolder and always positioned on top of the label.","tagName":"p"},{"text":"  <ef-heatmap></ef-heatmap>","tagName":"pre"},{"text":"var el = document.querySelector('ef-heatmap');\nel.config = {\n  data: [\n    [\n      { header: \"IBM\", value: 0.4 },\n      { header: \"APPL\", value: 0.52 },\n      { header: \"AMZN\", value: -0.3 }\n    ],\n    [\n      { header: \"T\", value: -0.4 },\n      { header: \"NFLX\", value: 0.5 },\n      { header: \"GM\", value: -1.6 }\n    ],\n    [\n      { header: \"FB\", value: 0.17 },\n      { header: \"VXUS\", value: -2.8 },\n      { header: \"GOOGL\", value: 3.9 }\n    ]\n  ]\n};","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"var el = document.querySelector(\"ef-heatmap\");\nel.config = {\n  data: [\n    [\n      { header: \"IBM\", value: 0.4 },\n      { header: \"APPL\", value: 0.52 },\n      { header: \"AMZN\", value: -0.3 },\n    ],\n    [\n      { header: \"T\", value: -0.4 },\n      { header: \"NFLX\", value: 0.5 },\n      { header: \"GM\", value: -1.6 },\n    ],\n    [\n      { header: \"FB\", value: 0.17 },\n      { header: \"VXUS\", value: -2.8 },\n      { header: \"GOOGL\", value: 3.9 },\n    ],\n  ],\n};","tagName":"pre"},{"text":"Cell color blending","tagName":"h3"},{"text":"Color blending mode mixes the max and min colors with the canvas's background color, resulting in more natural, gradient-like cell colors.","tagName":"p"},{"text":"  <ef-heatmap axis-hidden blend></ef-heatmap>","tagName":"pre"},{"text":"var el = document.querySelector('ef-heatmap');\nvar generateSequentialData = function(start, count, step) {\n  var rows = [];\n  var columns = [];\n  for (var i = 0; i < count; i++) {\n    columns.push({ value: start + step * i });\n  }\n  rows.push(columns);\n  return rows;\n};\nel.config = {\n  data: generateSequentialData(-1, 21, 0.1),\n};\nel.renderCallback = function(cell) {\n  return { foregroundColor: '#f0f0f0' }\n};","tagName":"pre"},{"text":"ef-heatmap {\n  height: 35px;\n}","tagName":"pre"},{"text":"<ef-heatmap blend></ef-heatmap>","tagName":"pre"},{"text":"Apply custom cell's font color to improve contrast.","tagName":"p"},{"text":"const el = document.querySelector(\"ef-heatmap\");\nel.renderCallback = function (cell) {\n  return { foregroundColor: \"#f0f0f0\" };\n};","tagName":"pre"},{"text":"Custom cell colors","tagName":"h3"},{"text":"Default colors are provided by the theme but they can be overridden using CSS.","tagName":"p"},{"text":"  <ef-heatmap axis-hidden></ef-heatmap>","tagName":"pre"},{"text":"var el = document.querySelector('ef-heatmap');\nvar generateSequentialData = function(start, count, step) {\n  var rows = [];\n  var columns = [];\n  for (var i = 0; i < count; i++) {\n    columns.push({ value: start + step * i });\n  }\n  rows.push(columns);\n  return rows;\n};\nel.config = {\n  data: generateSequentialData(-1, 21, 0.1),\n};","tagName":"pre"},{"text":"ef-heatmap {\n  height: 35px;\n  --above-point-color: #3399ff;\n  --below-point-color: #ff3399;\n}","tagName":"pre"},{"text":"<style>\n  ef-heatmap {\n    --above-point-color: #3399ff;\n    --below-point-color: #ff3399;\n  }\n</style>\n<ef-heatmap></ef-heatmap>","tagName":"pre"},{"text":"CSS variables","tagName":"h3"},{"text":"\nCSS Variable Names\nDescription\n","tagName":"tr"},{"text":"\n--spacing\nMargin around a cell in pixels\n","tagName":"tr"},{"text":"\n--above-point-color\nColor at the maximum point\n","tagName":"tr"},{"text":"\n--below-point-color\nColor at the minimum point\n","tagName":"tr"},{"text":"Custom cell rendering","tagName":"h3"},{"text":"Heatmap accepts a custom rendering function via the renderCallback property to override label, backgroundColor and foregroundColor for each cell.","tagName":"p"},{"text":"The following cell information is also available:","tagName":"p"},{"text":"  <ef-heatmap></ef-heatmap>","tagName":"pre"},{"text":"var el = document.querySelector('ef-heatmap');\nvar generateData = function(r, c) {\n  var rows = Array(r);\n  for (var i = 0; i < rows.length; i++) {\n    var columns = Array(c);\n    for (var ii = 0; ii < columns.length; ii++) {\n      var shift = (i * ii) / (c * r);\n      var value = -1 + shift + (Math.random() / 2 + 0.5 * shift) * (2 - shift);\n\n      columns[ii] = {\n        value: value\n      };\n    }\n    rows[i] = columns;\n  }\n  return rows;\n};\nel.config = {\n  data: generateData(12, 12),\n  yAxis: {\n    labels: ['2019', '2018', '2017', '2016', '2015', '2014', '2013', '2012', '2011', '2010', '2009', '2008', '2007', '2006', '2005']\n  },\n  xAxis: {\n    labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n    shortLabels: ['JAN', 'FEB', 'MAR', 'APR', 'MAY', 'JUN', 'JUL', 'AUG', 'SEP', 'OCT', 'NOV', 'DEC']\n  }\n};\nel.renderCallback = function(cell) {\n  var isDiagonalLine = cell.colIndex === cell.rowIndex;\n  if (isDiagonalLine) {\n    return {\n      label: '',\n      backgroundColor: 'transparent'\n    }\n  }\n};","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"var el = document.querySelector(\"ef-heatmap\");\nel.renderCallback = function (cell) {\n  var isDiagonalLine = cell.colIndex === cell.rowIndex;\n\n  if (isDiagonalLine) {\n    return {\n      label: \"\",\n      backgroundColor: \"transparent\",\n    };\n  }\n};","tagName":"pre"},{"text":"Cell's configuration","tagName":"h4"},{"text":"\nProperties\nType\nDescription\n","tagName":"tr"},{"text":"\nvalue\nnumber\nCell's value\n","tagName":"tr"},{"text":"\nheader\nstring\nCell's header\n","tagName":"tr"},{"text":"\nlabel\nstring\nCell's label\n","tagName":"tr"},{"text":"\nforegroundColor\nstring of valid color (hex, rgb)\nCell's label color\n","tagName":"tr"},{"text":"\nbackgroundColor\nstring of valid color (hex, rgb)\nCell's background color\n","tagName":"tr"},{"text":"Axes position","tagName":"h2"},{"text":"Each axis has 2 different positioning options. X-axis can be at top or bottom and Y-axis can be at left or right.","tagName":"p"},{"text":"  <ef-heatmap></ef-heatmap>","tagName":"pre"},{"text":"var el = document.querySelector('ef-heatmap');\nvar generateData = function(r, c) {\n  var rows = Array(r);\n  for (var i = 0; i < rows.length; i++) {\n    var columns = Array(c);\n    for (var ii = 0; ii < columns.length; ii++) {\n      var shift = (i * ii) / (c * r);\n      var value = -1 + shift + (Math.random() / 2 + 0.5 * shift) * (2 - shift);\n\n      columns[ii] = {\n        value: value\n      };\n    }\n    rows[i] = columns;\n  }\n  return rows;\n};\nel.config = {\n  data: generateData(12, 12),\n  yAxis: {\n    position: 'right',\n    labels: ['2019', '2018', '2017', '2016', '2015', '2014', '2013', '2012', '2011', '2010', '2009', '2008', '2007', '2006', '2005']\n  },\n  xAxis: {\n    position: 'bottom',\n    labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n    shortLabels: ['JAN', 'FEB', 'MAR', 'APR', 'MAY', 'JUN', 'JUL', 'AUG', 'SEP', 'OCT', 'NOV', 'DEC']\n  }\n};","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"  var el = document.querySelector(\"ef-heatmap\");\n  el.config = {\n    yAxis: {\n      position: \"right\",\n      labels: [...]\n    },\n    xAxis: {\n      position: \"bottom\",\n      labels: [...],\n    }\n  };","tagName":"pre"},{"text":"Y-Axis's configuration","tagName":"h4"},{"text":"\nProperties\nType\nDescription\n","tagName":"tr"},{"text":"\nlabels\nstring[]\nY-axis labels\n","tagName":"tr"},{"text":"\nposition\nleft or right\nY-axis orientation relative to the heatmap\n","tagName":"tr"},{"text":"X-Axis's configuration","tagName":"h4"},{"text":"\nProperties\nType\nDescription\n","tagName":"tr"},{"text":"\nlabels\nstring[]\nX-axis labels\n","tagName":"tr"},{"text":"\nshortLabels\nstring[]\nX-axis short labels for smaller screens\n","tagName":"tr"},{"text":"\nposition\ntop or bottom\nX-axis orientation relative to the heatmap\n","tagName":"tr"},{"text":"Using tooltip","tagName":"h2"},{"text":"To render a tooltip on cell hover, pass a tooltip render function that returns HTML elements using the tooltipCallback property.","tagName":"p"},{"text":"  <ef-heatmap></ef-heatmap>","tagName":"pre"},{"text":"var el = document.querySelector('ef-heatmap');\nvar generateData = function(r, c) {\n  var rows = Array(r);\n  for (var i = 0; i < rows.length; i++) {\n    var columns = Array(c);\n    for (var ii = 0; ii < columns.length; ii++) {\n      var shift = (i * ii) / (c * r);\n      var value = -1 + shift + (Math.random() / 2 + 0.5 * shift) * (2 - shift);\n\n      columns[ii] = {\n        value: value\n      };\n    }\n    rows[i] = columns;\n  }\n  return rows;\n};\nel.tooltipCallback = function(cell) {\n  var tooltip = document.createElement('div');\n  var template = \"<div style='font-weight: bold'>Actual value:</div><div style='color:\" + cell.color + \"'>\" + cell.value + \"</div>\";\n  tooltip.innerHTML = template;\n  return tooltip;\n};\nel.config = {\n  data: generateData(12, 12),\n  yAxis: {\n    labels: ['2019', '2018', '2017', '2016', '2015', '2014', '2013', '2012', '2011', '2010', '2009', '2008', '2007', '2006', '2005']\n  },\n  xAxis: {\n    labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n    shortLabels: ['JAN', 'FEB', 'MAR', 'APR', 'MAY', 'JUN', 'JUL', 'AUG', 'SEP', 'OCT', 'NOV', 'DEC']\n  }\n};","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"  var el = document.querySelector(\"ef-heatmap\");\n  el.tooltipCallback = function(cell) {\n    var tooltip = document.createElement(\"div\");\n    var template = `\n          <div style=\"font-weight: bold\">Actual value:</div>\n          <div style=\"color:${cell.color}\">${cell.value}</div>\n        `;\n    tooltip.innerHTML = template;\n    return tooltip;\n  };\n  el.config = {...};","tagName":"pre"},{"text":"Handling click events","tagName":"h2"},{"text":"ef-heatmap provides an API to allow user to get cell's information form a native mouse events such as click, dblclick, contextmenu, etc. Calling getCellDataAtEvent and passing an event to the method will return a data of interactive cell.","tagName":"p"},{"text":"<ef-heatmap></ef-heatmap>\n<ef-overlay-menu id=\"menu\">\n  <ef-item value=\"menu1\">Menu 1</ef-item>\n  <ef-item value=\"menu2\" disabled>Menu 2</ef-item>\n  <ef-item type=\"divider\"></ef-item>\n  <ef-item value=\"show-cell-data\">Show Cell Data</ef-item>\n</ef-overlay-menu>\n<ef-dialog id=\"dlg\" header=\"Heatmap Cell\"></ef-dialog>","tagName":"pre"},{"text":"const isIE = (/Trident/g).test(navigator.userAgent);\nvar el = document.querySelector('ef-heatmap');\nvar menu = document.getElementById('menu');\nvar dlg = document.getElementById('dlg');\nlet popupTemplate;\nvar generateData = function(row, col) {\n  var rows = Array(row);\n  for (var i = 0; i < rows.length; i++) {\n    var columns = Array(col);\n    for (var ii = 0; ii < columns.length; ii++) {\n      var shift = (i * ii) / (col * row);\n      var value = -1 + shift + (Math.random() / 2 + 0.5 * shift) * (2 - shift);\n\n      columns[ii] = {\n        value: value\n      };\n    }\n    rows[i] = columns;\n  }\n  return rows;\n};\nel.config = {\n  data: generateData(12, 12),\n  yAxis: {\n    labels: ['2019', '2018', '2017', '2016', '2015', '2014', '2013', '2012', '2011', '2010', '2009', '2008', '2007', '2006', '2005']\n  },\n  xAxis: {\n    labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n    shortLabels: ['JAN', 'FEB', 'MAR', 'APR', 'MAY', 'JUN', 'JUL', 'AUG', 'SEP', 'OCT', 'NOV', 'DEC']\n  }\n};\n\nconst handleContextMenu = function(event) {\n  const cell = el.getCellDataAtEvent(event);\n  if (cell) {\n    event.preventDefault();\n    popupTemplate = \"<span>Value: \" + cell.value + \"</span><br><span>Row index: \" + cell.rowIndex + \"</span><br><span>Column index: \" + cell.colIndex + \"</span>\";\n    menu.opened = true;\n    menu.x = event.clientX;\n    menu.y = event.clientY;\n  }\n};\n\nif (!isIE) {\n  el.addEventListener('contextmenu', handleContextMenu);\n} else {\n  document.oncontextmenu = handleContextMenu;\n}\n\nmenu.addEventListener('item-trigger', function(event) {\n  var value = event.detail.value;\n  if (value === 'show-cell-data') {\n    dlg.innerHTML = popupTemplate;\n    dlg.opened = true;\n    menu.opened = false;\n  }\n});","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"<ef-heatmap></ef-heatmap>\n<ef-overlay-menu id=\"menu\">\n  <ef-item value=\"menu1\">Menu 1</ef-item>\n  <ef-item value=\"menu2\" disabled>Menu 2</ef-item>\n  <ef-item type=\"divider\"></ef-item>\n  <ef-item value=\"show-cell-data\" >Show Cell Data</ef-item>      \n</ef-overlay-menu>\n<ef-dialog id=\"dlg\" header=\"Heatmap Cell\"></ef-dialog>","tagName":"pre"},{"text":"var el = document.querySelector(\"ef-heatmap\");\nvar menu = document.getElementById('menu');\nvar dlg = document.getElementById('dlg');\nlet popupTemplate;        \nel.addEventListener('contextmenu', function (event) {\n    const cell = el.getCellDataAtEvent(event);\n    if (cell) {\n      event.preventDefault();\n      popupTemplate = `\n          <span>Value: ${cell.value}</span><br>\n          <span>Row index: ${cell.rowIndex}</span><br>\n          <span>Column index: ${cell.colIndex}</span>\n      `;\n      menu.opened = true;\n      menu.x = event.clientX;\n      menu.y = event.clientY;\n    }\n});\n\nmenu.addEventListener('item-trigger', function (event) {\n    var value = event.detail.value;\n    if (value === 'show-cell-data') {\n      dlg.innerHTML = popupTemplate;\n      dlg.opened = true;\n      menu.opened = false;\n    }\n});\n\nel.config = {...};","tagName":"pre"},{"text":"Note: On IE11 or legacy browsers, contextmenu  event via addEventListener is not support on Web components: https://github.com/webcomponents/polyfills/issues/176. As a workaround, you can use document.oncontextmenu to handle the event.","tagName":"p"},{"text":"https://github.com/webcomponents/polyfills/issues/176","tagName":"a"},{"text":"API Reference","tagName":"h2"},{"text":"Attributes","tagName":"h3"},{"text":"Properties","tagName":"h3"},{"text":"Methods","tagName":"h3"}]},{"title":"Interactive Chart","filename":"elements/interactive-chart.html","contents":[{"text":"<ef-interactive-chart id=\"candle\"></ef-interactive-chart>","tagName":"pre"},{"text":"var initVal = 20;\nvar maxVal = initVal * 2;\nvar generateData = function(total, start) {\n  var startDate = start || new Date();\n  var ret = [];\n  total = total < 0 ? 10 : total;\n  for (var i = 0; i < total; i++) {\n    var volatility = (Math.random() * (4.5) - 2) / 100; // random % volatility\n    var date = start || new Date(startDate.setDate(startDate.getDate() + 1));\n    var openVal = initVal + initVal * volatility;\n    var closeVal = openVal + (openVal * volatility * 1.5);\n    var highVal = openVal > closeVal ? openVal + 0.1 : closeVal + 0.5;\n    var lowVal = openVal < closeVal ? openVal - 0.5 : closeVal - 0.2;\n    initVal = closeVal > maxVal ? closeVal - (closeVal * 0.2) : closeVal;\n    var point = {\n      time: date.getTime() / 1000.0,\n      open: parseFloat(openVal.toFixed(2)),\n      high: parseFloat(highVal.toFixed(2)),\n      low: parseFloat(lowVal.toFixed(2)),\n      close: parseFloat(closeVal.toFixed(2))\n    };\n    ret.push(point);\n  }\n  return ret;\n};\n\nvar generateCurrent = function(prevDate) {\n  var newPoint = generateData(1, prevDate);\n  return newPoint[0] || {};\n};\n\nconst chart = document.getElementById('candle');\nchart.config = {\n  series: [{\n    type: 'candlestick',\n    data: generateData(100)\n  }]\n};\n\nsetInterval(function() {\n  var lastIndex = chart.config.series[0].data.length - 1;\n  var time = chart.config.series[0].data[lastIndex].time;\n  var latestTime = time || null;\n  latestTime += 86400; // Update time Next day\n  var prevDate = new Date(latestTime * 1000);\n  var current = generateCurrent(prevDate);\n  chart.config.series[0].data.push(current);\n  chart.seriesList[0].update(current);\n}, 1000);","tagName":"pre"},{"text":"ef-interactive-chart {\n  width: 100%;\n  height: 300px;\n}","tagName":"pre"},{"text":"Interactive Chart is a lightweight chart component that allows you to create different use cases for financial chart. The component uses the lightweight-charts library. You can see a demo of different chart types and the APIs of the lightweight chart library via this documentation.","tagName":"p"},{"text":"lightweight-charts","tagName":"a"},{"text":"documentation","tagName":"a"},{"text":"While you can use interactive chart to draw several chart types, such as line, bar and candlestick, the chart doesn't support adding trendlines or technical analyses.","tagName":"p"},{"text":"Create chart","tagName":"h3"},{"text":"You can create a chart by passing the configuration and initial dataset using the config property. Interactive chart supports the following chart types. The value must be a number.","tagName":"p"},{"text":"\nType\nDescription\n","tagName":"tr"},{"text":"\nline\nLine chart\n","tagName":"tr"},{"text":"\narea\nLine chart with filled area\n","tagName":"tr"},{"text":"\nbar\nOHLC bar chart\n","tagName":"tr"},{"text":"\ncandlestick\nCandlestick chart\n","tagName":"tr"},{"text":"\nvolume\nVolume chart\n","tagName":"tr"},{"text":"<ef-interactive-chart id=\"line\"></ef-interactive-chart>","tagName":"pre"},{"text":"const chart = document.getElementById(\"line\");\nchart.config = {\n  series: [\n    {\n      type: \"line\",\n      data: [\n        { time: \"2018-12-22\", value: 32.51 },\n        { time: \"2018-12-23\", value: 31.11 },\n        { time: \"2018-12-24\", value: 27.02 },\n        { time: \"2018-12-25\", value: 27.32 },\n        { time: \"2018-12-26\", value: 25.17 },\n        { time: \"2018-12-27\", value: 28.89 },\n        { time: \"2018-12-28\", value: 25.46 },\n        { time: \"2018-12-29\", value: 23.92 },\n        { time: \"2018-12-30\", value: 22.68 },\n        { time: \"2018-12-31\", value: 22.67 }\n      ]\n    }\n  ]\n};","tagName":"pre"},{"text":"Bar and candlestick charts need a different dataset.","tagName":"p"},{"text":"chart.config = {\n  series: [\n    {\n      type: \"bar\",\n      data: [\n        {\n          time: \"2018-12-19\",\n          open: 141.77,\n          high: 170.39,\n          low: 120.25,\n          close: 145.72\n        },\n        {\n          time: \"2018-12-20\",\n          open: 145.72,\n          high: 147.99,\n          low: 100.11,\n          close: 108.19\n        },\n        {\n          time: \"2018-12-21\",\n          open: 108.19,\n          high: 118.43,\n          low: 74.22,\n          close: 75.16\n        },\n        {\n          time: \"2018-12-22\",\n          open: 75.16,\n          high: 82.84,\n          low: 36.16,\n          close: 45.72\n        }\n      ]\n    }\n  ]\n};","tagName":"pre"},{"text":"Intraday charts","tagName":"h3"},{"text":"Interactive chart supports intraday chart using a UNIX timestamp instead of a date string, as mentioned in the Lightweight Documentation.","tagName":"p"},{"text":"Lightweight Documentation","tagName":"a"},{"text":"Also, be sure to enable timeVisible in the configuration. secondVisible is optional.","tagName":"p"},{"text":"<ef-interactive-chart id=\"price\"></ef-interactive-chart>","tagName":"pre"},{"text":"const chart = document.getElementById('price');\nchart.config = {\n  options: {\n    timeScale: {\n      timeVisible: true,\n      secondsVisible: true\n    }\n  },\n  series: [{\n    symbol: 'Price',\n    type: 'area',\n    data: [\n      { time: Date.parse('2019-04-10T08:40:10') / 1000, value: 82.90 },\n      { time: Date.parse('2019-04-10T09:13:11') / 1000, value: 83.89 },\n      { time: Date.parse('2019-04-10T10:21:25') / 1000, value: 81.81 },\n      { time: Date.parse('2019-04-10T11:43:13') / 1000, value: 85.39 },\n      { time: Date.parse('2019-04-11T12:24:20') / 1000, value: 81.42 },\n      { time: Date.parse('2019-04-11T13:52:15') / 1000, value: 83.71 },\n      { time: Date.parse('2019-04-11T14:11:45') / 1000, value: 80.11 },\n      { time: Date.parse('2019-04-11T15:10:12') / 1000, value: 83.16 },\n      { time: Date.parse('2019-04-11T16:05:11') / 1000, value: 80.78 },\n    ]\n  }]\n};","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"chart.config = {\n  options: {\n    timeScale: {\n      timeVisible: true,\n      secondsVisible: true\n    }\n  },\n  series: [{\n    symbol: 'Price',\n    type: 'area',\n    data: [\n      { time: Date.parse('2019-04-10T08:40:10') / 1000, value: 82.90 },\n      { time: Date.parse('2019-04-10T09:13:11') / 1000, value: 83.89 },\n      { time: Date.parse('2019-04-10T10:21:25') / 1000, value: 81.81 },\n      { time: Date.parse('2019-04-10T11:43:13') / 1000, value: 85.39 },\n      { time: Date.parse('2019-04-11T12:24:20') / 1000, value: 81.42 },\n      { time: Date.parse('2019-04-11T13:52:15') / 1000, value: 83.71 },\n      { time: Date.parse('2019-04-11T14:11:45') / 1000, value: 80.11 },\n      { time: Date.parse('2019-04-11T15:10:12') / 1000, value: 83.16 },\n      { time: Date.parse('2019-04-11T16:05:11') / 1000, value: 80.78 },    \n    ]\n  }]\n};","tagName":"pre"},{"text":"Multiple charts","tagName":"h3"},{"text":"Chart can display multiple series by passing an array to config.series. For example, a rebasing chart can be created as poer below.","tagName":"p"},{"text":"<ef-interactive-chart id=\"multi\"></ef-interactive-chart>","tagName":"pre"},{"text":"var generateData = function(total, start, init) {\n  var initVal = init || 20;\n  var startDate = start || new Date();\n  var ret = [];\n  total = total < 0 ? 10 : total;\n  for (var i = 0; i < total; i++) {\n    var volatility = (Math.random() * (4.5) - 2) / 100; // random % volatility\n    var date = start || new Date(startDate.setDate(startDate.getDate() + 1));\n    var val = initVal + initVal * volatility;\n    initVal = val;\n    var point = {\n      time: date.getTime() / 1000.0,\n      value: parseFloat(val.toFixed(2))\n    };\n    ret.push(point);\n  }\n  return ret;\n};\n\nconst chart = document.getElementById('multi');\nchart.config = {\n  options: {\n    priceScale: {\n      mode: 2\n    }\n  },\n  series: [{\n      symbol: 'GOOGL.O',\n      type: 'area',\n      data: generateData(100)\n    },\n    {\n      symbol: 'AMZN.OQ',\n      type: 'line',\n      data: generateData(100)\n    },\n    {\n      symbol: 'EBAY.OQ',\n      type: 'line',\n      data: generateData(100)\n    },\n    {\n      symbol: 'NFLX.OQ',\n      type: 'line',\n      data: generateData(100)\n    },\n    {\n      symbol: 'BIDU.OQ',\n      type: 'line',\n      data: generateData(100)\n    },\n    {\n      symbol: 'CRTO.OQ',\n      type: 'line',\n      data: generateData(100)\n    },\n    {\n      symbol: 'BABA.N',\n      type: 'line',\n      data: generateData(100)\n    }\n  ]\n};","tagName":"pre"},{"text":"ef-interactive-chart {\n  width: 100%;\n  height: 300px;\n}","tagName":"pre"},{"text":"chart.config = {\n  options: {\n    priceScale: {\n      mode: 2\n    }\n  },  \n  series: [\n    {\n      symbol: 'GOOGL.O',\n      type: 'area',\n      data: [\n        { time: '2019-04-11', value: 180.01 },\n        { time: '2019-04-12', value: 156.63 },\n        { time: '2019-04-13', value: 166.64 },\n        { time: '2019-04-14', value: 181.89 },\n        ...\n      ]\n    },\n    {\n      symbol: 'AMZN.OQ',\n      type: 'line',\n      data: [\n        { time: '2019-04-11', value: 20.31 },\n        { time: '2019-04-12', value: 30.27 },\n        { time: '2019-04-13', value: 70.28 },\n        { time: '2019-04-14', value: 49.29 },\n        ...\n      ]\n    }\n  ]\n};","tagName":"pre"},{"text":"Volume chart","tagName":"h3"},{"text":"To create a chart with volume, add a volume series and set seriesOptions as follows.","tagName":"p"},{"text":"<ef-interactive-chart id=\"volume\"></ef-interactive-chart>","tagName":"pre"},{"text":"var generateData = function(total, start, init) {\n  var initVal = init || 20;\n  var startDate = start || new Date();\n  var ret = [];\n  total = total < 0 ? 10 : total;\n  for (var i = 0; i < total; i++) {\n    var volatility = (Math.random() * (20) - 6) / 100; // random % volatility\n    var date = start || new Date(startDate.setDate(startDate.getDate() + 1));\n    var val = initVal + initVal * volatility;\n    initVal = val;\n    var point = {\n      time: date.getTime() / 1000.0,\n      value: parseFloat(val.toFixed(2))\n    };\n    ret.push(point);\n  }\n  return ret;\n};\n\nconst chart = document.getElementById('volume');\nchart.config = {\n  series: [{\n      symbol: 'Price',\n      type: 'area',\n      data: generateData(70)\n    },\n    {\n      symbol: 'Vol',\n      type: 'volume',\n      seriesOptions: {\n        overlay: true,\n        priceFormat: {\n          type: 'volume'\n        },\n        scaleMargins: {\n          top: 0.8,\n          bottom: 0\n        },\n        lineWidth: 3,\n      },\n      data: generateData(70, null, 2000000)\n    }\n  ]\n};","tagName":"pre"},{"text":"ef-interactive-chart {\n  width: 100%;\n  height: 300px;\n}","tagName":"pre"},{"text":"chart.config = {\n  series: [\n    {\n      type: 'area',\n      data: [\n        { time: '2019-04-11', value: 180.01 },\n        { time: '2019-04-12', value: 156.63 },\n        { time: '2019-04-13', value: 166.64 },\n        { time: '2019-04-14', value: 181.89 },\n        ...\n      ]\n    },\n    {\n      type: 'volume',\n      seriesOptions : {\n        overlay: true,\n        priceFormat: {\n          type: 'volume'\n        },\n        scaleMargins: {\n          top: 0.8,\n          bottom: 0\n        },\n        lineWidth: 3,\n      },\n      data: [\n        { time: '2019-04-11', value: 204000 },\n        { time: '2019-04-12', value: 303000 },\n        { time: '2019-04-13', value: 705000 },\n        { time: '2019-04-14', value: 498700 },\n        ...\n      ]\n    }\n  ]\n};","tagName":"pre"},{"text":"Seasonality chart","tagName":"h3"},{"text":"A Seasonality chart can be created using multiple series with the same timespan. You can use the APIs to customize the displayed legend, X-Axis label and cross hair vertical label.","tagName":"p"},{"text":"<ef-interactive-chart id=\"seasonality\"></ef-interactive-chart>","tagName":"pre"},{"text":"const monthCount = {};\nconst months = {\n  1: \"January\",\n  2: \"February\",\n  3: \"March\",\n  4: \"April\",\n  5: \"May\",\n  6: \"June\",\n  7: \"July\",\n  8: \"August\",\n  9: \"September\",\n  10: \"October\",\n  11: \"November\",\n  12: \"December\"\n}\nconst chart = document.getElementById('seasonality');\nchart.config = {\n  lastValueVisible: false,\n  options: {\n    timeScale: {\n      tickMarkFormatter: function(time, tickMarkType, locale) {\n        if (!monthCount[time.month]) {\n          monthCount[time.month] = 1;\n          return months[time.month];\n        }\n        return \"\";\n      }\n    },\n    localization: {\n      timeFormatter: function(date) {\n        return date.day + ' ' + months[date.month];\n      }\n    }\n  },\n  series: [{\n      symbol: '2011-2020',\n      symbolName: 'Avg. 2011-2020',\n      lastValueVisible: false,\n      type: 'line',\n      data: [\n        { time: '2020-01-11', value: 20.31 },\n        { time: '2020-02-12', value: 30.27 },\n        { time: '2020-03-13', value: 70.28 },\n        { time: '2020-04-11', value: 20.31 },\n        { time: '2020-05-12', value: 30.27 },\n        { time: '2020-06-13', value: 70.28 },\n        { time: '2020-07-11', value: 49.29 },\n        { time: '2020-08-12', value: 20.31 },\n        { time: '2020-09-13', value: 30.27 },\n        { time: '2020-10-11', value: 70.28 },\n        { time: '2020-11-12', value: 49.29 },\n        { time: '2020-12-13', value: 70.28 },\n      ]\n    },\n    {\n      symbol: '2021',\n      symbolName: '2021',\n      type: 'area',\n      data: [\n        { time: '2020-01-11', value: 45.01 },\n        { time: '2020-02-12', value: 60.63 },\n        { time: '2020-03-13', value: 166.64 },\n        { time: '2020-04-11', value: 180.01 },\n        { time: '2020-05-12', value: 156.63 },\n        { time: '2020-06-13', value: 166.64 },\n        { time: '2020-07-11', value: 181.89 }\n      ]\n    },\n  ]\n};","tagName":"pre"},{"text":"ef-interactive-chart {\n  width: 100%;\n  height: 300px;\n}","tagName":"pre"},{"text":"const monthCount = {};\nconst months = {\n    1: \"January\",\n    2: \"February\",\n    3: \"March\",\n    4: \"April\",\n    5: \"May\",\n    6: \"June\",\n    7: \"July\",\n    8: \"August\",\n    9: \"September\",\n    10: \"October\",\n    11: \"November\",\n    12: \"December\"\n}\nconst chart = document.getElementById('seasonality');\nchart.config = {\n  lastValueVisible: false,\n  options: {\n    timeScale: {\n      tickMarkFormatter: function (time, tickMarkType, locale) {\n        if(!monthCount[time.month]) {\n          monthCount[time.month] = 1;\n          return months[time.month];\n        }\n        return \"\";\n      }\n    },\n    localization: {\n      timeFormatter: function (date) {\n        return date.day + ' ' + months[date.month];\n      }\n    }\n  },\n  series: [\n    {\n      symbol: '2011-2020',\n      symbolName: 'Avg. 2011-2020',\n      lastValueVisible: false,\n      type: 'line',\n      data: [\n        { time: '2020-01-11', value: 20.31 },\n        { time: '2020-02-12', value: 30.27 },\n        { time: '2020-03-13', value: 70.28 },\n        { time: '2020-04-11', value: 20.31 },\n        { time: '2020-05-12', value: 30.27 },\n        { time: '2020-06-13', value: 70.28 },\n        { time: '2020-07-11', value: 49.29 },\n        { time: '2020-08-12', value: 20.31 },\n        { time: '2020-09-13', value: 30.27 },\n        { time: '2020-10-11', value: 70.28 },\n        { time: '2020-11-12', value: 49.29 },\n        { time: '2020-12-13', value: 70.28 },\n      ]\n    },\n    {\n      symbol: '2021',\n      symbolName: '2021',\n      type: 'area',\n      data: [\n        { time: '2020-01-11', value: 45.01 },\n        { time: '2020-02-12', value: 60.63 },\n        { time: '2020-03-13', value: 166.64 },\n        { time: '2020-04-11', value: 180.01 },\n        { time: '2020-05-12', value: 156.63 },\n        { time: '2020-06-13', value: 166.64 },\n        { time: '2020-07-11', value: 181.89 }\n      ]\n    },\n  ]\n};","tagName":"pre"},{"text":"Setting chart options","tagName":"h3"},{"text":"You can customize chart options either at the chart level or series level.","tagName":"p"},{"text":"To customize options at the chart level, pass the option to config.options. Learn more about chart options from the Lightweight Chart Customization.","tagName":"p"},{"text":"Lightweight Chart Customization","tagName":"a"},{"text":"For example, in the lightweight-charts documents, you can learn to pass options to the chart in order to customize the crosshair.","tagName":"p"},{"text":"{\n  crosshair: {\n    vertLine: {\n      color: \"#4d4d4d\",\n      width: 0.5,\n      style: 1,\n      visible: true,\n      labelVisible: false,\n    },\n    horzLine: {\n      color: \"#4d4d4d\",\n      width: 1.5,\n      style: 0,\n      visible: true,\n      labelVisible: true,\n    },\n    mode: 1,\n  },\n}","tagName":"pre"},{"text":"In ef-interactive-chart, you will need to pass those options to config.options.","tagName":"p"},{"text":"chart.config = {\n  options: {\n    crosshair: {\n      vertLine: {\n        color: \"#4d4d4d\",\n        width: 0.5,\n        style: 1,\n        visible: true,\n        labelVisible: false,\n      },\n      horzLine: {\n        color: \"#4d4d4d\",\n        width: 1.5,\n        style: 0,\n        visible: true,\n        labelVisible: true,\n      },\n    },\n  }\n};","tagName":"pre"},{"text":"<ef-interactive-chart id=\"price\"></ef-interactive-chart>","tagName":"pre"},{"text":"const chart = document.getElementById('price');\nchart.config = {\n  series: [{\n    symbol: 'Price',\n    type: 'area',\n    data: [\n      { time: '2019-04-11', value: 180.01 },\n      { time: '2019-04-12', value: 156.63 },\n      { time: '2019-04-13', value: 166.64 },\n      { time: '2019-04-14', value: 181.89 },\n      { time: '2019-04-15', value: 174.43 },\n      { time: '2019-04-16', value: 180.01 },\n      { time: '2019-04-17', value: 196.63 },\n      { time: '2019-04-18', value: 176.64 },\n      { time: '2019-04-20', value: 181.89 },\n      { time: '2019-04-21', value: 190.01 },\n      { time: '2019-04-22', value: 196.63 },\n      { time: '2019-04-23', value: 178.64 },\n      { time: '2019-04-24', value: 141.89 },\n      { time: '2019-04-25', value: 154.43 },\n      { time: '2019-04-26', value: 170.01 },\n      { time: '2019-04-27', value: 196.63 },\n      { time: '2019-04-28', value: 176.64 },\n      { time: '2019-04-29', value: 181.89 }\n    ]\n  }],\n  options: {\n    crosshair: {\n      vertLine: {\n        color: '#4d4d4d',\n        width: 0.5,\n        style: 1,\n        visible: true,\n        labelVisible: false,\n      },\n      horzLine: {\n        color: '#4d4d4d',\n        width: 1.5,\n        style: 0,\n        visible: true,\n        labelVisible: true,\n      }\n    }\n  }\n};","tagName":"pre"},{"text":"ef-interactive-chart {\n  width: 100%;\n  height: 300px;\n}","tagName":"pre"},{"text":"To customize options at the series level, pass the options to each series using seriesOptions. Learn more about chart options from Lightweight Chart Series Basic.","tagName":"p"},{"text":"Lightweight Chart Series Basic","tagName":"a"},{"text":"For example, in lightweight-chart, you can pass options to set preferred decimal places on the y-axis.","tagName":"p"},{"text":"{\n  priceFormat: {\n      precision: 3,\n  },\n}","tagName":"pre"},{"text":"In ef-interactive-chart, you pass options to seriesOptions in the series.","tagName":"p"},{"text":"chart.config = {\n  options: { ... },\n  series: [\n  {\n    symbol: 'Price',\n    type: 'area',\n      seriesOptions: {\n        priceFormat: {\n            precision: 3\n        }\n      }\n  }]\n}","tagName":"pre"},{"text":"<ef-interactive-chart id=\"price\"></ef-interactive-chart>","tagName":"pre"},{"text":"const chart = document.getElementById('price');\nchart.config = {\n  series: [{\n    symbol: 'Price',\n    type: 'area',\n    data: [\n      { time: '2019-04-11', value: 180.01 },\n      { time: '2019-04-12', value: 156.63 },\n      { time: '2019-04-13', value: 166.64 },\n      { time: '2019-04-14', value: 181.89 },\n      { time: '2019-04-15', value: 174.43 },\n      { time: '2019-04-16', value: 180.01 },\n      { time: '2019-04-17', value: 196.63 },\n      { time: '2019-04-18', value: 176.64 },\n      { time: '2019-04-20', value: 181.89 },\n      { time: '2019-04-21', value: 190.01 },\n      { time: '2019-04-22', value: 196.63 },\n      { time: '2019-04-23', value: 178.64 },\n      { time: '2019-04-24', value: 141.89 },\n      { time: '2019-04-25', value: 154.43 },\n      { time: '2019-04-26', value: 170.01 },\n      { time: '2019-04-27', value: 196.63 },\n      { time: '2019-04-28', value: 176.64 },\n      { time: '2019-04-29', value: 181.89 }\n    ],\n    seriesOptions: {\n      priceFormat: {\n        precision: 3\n      }\n    }\n  }]\n};","tagName":"pre"},{"text":"ef-interactive-chart {\n  width: 100%;\n  height: 300px;\n}","tagName":"pre"},{"text":"Y-Axis placement","tagName":"h3"},{"text":"By default, chart will not display a left-side y-axis and all series will show on the right y-axis of the chart. However, lightweight-chart also provides the option to configure placement of a series to the left, right or both.","tagName":"p"},{"text":"Customizing chart to show data on the left y-axis.","tagName":"p"},{"text":"chart.config = {\n  options: {\n    rightPriceScale: {\n      visible: false\n    },\n    leftPriceScale: {\n      visible: true\n    },\n  },\n  series: [{\n    symbol: 'Price',\n    type: 'area',\n    seriesOptions: {\n      priceScaleId: 'left'\n    },\n    data: [...]\n  }]\n};","tagName":"pre"},{"text":"<ef-interactive-chart id=\"price\"></ef-interactive-chart>","tagName":"pre"},{"text":"const chart = document.getElementById('price');\nchart.config = {\n  options: {\n    rightPriceScale: {\n      visible: false\n    },\n    leftPriceScale: {\n      visible: true\n    },\n  },\n  series: [{\n    symbol: 'Price',\n    type: 'area',\n    seriesOptions: {\n      priceScaleId: 'left'\n    },\n    data: [\n      { time: '2019-04-11', value: 180.01 },\n      { time: '2019-04-12', value: 156.63 },\n      { time: '2019-04-13', value: 166.64 },\n      { time: '2019-04-14', value: 181.89 },\n      { time: '2019-04-15', value: 174.43 },\n      { time: '2019-04-16', value: 180.01 },\n      { time: '2019-04-17', value: 196.63 },\n      { time: '2019-04-18', value: 176.64 },\n      { time: '2019-04-20', value: 181.89 },\n      { time: '2019-04-21', value: 190.01 },\n      { time: '2019-04-22', value: 196.63 },\n      { time: '2019-04-23', value: 178.64 },\n      { time: '2019-04-24', value: 141.89 },\n      { time: '2019-04-25', value: 154.43 },\n      { time: '2019-04-26', value: 170.01 },\n      { time: '2019-04-27', value: 196.63 },\n      { time: '2019-04-28', value: 176.64 },\n      { time: '2019-04-29', value: 181.89 }\n    ]\n  }]\n};","tagName":"pre"},{"text":"ef-interactive-chart {\n  width: 100%;\n  height: 300px;\n}","tagName":"pre"},{"text":"Customizing chart to show data on the left and right sides of the y-axis.","tagName":"p"},{"text":"chart.config = {\n  options: {\n    rightPriceScale: {\n      visible: true\n    },\n    leftPriceScale: {\n      visible: true\n    },\n  },\n  series: [{\n    symbol: 'IBM.N',\n    type: 'area',\n    seriesOptions: {\n      priceScaleId: 'right'\n    },\n    data: [...]\n  },\n  {\n    symbol: 'GOOG.O',\n    type: 'area',\n    seriesOptions: {\n      priceScaleId: 'left'\n    },\n    data: [...]\n  }]\n};","tagName":"pre"},{"text":"<ef-interactive-chart id=\"price\"></ef-interactive-chart>","tagName":"pre"},{"text":"const chart = document.getElementById('price');\nchart.config = {\n  options: {\n    rightPriceScale: {\n      visible: true\n    },\n    leftPriceScale: {\n      visible: true\n    },\n  },\n  series: [{\n      symbol: 'IBM.N',\n      type: 'area',\n      seriesOptions: {\n        priceScaleId: 'right'\n      },\n      data: [\n        { time: '2019-04-11', value: 280.01 },\n        { time: '2019-04-12', value: 186.63 },\n        { time: '2019-04-13', value: 366.64 },\n        { time: '2019-04-14', value: 381.89 },\n        { time: '2019-04-15', value: 374.43 },\n        { time: '2019-04-16', value: 240.01 },\n        { time: '2019-04-17', value: 276.63 },\n        { time: '2019-04-18', value: 286.64 },\n        { time: '2019-04-20', value: 301.89 },\n        { time: '2019-04-21', value: 290.01 },\n        { time: '2019-04-22', value: 296.63 },\n        { time: '2019-04-23', value: 278.64 },\n        { time: '2019-04-24', value: 341.89 },\n        { time: '2019-04-25', value: 354.43 },\n        { time: '2019-04-26', value: 370.01 },\n        { time: '2019-04-27', value: 296.63 },\n        { time: '2019-04-28', value: 276.64 },\n        { time: '2019-04-29', value: 181.89 }\n      ]\n    },\n    {\n      symbol: 'GOOG.O',\n      type: 'area',\n      seriesOptions: {\n        priceScaleId: 'left'\n      },\n      data: [\n        { time: '2019-04-11', value: 180.01 },\n        { time: '2019-04-12', value: 156.63 },\n        { time: '2019-04-13', value: 166.64 },\n        { time: '2019-04-14', value: 181.89 },\n        { time: '2019-04-15', value: 174.43 },\n        { time: '2019-04-16', value: 180.01 },\n        { time: '2019-04-17', value: 196.63 },\n        { time: '2019-04-18', value: 176.64 },\n        { time: '2019-04-20', value: 181.89 },\n        { time: '2019-04-21', value: 190.01 },\n        { time: '2019-04-22', value: 196.63 },\n        { time: '2019-04-23', value: 178.64 },\n        { time: '2019-04-24', value: 141.89 },\n        { time: '2019-04-25', value: 154.43 },\n        { time: '2019-04-26', value: 170.01 },\n        { time: '2019-04-27', value: 196.63 },\n        { time: '2019-04-28', value: 176.64 },\n        { time: '2019-04-29', value: 181.89 }\n      ]\n    }\n  ]\n};","tagName":"pre"},{"text":"ef-interactive-chart {\n  width: 100%;\n  height: 300px;\n}","tagName":"pre"},{"text":"Chart legend","tagName":"h3"},{"text":"The interactive chart provides a default standard legend which displays price and symbol, if available.","tagName":"p"},{"text":"In case you want to preserve the value of symbol and show a custom name on the legend, use symbolName alongside symbol. The chart will use symbolName in the legend, instead.","tagName":"p"},{"text":"line.config = {\n  series: [\n    {\n      symbol: 'APPL.O',\n      symbolName: 'Price',\n      type: 'line',\n      data: [...]\n    }\n  ]\n};","tagName":"pre"},{"text":"By default, chart will display a raw value that passes from the data object in the legend. If you want to override the default formatting of the price, you can set your own formatter function to legendPriceFormatter in a series configuration object to override price format on the legend.","tagName":"p"},{"text":"For example, here's how you can format price to show three decimal places on the legend.","tagName":"p"},{"text":"chart.config = {\n  series: [\n    {\n      symbol: 'AAPL',\n      legendPriceFormatter: function (price) { return '$' + price.toFixed(3); },\n      type: 'area',\n      data: [...],\n    }\n  ]\n};","tagName":"pre"},{"text":"<ef-interactive-chart id=\"legend_formatter\"></ef-interactive-chart>","tagName":"pre"},{"text":"const chart = document.getElementById('legend_formatter');\nchart.config = {\n  series: [{\n    legendPriceFormatter: function(price) { return '$' + price.toFixed(3); },\n    type: 'area',\n    data: [\n      { time: '2018-12-22', value: 32.51 },\n      { time: '2018-12-23', value: 31.11 },\n      { time: '2018-12-24', value: 27.02 },\n      { time: '2018-12-25', value: 27.32 },\n      { time: '2018-12-26', value: 25.17 },\n      { time: '2018-12-27', value: 28.89 },\n      { time: '2018-12-28', value: 25.46 },\n      { time: '2018-12-29', value: 23.92 },\n      { time: '2018-12-30', value: 22.68 },\n      { time: '2018-12-31', value: 22.67 }\n    ],\n    seriesOptions: {\n      priceFormat: {\n        type: 'custom',\n        formatter: function(price) { return '$' + price.toFixed(3); }\n      }\n    }\n  }]\n};","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"Custom legend","tagName":"h3"},{"text":"You can implement your own legend using the legend slot.","tagName":"p"},{"text":"<ef-interactive-chart id=\"line\" legend>\n  <div slot=\"legend\" id=\"chart-legend\"></div>\n</ef-interactive-chart>","tagName":"pre"},{"text":"const el = document.getElementById('line');\nconst legend = document.getElementById('chart-legend');\n\nel.addEventListener('initialized', (e) => {\n  const chart = e.target.chart; // lightweight chart instance\n  const seriesList = e.target.seriesList;\n  const data = e.target.config.series[0].data;\n\n  chart.subscribeCrosshairMove((param) => {\n    const price = param.seriesPrices.get(seriesList[0]); // get price at crosshair\n    if (price) {\n      legend.textContent = price; // set price to legend\n      // more legend customization goes here\n    }\n  });\n  // set legend to show latest data when no crosshair\n  legend.textContent = data[data.length - 1].value;\n});","tagName":"pre"},{"text":"Custom legend can also be used to implement a custom tooltip.","tagName":"p"},{"text":"<ef-interactive-chart id=\"line\">\n  <div slot=\"legend\" id=\"custom-legend\">\n  </div>\n</ef-interactive-chart>","tagName":"pre"},{"text":"const chartEl = document.getElementById('line');\nchartEl.config = {\n  series: [{\n    symbol: 'AAPL',\n    type: 'area',\n    data: [\n      { time: '2018-12-22', value: 32.51 },\n      { time: '2018-12-23', value: 31.11 },\n      { time: '2018-12-24', value: 27.02 },\n      { time: '2018-12-25', value: 27.32 },\n      { time: '2018-12-26', value: 25.17 },\n      { time: '2018-12-27', value: 28.89 },\n      { time: '2018-12-28', value: 25.46 },\n      { time: '2018-12-29', value: 23.92 },\n      { time: '2018-12-30', value: 22.68 },\n      { time: '2018-12-31', value: 22.67 }\n    ]\n  }]\n};\nchartEl.addEventListener('initialized', function(event) {\n  const chart = event.target.chart;\n  const seriesList = event.target.seriesList;\n  var legend = document.getElementById('custom-legend');\n  chart.subscribeCrosshairMove(function(param) {\n    if (param.point === undefined || !param.time || param.point.x < 0 || param.point.x > event.target.clientWidth || param.point.y < 0 || param.point.y > event.target.clientHeight) {\n      legend.style.display = 'none';\n    } else {\n      const legendWidth = 60;\n      const legendHeight = 30;\n      const legendMargin = 10;\n      var y = param.point.y;\n      var left = param.point.x + legendMargin;\n      var top = y + legendMargin;\n\n      if (left > event.target.clientWidth - legendWidth) {\n        left = param.point.x - legendMargin - legendWidth;\n      }\n\n      if (top > event.target.clientHeight - legendHeight) {\n        top = y - legendHeight - legendMargin;\n      }\n\n      legend.style.zIndex = 1000;\n      legend.style.left = left + 'px';\n      legend.style.top = top + 'px';\n      legend.style.display = 'flex';\n      legend.style.alignItems = 'center';\n      legend.style.justifyContent = 'center';\n      legend.style.position = 'absolute';\n      legend.style.width = legendWidth + 'px';\n      legend.style.height = legendHeight + 'px';\n      legend.style.backgroundColor = 'rgba(255, 255, 255, 0.9)';\n      legend.style.border = 'solid 1px rgb(0,0,0)';\n      legend.style.color = 'rgb(0,0,0)';\n      legend.textContent = param.seriesPrices.get(seriesList[0]);\n    }\n  });\n});","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"Lightweight Charts instance","tagName":"h3"},{"text":"An instance of lightweight chart can be accessed using the chart and seriesList properties.","tagName":"p"},{"text":"  const el = document.getElementById(\"line\");\n  console.log('instance chart', el.chart); // instance of lightweight chart\n  console.log('instance series', el.seriesList); // array of series instances","tagName":"pre"},{"text":"Slots","tagName":"h2"},{"text":"API Reference","tagName":"h2"},{"text":"Attributes","tagName":"h3"},{"text":"Properties","tagName":"h3"},{"text":"Methods","tagName":"h3"},{"text":"Events","tagName":"h3"}]},{"title":"Led Gauge","filename":"elements/led-gauge.html","contents":[{"text":"<ef-led-gauge top-label=\"Sector Avg.\" bottom-label=\"Current Price\" top-value=\"-75\" bottom-value=\"75\"></ef-led-gauge>\n<ef-led-gauge top-label=\"50.25\" top-value=\"-30\" range-label=\"Daily Range\" range=\"[-80, -30]\"></ef-led-gauge>\n<ef-led-gauge zero=\"left\" neutral-color top-label=\"150.50\" top-value=\"50\"></ef-led-gauge>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"An LED gauge is used to show one or two values in an LED-like horizontal bar visualization. It is suited to display values where users can see and compare information such as industry average values, or 52-week high and 52-week low values.","tagName":"p"},{"text":"Temperaments colors","tagName":"h3"},{"text":"ef-led-gauge shows data in a scale of -100.00 to +100.00, with a mid-point of 0.00. By default, scales are divided equally and represented by 5 different colors -- Negative, Low-negative, Neutral, Low-positive, and Positive.","tagName":"p"},{"text":"<ef-led-gauge top-label=\"0.00\" top-value=\"0.00\"></ef-led-gauge>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"<ef-led-gauge top-label=\"0.00\" top-value=\"0.00\"></ef-led-gauge>","tagName":"pre"},{"text":"To use ef-led-gauge, data has to be normalized to a -100.00 to +100.00 scale.","tagName":"p"},{"text":"For example, to show data of 36.00 where the highest value is 60.00 and the lowest value is 90.00, the data needs to be normalized and set to ef-led-gauge as below.","tagName":"p"},{"text":"\nRaw value\nLED gauge value\n","tagName":"tr"},{"text":"\n60.00\n-100.00\n","tagName":"tr"},{"text":"\n36.00\n-60.00\n","tagName":"tr"},{"text":"\n90.00\n+100.00\n","tagName":"tr"},{"text":"<ef-led-gauge top-label=\"36.00\" top-value=\"-60.00\"></ef-led-gauge>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"<ef-led-gauge top-label=\"36.00\" top-value=\"-60.00\"></ef-led-gauge>","tagName":"pre"},{"text":"Mono color","tagName":"h3"},{"text":"ef-led-gauge can be wet to use only one color by adding the attribute neutral-color.","tagName":"p"},{"text":"<ef-led-gauge neutral-color top-label=\"36.00\" top-value=\"-60.00\"></ef-led-gauge>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"<ef-led-gauge neutral-color top-label=\"36.00\" top-value=\"-60.00\"></ef-led-gauge>","tagName":"pre"},{"text":"Showing range bar","tagName":"h3"},{"text":"Range bar mode can be used to show a range bar within the LED gauge. When Range bar mode is used, ef-led-gauge will automatically switch to using mono color.","tagName":"p"},{"text":"The size of the range bar can be set using the range attribute where the values of range need to be normalized to the 100.00 to +100.00 scale.","tagName":"p"},{"text":"To display a text label beneath the range bar, add the range-label attribute.","tagName":"p"},{"text":"<ef-led-gauge neutral-color top-label=\"36.00\" top-value=\"-60.00\" range=\"[-70,-20]\"></ef-led-gauge>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"<ef-led-gauge neutral-color top-label=\"36.00\" top-value=\"-60.00\" range=\"[-70,-20]\"></ef-led-gauge>","tagName":"pre"},{"text":"Customize colors","tagName":"h3"},{"text":"The colors of the LED gauge are managed by the theme but can be overridden using CSS variables.","tagName":"p"},{"text":"<ef-led-gauge red-blue-scale></ef-led-gauge>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"ef-led-gauge[red-blue-scale] {\n  --center-right-segment-color: rgba(60, 60, 200, 0.65);\n  --right-segment-color: rgba(60, 60, 200, 1);\n}","tagName":"pre"},{"text":"<style>\n  ef-led-gauge[red-blue-scale] {\n    --center-right-segment-color: rgba(60, 60, 200, 0.65);\n    --right-segment-color: rgba(60, 60, 200, 1);\n  }\n</style>\n<ef-led-gauge red-blue-scale></ef-led-gauge>","tagName":"pre"},{"text":"\nCSS Variables Name\nDescription\n","tagName":"tr"},{"text":"\n--top-selected-color\nColor of top-value bar\n","tagName":"tr"},{"text":"\n--clash-color\nColor of bar when top-value and bottom-value are the same\n","tagName":"tr"},{"text":"\n--bottom-selected-color\nColor of bottom-value bar\n","tagName":"tr"},{"text":"\n--range-color\nColor of range bar\n","tagName":"tr"},{"text":"\n--neutral-color\nBars color in mono color mode\n","tagName":"tr"},{"text":"\n--left-segment-color\nBars color of most left segment\n","tagName":"tr"},{"text":"\n--center-left-segment-color\nBars color of center left segment\n","tagName":"tr"},{"text":"\n--center-segment-color\nBars color of center segment\n","tagName":"tr"},{"text":"\n--center-right-segment-color\nBars color of center right segment\n","tagName":"tr"},{"text":"\n--right-segment-color\nBars color of most right segment\n","tagName":"tr"},{"text":"API Reference","tagName":"h2"},{"text":"Attributes","tagName":"h3"},{"text":"Properties","tagName":"h3"}]},{"title":"Progress Bar","filename":"elements/progress-bar.html","contents":[{"text":"<ef-progress-bar class=\"red\"></ef-progress-bar>\n<ef-progress-bar class=\"pink\"></ef-progress-bar>\n<ef-progress-bar class=\"purple\"></ef-progress-bar>\n<ef-progress-bar class=\"indigo\"></ef-progress-bar>\n<ef-progress-bar class=\"navy\"></ef-progress-bar>","tagName":"pre"},{"text":"var val;\nvar bar;\nvar bars = document.body.querySelectorAll('ef-progress-bar');\nvar i = 0;\nvar shift = 0;\nvar max = bars.length;\nsetInterval(function() {\n  val = 100 / max * ((i + shift) % max + 1);\n  bar = bars[i++ % max];\n  bar.value = val;\n  if (i % max === 0) {\n    shift++;\n  }\n}, 333);","tagName":"pre"},{"text":".red {\n  color: #F44336;\n}\n\n.pink {\n  color: #E91E63;\n}\n\n.purple {\n  color: #9C27B0;\n}\n\n.indigo {\n  color: #3F51B5;\n}\n\n.navy {\n  color: #334e96;\n}\n\nef-progress-bar {\n  margin-bottom: 10px;\n  max-width: 600px;\n}","tagName":"pre"},{"text":"ef-progress-bar is a simple visualization to display a single bar. It accepts a value between 0-100 and uses it as a percentage to fill the bar.","tagName":"p"},{"text":"Set bar length","tagName":"h3"},{"text":"The length of the bar can be set using the value attribute, which can be any decimal number between 0 and 100.","tagName":"p"},{"text":"<ef-progress-bar value=\"100\"></ef-progress-bar>\n<ef-progress-bar value=\"75\"></ef-progress-bar>\n<ef-progress-bar value=\"50\"></ef-progress-bar>\n<ef-progress-bar value=\"25\"></ef-progress-bar>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"html {\n  padding-top: 10px;\n  margin-bottom: 10px;\n}\n\nef-progress-bar {\n  margin-bottom: 10px;\n}","tagName":"pre"},{"text":"<ef-progress-bar value=\"100\"></ef-progress-bar>\n<ef-progress-bar value=\"75\"></ef-progress-bar>\n<ef-progress-bar value=\"50\"></ef-progress-bar>\n<ef-progress-bar value=\"25\"></ef-progress-bar>","tagName":"pre"},{"text":"Show label","tagName":"h3"},{"text":"You can set the label attribute to display text at the end of a bar. To prevent a label from going outside of a container, apply the margin-right attribute.","tagName":"p"},{"text":"ef-progress-bar {\n  margin-right: 45px;\n}","tagName":"pre"},{"text":"<ef-progress-bar value=\"100\" label=\"100\"></ef-progress-bar>","tagName":"pre"},{"text":"<ef-progress-bar value=\"100\" label=\"100\"></ef-progress-bar>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"html {\n  padding-top: 10px;\n  padding-bottom: 45px\n}\n\nef-progress-bar {\n  margin-right: 45px;\n  margin-bottom: 45px\n}","tagName":"pre"},{"text":"Customize height and color","tagName":"h3"},{"text":"Bar color and height have default values from the theme, but you can override them using CSS.","tagName":"p"},{"text":"<ef-progress-bar value=\"20\" label=\"Potato Croquettes\"></ef-progress-bar>\n<ef-progress-bar value=\"50\" label=\"Hamburger\"></ef-progress-bar>\n<ef-progress-bar class=\"highlighted\" value=\"70\" label=\"Sushi\"></ef-progress-bar>\n<ef-progress-bar value=\"35\" label=\"Toast\"></ef-progress-bar>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"ef-progress-bar {\n  height: 16px;\n}\n\n.highlighted {\n  color: #000000;\n}\n\nhtml {\n  padding-top: 10px;\n  padding-bottom: 45px\n}\n\nef-progress-bar {\n  margin-right: 45px;\n  margin-bottom: 10px\n}","tagName":"pre"},{"text":"ef-progress-bar {\n  height: 16px;\n}\n.highlighted {\n  color: #000000;\n}","tagName":"pre"},{"text":"<ef-progress-bar value=\"20\" label=\"Potato Croquettes\"></ef-progress-bar>\n<ef-progress-bar value=\"50\" label=\"Hamburger\"></ef-progress-bar>\n<ef-progress-bar class=\"highlighted\" value=\"70\" label=\"Sushi\"></ef-progress-bar>\n<ef-progress-bar value=\"65\" label=\"Toast\"></ef-progress-bar>","tagName":"pre"},{"text":"Label slot","tagName":"h3"},{"text":"The label attribute supports only text. You can use slot to include any content e.g. icons or customize your label colour.","tagName":"p"},{"text":"You may have to add some CSS to your content, to ensure that it looks nice.","tagName":"p"},{"text":"<ef-progress-bar value=\"85\">\n  <ef-icon class=\"thumb\" slot=\"label\" icon=\"like-empty\"></ef-icon>\n</ef-progress-bar>\n<ef-progress-bar value=\"15\">\n  <ef-icon class=\"thumb\" slot=\"label\" icon=\"dislike-empty\"></ef-icon>\n</ef-progress-bar>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"ef-progress-bar {\n  margin-bottom: 10px;\n}\n\nef-progress-bar .thumb {\n  position: absolute;\n  top: -8px;\n}","tagName":"pre"},{"text":"ef-progress-bar .thumb {\n  position: absolute;\n  top: -8px;\n}","tagName":"pre"},{"text":"<ef-progress-bar value=\"85\">\n  <ef-icon class=\"thumb\" slot=\"label\" icon=\"like-empty\"></ef-icon>\n</ef-progress-bar>\n<ef-progress-bar value=\"15\">\n  <ef-icon class=\"thumb\" slot=\"label\" icon=\"dislike-empty\"></ef-icon>\n</ef-progress-bar>","tagName":"pre"},{"text":"Slots","tagName":"h2"},{"text":"API Reference","tagName":"h2"},{"text":"Attributes","tagName":"h3"},{"text":"Properties","tagName":"h3"}]},{"title":"Rating","filename":"elements/rating.html","contents":[{"text":"<ef-rating value=\"2\"></ef-rating>\n<ef-rating value=\"4\" interactive></ef-rating>\n<ef-rating value=\"7.5\" max=\"10\"></ef-rating>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"ef-rating {\n  margin-right: 25px;\n}","tagName":"pre"},{"text":"ef-rating is a star visualization component that is typically used for ranking.","tagName":"p"},{"text":"Basic usage","tagName":"h3"},{"text":"By default, ef-rating is displayed with no stars selected. Setting value selects/highlights stars.","tagName":"p"},{"text":"<ef-rating></ef-rating>\n<ef-rating value=\"2\"></ef-rating>\n<ef-rating value=\"3.5\"></ef-rating>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"ef-rating {\n  margin-right: 25px;\n}","tagName":"pre"},{"text":"<ef-rating></ef-rating>\n<ef-rating value=\"2\"></ef-rating>\n<ef-rating value=\"3.5\"></ef-rating>","tagName":"pre"},{"text":"Customize number of stars and size","tagName":"h3"},{"text":"The maximum number of stars can be overridden by setting max.","tagName":"p"},{"text":"<ef-rating max=\"10\"></ef-rating>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"<ef-rating max=\"10\"></ef-rating>","tagName":"pre"},{"text":"The size of the stars can be changed using standard CSS styles.","tagName":"p"},{"text":"<ef-rating id=\"custom\" value=\"2.5\"></ef-rating>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"#custom {\n  font-size: 30px;\n}","tagName":"pre"},{"text":"#custom {\n  font-size:30px;\n}","tagName":"pre"},{"text":"<ef-rating id=\"custom\" value=\"2.5\"></ef-rating>","tagName":"pre"},{"text":"Interactive Rating","tagName":"h3"},{"text":"By default users cannot change the value of ef-rating. Specifying interactive makes it possible for users to change the value.","tagName":"p"},{"text":"<ef-rating id=\"rateRestaurant\" max=\"10\" value=\"7\" interactive></ef-rating>\n<pre id=\"result\"></pre>","tagName":"pre"},{"text":"var customRating = document.getElementById('rateRestaurant');\ncustomRating.addEventListener('value-changed', function(e) {\n  document.getElementById('result').textContent = 'You have selected: ' + e.detail.value;\n});","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"<ef-rating max=\"10\" value=\"7\" interactive></ef-rating>\n<pre id=\"result\"></pre>","tagName":"pre"},{"text":"let customRating = document.getElementById('rateRestaurant');\ncustomRating.addEventListener('value-changed', (e) =>  {\n  document.getElementById('result').textContent = 'You have selected: ' + e.detail.value;\n});","tagName":"pre"},{"text":"Clear rating by users interaction","tagName":"h3"},{"text":"A rating can be cleared after user interaction sets value.","tagName":"p"},{"text":"var el = document.querySelector('ef-rating');\nvar previousValue = el.value;\n\nel.addEventListener('tap', function (e) {\n\n  if ((el.value === previousValue)) {\n    el.value = '0';\n  }\n\n  previousValue = el.value\n});","tagName":"pre"},{"text":"Dynamic Rating","tagName":"h3"},{"text":"In many scenarios, ef-rating is dynamically generated based on input data. This can be easily achieved within ef-grid with a custom renderer.","tagName":"p"},{"text":"<ef-grid id=\"custom\" height=\"208px\"></ef-grid>","tagName":"pre"},{"text":"var grid = document.getElementById('custom');\ngrid.config = {\n  columns: [{\n      id: 'c1',\n      title: 'Restaurant Name',\n      field: 'restaurantName'\n    },\n    {\n      id: 'c2',\n      title: 'Rating',\n      field: 'averageRating',\n      formatter: {\n        render: function() {},\n        bind: function(rowIndex, columnIndex, value, cell, columnDef, dataRow, dataTable) {\n          var rating = cell.getContent();\n          if (!rating) {\n            rating = document.createElement('ef-rating');\n          }\n          rating.value = value;\n          cell.setContent(rating);\n        }\n      }\n    }\n  ],\n  dataModel: {\n    fields: ['restaurantName', 'averageRating'],\n    format: 'rows',\n    data: [{\n        restaurantName: 'Fancy Burgers',\n        averageRating: '4.8'\n      },\n      {\n        restaurantName: 'Under The Bridge',\n        averageRating: '0.5'\n      },\n      {\n        restaurantName: 'Large Pizzas',\n        averageRating: '4'\n      },\n      {\n        restaurantName: 'Evening Dreams',\n        averageRating: '3'\n      },\n      {\n        restaurantName: 'Fish Paradise',\n        averageRating: '3.2'\n      }\n    ]\n  }\n};","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"<ef-grid id=\"custom\" height=\"208px\"></ef-grid>","tagName":"pre"},{"text":"let grid = document.getElementById('custom');\ngrid.config = {\n  columns: [\n    {\n      id: 'c1',\n      title: 'Restaurant Name',\n      field: 'restaurantName'\n    },\n    {\n      id: 'c2',\n      title: 'Rating',\n      field: 'averageRating',\n      formatter: {\n        render: function () { },\n        bind: function (rowIndex, columnIndex, value, cell, columnDef, dataRow, dataTable) {\n          var rating = cell.getContent();\n          if (!rating) {\n            rating = document.createElement('ef-rating');\n          }\n          rating.value = value;\n          cell.setContent(rating);\n        }\n      }\n    }\n  ],\n  dataModel: {\n    fields: ['restaurantName', 'averageRating'],\n    format: 'rows',\n    data: [\n      { restaurantName: 'Fancy Burgers', averageRating: '4.8' },\n      { restaurantName: 'Under The Bridge', averageRating: '0.5' },\n      { restaurantName: 'Large Pizzas', averageRating: '4' },\n      { restaurantName: 'Evening Dreams', averageRating: '3' },\n      { restaurantName: 'Fish Paradise', averageRating: '3.2' } ]\n  }\n};","tagName":"pre"},{"text":"API Reference","tagName":"h2"},{"text":"Attributes","tagName":"h3"},{"text":"Properties","tagName":"h3"},{"text":"Events","tagName":"h3"}]},{"title":"Sparkline","filename":"elements/sparkline.html","contents":[{"text":"<ef-sparkline reference-value=\"0\" data=\"[-2, -3, 1, 1, 4, 6, -3, 1, 4, 6, 10, 9, 10, 9, 6, 4, 5, 0, 3, 2, 3, -1, -4, 2, 3, 4, 3, 6]\"></ef-sparkline>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"ef-sparkline {\n  width: 250px;\n  height: 100px;\n}","tagName":"pre"},{"text":"ef-sparkline is a small chart component for quickly representing historical data without axes.","tagName":"p"},{"text":"Basic usage","tagName":"h3"},{"text":"To create a sparkline, pass data as an array of numbers using the data attribute. The style of the sparkline is managed by the theme, but chart size can be customized using standard CSS.","tagName":"p"},{"text":"<ef-sparkline data=\"[-2, -3, 1, 1, 4, 6, -3, 1, 4, 6, 10, 9, 10, 9, 6, 4, 5, 0, 3, 2, 3, -1, -4, 2, 3, 4, 3, 6]\"></ef-sparkline>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"ef-sparkline {\n  width: 200px;\n  height: 100px;\n}","tagName":"pre"},{"text":"ef-sparkline {\n  width: 200px;\n  height: 100px;\n}","tagName":"pre"},{"text":"<ef-sparkline data=\"[-2, -3, 1, 1, 4, 6, -3, 1, 4, 6, 10, 9, 10, 9, 6, 4, 5, 0, 3, 2, 3, -1, -4, 2, 3, 4, 3, 6]\"></ef-sparkline>","tagName":"pre"},{"text":"Reference line","tagName":"h3"},{"text":"Sparkline supports adding a reference line. The area above or below the reference line will be filled with different colors. The reference value can be set using the reference-value attribute or the referenceValue property.","tagName":"p"},{"text":"<ef-sparkline reference-value=\"0\" data=\"[-2, -3, 1, 1, 4, 6, -3, 1, 4, 6, 10, 9, 10, 9, 6, 4, 5, 0, 3, 2, 3, -1, -4, 2, 3, 4, 3, 6]\"></ef-sparkline>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"ef-sparkline {\n  width: 200px;\n  height: 100px;\n}","tagName":"pre"},{"text":"<ef-sparkline reference-value=\"0\" data=\"[-2, -3, 1, 1, 4, 6, -3, 1, 4, 6, 10, 9, 10, 9, 6, 4, 5, 0, 3, 2, 3, -1, -4, 2, 3, 4, 3, 6]\"></ef-sparkline>","tagName":"pre"},{"text":"Display previous data","tagName":"h3"},{"text":"Sparkline can be set to display previous data with an inactive line color. It's common to use previous data for comparison with the current dataset.","tagName":"p"},{"text":"When previous-data is provided, sparkline will use the value of last point in the dataset as a reference line. It is recommended to not set reference-value when previous data is used.","tagName":"p"},{"text":"<ef-sparkline previous-data=\"[-3, -2, 1, 0, 4, 2, -2, 4, 4, 6, -1]\" data=\"[-2, -3, 1, 1, 4, 6, -3, 1, 4, 6, 10, 9, 10, 9, 3, 4, 3, 6]\"></ef-sparkline>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"ef-sparkline {\n  width: 200px;\n  height: 100px;\n}","tagName":"pre"},{"text":"<ef-sparkline previous-data=\"[-3, -2, 1, 0, 4, 2, -2, 4, 4, 6, -1]\" data=\"[-2, -3, 1, 1, 4, 6, -3, 1, 4, 6, 10, 9, 10, 9, 3, 4, 3, 6]\"></ef-sparkline>","tagName":"pre"},{"text":"Customize colors and line width","tagName":"h3"},{"text":"Sparkline colors and line width are managed by the theme but can be overridden using CSS variables.","tagName":"p"},{"text":"<ef-sparkline custom-line-color data=\"[-2, -3, 1, 1, 4, 6, -3, 1, 4, 6, 10, 9, 10, 9, 6, 4, 5, 0, 3, 2, 3, -1, -4, 2, 3, 4, 3, 6]\"></ef-sparkline>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"ef-sparkline[custom-line-color] {\n  width: 200px;\n  height: 100px;\n  --line-color: #D94255;\n  --line-width: 5px;\n}","tagName":"pre"},{"text":"<style>\n  ef-sparkline[custom-line-color] {\n    --line-color: #D94255;\n    --line-width: 5px;\n  }\n</style>\n<ef-sparkline custom-line-color data=\"[-2, -3, 1, 1, 4, 6, -3, 1, 4, 6, 10, 9, 10, 9, 6, 4, 5, 0, 3, 2, 3, -1, -4, 2, 3, 4, 3, 6]\"></ef-sparkline>","tagName":"pre"},{"text":"\nCSS Variables Names\nDescription\n","tagName":"tr"},{"text":"\n--line-color\nLine color\n","tagName":"tr"},{"text":"\n--line-width\nLine width\n","tagName":"tr"},{"text":"\n--reference-line-color\nReference line color\n","tagName":"tr"},{"text":"\n--previous-line-color\nPrevious data line color\n","tagName":"tr"},{"text":"\n--upper-line-color\nColor of line that is higher than the reference value\n","tagName":"tr"},{"text":"\n--lower-line-color\nColor of line that is lower than the reference value\n","tagName":"tr"},{"text":"\n--fill-color-style\nColor style of higher and lower area. (e.g. gradient, solid or none)\n","tagName":"tr"},{"text":"API Reference","tagName":"h2"},{"text":"Attributes","tagName":"h3"},{"text":"Properties","tagName":"h3"},{"text":"Events","tagName":"h3"}]},{"title":"Swing Gauge","filename":"elements/swing-gauge.html","contents":[{"text":"<ef-swing-gauge primary-value=\"29\" primary-label=\"Private\" secondary-value=\"95\" secondary-label=\"Public\">\n</ef-swing-gauge>","tagName":"pre"},{"text":"let value1;\nlet value2;\nconst min = 20;\nlet gauge = document.querySelector('ef-swing-gauge');\n\nsetInterval(function() {\n  value1 = min + (100 - min * 2) * Math.random();\n  value2 = 100 - value1;\n  gauge.primaryValue = value1;\n  gauge.secondaryValue = value2;\n}, 2000);","tagName":"pre"},{"text":"ef-swing-gauge {\n  height: 150px;\n  margin-top: 20px;\n}","tagName":"pre"},{"text":"ef-swing-gauge is a data visualization element used to display the percentage comparison of two values.","tagName":"p"},{"text":"Set gauge value and label","tagName":"h3"},{"text":"Values can be set to the gauge using the primary-value and secondary-value attributes. The percentage values shown in the gauge will be calculated by comparing primary-value and secondary-value. To show labels in the gauge set the text to the  primary-label and secondary-label attributes.","tagName":"p"},{"text":"<ef-swing-gauge primary-value=\"30\" secondary-value=\"70\" primary-label=\"Private\" secondary-label=\"Public\">\n</ef-swing-gauge>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"ef-swing-gauge {\n  height: 150px;\n}","tagName":"pre"},{"text":"<ef-swing-gauge\n  primary-value=\"30\"\n  secondary-value=\"70\"\n  primary-label=\"Private\"\n  secondary-label=\"Public\">\n</ef-swing-gauge>","tagName":"pre"},{"text":"Legend","tagName":"h3"},{"text":"To show any legends in the gauge you can set the text to primary-legend and secondary-legend attributes. Legends will show on top of the gauge.","tagName":"p"},{"text":"<ef-swing-gauge primary-value=\"550\" secondary-value=\"770\" primary-label=\"Private\" secondary-label=\"Public\" primary-legend=\"Private companies in United States\" secondary-legend=\"Public companies in United States\">\n</ef-swing-gauge>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"<ef-swing-gauge\n  primary-value=\"550\"\n  secondary-value=\"770\"\n  primary-label=\"Private\"\n  secondary-label=\"Public\"\n  primary-legend=\"Private companies in United States\"\n  secondary-legend=\"Public companies in United States\">\n</ef-swing-gauge>","tagName":"pre"},{"text":"Sizing","tagName":"h3"},{"text":"Swing Gauge has default size but you can customize width or height by using CSS.","tagName":"p"},{"text":"<div>\n  <ef-swing-gauge small-gauge primary-value=\"30\" secondary-value=\"70\" primary-label=\"Private\" secondary-label=\"Public\">\n  </ef-swing-gauge>\n</div>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"ef-swing-gauge {\n  height: 100px;\n}","tagName":"pre"},{"text":"<style>\n  ef-swing-gauge {\n    height: 100px;\n  }\n</style>","tagName":"pre"},{"text":"Customize value format","tagName":"h3"},{"text":"The value that shows on Swing Gauge can be custom via the valueFormatter property. The first parameter will be the percentage that calculates by the input value. The second parameter will be the raw value of your input.","tagName":"p"},{"text":"<ef-swing-gauge id=\"customValueFormat\" primary-value=\"15\" secondary-value=\"69\" primary-label=\"Private\" secondary-label=\"Public\"></ef-swing-gauge>","tagName":"pre"},{"text":"const el = document.getElementById('customValueFormat');\nel.valueFormatter = function(value, rawValue) {\n  return value.toFixed(0) + '%';\n};","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"const el = document.getElementById('customValueFormat');\nel.valueFormatter = function (value, rawValue) { \n  return value.toFixed(0) + '%'';\n};","tagName":"pre"},{"text":"Customize colors and center line","tagName":"h3"},{"text":"Colors and center line of Swing Gauge are managed by theme but can be overridden by using CSS variables.","tagName":"p"},{"text":"<ef-swing-gauge custom-color primary-label=\"Private\" secondary-label=\"Public\" primary-value=\"40\" secondary-value=\"60\">\n</ef-swing-gauge>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"ef-swing-gauge[custom-color] {\n  --primary-color: #ff9933;\n  --secondary-color: #9933ff;\n  --border-color: transparent;\n  --center-line: dashed;\n  --center-line-color: #42f48c;\n  --center-line-opacity: 1;\n}","tagName":"pre"},{"text":"<style>\n  ef-swing-gauge[custom-color] {\n    --primary-color: #ff9933;\n    --secondary-color: #9933ff;\n    --border-color: transparent;\n    --center-line: dashed;\n    --center-line-color: #42f48c;\n    --center-line-opacity: 1;\n  }\n</style>","tagName":"pre"},{"text":"<ef-swing-gauge\n  custom-color\n  primary-label=\"Private\"\n  secondary-label=\"Public\"\n  primary-value=\"40\"\n  secondary-value=\"60\">\n</ef-swing-gauge>","tagName":"pre"},{"text":"\nCSS Variables Name\nDescription\n","tagName":"tr"},{"text":"\n--primary-color\nColor of primary gauge\n","tagName":"tr"},{"text":"\n--secondary-color\nColor of secondary gauge\n","tagName":"tr"},{"text":"\n--border-color\nColor of border\n","tagName":"tr"},{"text":"\n--center-line\nStyle of center line (solid, dotted, dashed or none)\n","tagName":"tr"},{"text":"\n--center-line-color\nColor of center line\n","tagName":"tr"},{"text":"\n--center-line-opacity\nOpacity/Transparency of center line\n","tagName":"tr"},{"text":"API Reference","tagName":"h2"},{"text":"Attributes","tagName":"h3"},{"text":"Properties","tagName":"h3"}]},{"title":"Tornado Chart","filename":"elements/tornado-chart.html","contents":[{"text":"  <ef-tornado-chart primary=\"7+ hours\" secondary=\"less than 7 hours\">\n    <ef-tornado-item primary-value=\"61\" primary-label=\"61%\" secondary-value=\"39\" secondary-label=\"39%\">India</ef-tornado-item>\n    <ef-tornado-item primary-value=\"35\" primary-label=\"35%\" secondary-value=\"65\" secondary-label=\"65%\">China</ef-tornado-item>\n    <ef-tornado-item primary-value=\"28\" primary-label=\"28%\" secondary-value=\"72\" secondary-label=\"72%\">Thailand</ef-tornado-item>\n    <ef-tornado-item primary-value=\"25\" primary-label=\"25%\" secondary-value=\"75\" secondary-label=\"75%\" highlighted>Global Average</ef-tornado-item>\n    <ef-tornado-item primary-value=\"22\" primary-label=\"22%\" secondary-value=\"78\" secondary-label=\"78%\">United\n      States</ef-tornado-item>\n    <ef-tornado-item primary-value=\"10\" primary-label=\"10%\" secondary-value=\"90\" secondary-label=\"90%\">Britain</ef-tornado-item>\n    <ef-tornado-item primary-value=\"5\" primary-label=\"5%\" secondary-value=\"95\" secondary-label=\"95%\">Finland</ef-tornado-item>\n  </ef-tornado-chart>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"ef-tornado-chart visually represents differences or similarities between values. It provides options to add a chart header, add a footer or highlight items.","tagName":"p"},{"text":"Basic usage","tagName":"h3"},{"text":"ef-tornado-chart is a collection of bars defined by ef-tornado-item. Each item comprises a primary bar and a secondary bar.","tagName":"p"},{"text":"ef-tornado-item supports the attributes below.","tagName":"p"},{"text":"\nTornado Item Attributes\nDescription\n","tagName":"tr"},{"text":"\nprimary-value\nValue of primary bar, 0-100\n","tagName":"tr"},{"text":"\nprimary-label\nText to show on primary bar\n","tagName":"tr"},{"text":"\nsecondary-value\nValue of secondary bar, 0-100\n","tagName":"tr"},{"text":"\nsecondary-label\nText to show on secondary bar\n","tagName":"tr"},{"text":"<ef-tornado-chart primary=\"7+ hours\" secondary=\"less than 7 hours\">\n  <ef-tornado-item\n    primary-value=\"61\"\n    primary-label=\"61%\"\n    secondary-value=\"39\"\n    secondary-label=\"39%\"\n    >India</ef-tornado-item\n  >\n  <ef-tornado-item\n    primary-value=\"35\"\n    primary-label=\"35%\"\n    secondary-value=\"65\"\n    secondary-label=\"65%\"\n    >China</ef-tornado-item\n  >\n  <ef-tornado-item\n    primary-value=\"5\"\n    primary-label=\"5%\"\n    secondary-value=\"95\"\n    secondary-label=\"95%\"\n    >Finland</ef-tornado-item\n  >\n</ef-tornado-chart>","tagName":"pre"},{"text":"Highlighted items","tagName":"h3"},{"text":"You can add the highlighted attribute to ef-tornado-item to apply the highlighted style. You can produce the same result by setting the property to true.","tagName":"p"},{"text":"<ef-tornado-item\n  primary-value=\"25\"\n  primary-label=\"25%\"\n  secondary-value=\"75\"\n  secondary-label=\"75%\"\n  highlighted\n  >Global Average</ef-tornado-item\n>","tagName":"pre"},{"text":"Header and footer","tagName":"h3"},{"text":"Any HTML content can be added to the header and footer section of the chart using the header and footer slot, respectively.","tagName":"p"},{"text":"<ef-tornado-chart primary=\"7+ hours\" secondary=\"less than 7 hours\">\n  <ef-tornado-item primary-value=\"61\" primary-label=\"61%\" secondary-value=\"39\" secondary-label=\"39%\">India</ef-tornado-item>\n  <ef-tornado-item primary-value=\"35\" primary-label=\"35%\" secondary-value=\"65\" secondary-label=\"65%\">China</ef-tornado-item>\n  <ef-tornado-item primary-value=\"28\" primary-label=\"28%\" secondary-value=\"72\" secondary-label=\"72%\">Singapore</ef-tornado-item>\n  <ef-tornado-item primary-value=\"25\" primary-label=\"25%\" secondary-value=\"75\" secondary-label=\"75%\" highlighted>Global Average</ef-tornado-item>\n  <ef-tornado-item primary-value=\"22\" primary-label=\"22%\" secondary-value=\"78\" secondary-label=\"78%\">United\n    States</ef-tornado-item>\n  <ef-tornado-item primary-value=\"10\" primary-label=\"10%\" secondary-value=\"90\" secondary-label=\"90%\">Britain</ef-tornado-item>\n  <ef-tornado-item primary-value=\"5\" primary-label=\"5%\" secondary-value=\"95\" secondary-label=\"95%\">Finland</ef-tornado-item>\n  <div slot=\"header\">\n    <h3>In loco parentis</h3>\n    <p>How much time do you spend on average helping your child academically with their education* per week?</p>\n    <p class=\"sub-title\">December 2017</p>\n  </div>\n  <div slot=\"footer\">\n    <p>Source: The Varkey Foundation</p>\n    <p>*Reading to them or helping with homework</p>\n  </div>\n</ef-tornado-chart>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"ef-tornado-chart {\n  padding-top: 30px;\n}\n\n[slot=header] {\n  margin-bottom: 15px;\n}\n\n[slot=header] p {\n  margin: 0;\n}\n\n[slot=footer],\n[slot=header] .sub-title {\n  font-size: 12px;\n}\n\n[slot=footer] {\n  display: flex;\n  flex-wrap: wrap;\n  align-items: center;\n  justify-content: space-between;\n  margin-top: 15px;\n}\n\n[slot=footer]>* {\n  margin-right: 10px;\n  margin-bottom: 5px;\n}","tagName":"pre"},{"text":"<ef-tornado-chart>\n  <ef-tornado-item>...</ef-tornado-item>\n  <ef-tornado-item>...</ef-tornado-item>\n  ...\n  <ef-tornado-item>...</ef-tornado-item>\n  <div slot=\"header\">\n    <h3>In loco parentis</h3>\n    <p>\n      How much time do you spend on average helping your child academically with\n      their education* per week?\n    </p>\n    <p class=\"sub-title\">December 2017</p>\n  </div>\n  <div slot=\"footer\">\n    <p>Source: The Varkey Foundation</p>\n    <p>*Reading to them or helping with homework</p>\n  </div>\n</ef-tornado-chart>","tagName":"pre"},{"text":"Customize colors","tagName":"h3"},{"text":"Colors of the chart can be customized using CSS variables; --primary-color for primary bars and --secondary-color for secondary bars.","tagName":"p"},{"text":"The variables can be set at the ef-tornado-chart level and will be inherited by any ef-tornado-item. However, the variable can be set at the ef-tornado-item level, as well.","tagName":"p"},{"text":"<ef-tornado-chart class=\"custom-color\" primary=\"7+ hours\" secondary=\"less than 7 hours\">\n  <ef-tornado-item primary-value=\"61\" primary-label=\"61%\" secondary-value=\"39\" secondary-label=\"39%\">India</ef-tornado-item>\n  <ef-tornado-item primary-value=\"35\" primary-label=\"35%\" secondary-value=\"65\" secondary-label=\"65%\">China</ef-tornado-item>\n  <ef-tornado-item primary-value=\"28\" primary-label=\"28%\" secondary-value=\"72\" secondary-label=\"72%\">Singapore</ef-tornado-item>\n  <ef-tornado-item primary-value=\"25\" primary-label=\"25%\" secondary-value=\"75\" secondary-label=\"75%\" highlighted class=\"highlight-color\">Global Average</ef-tornado-item>\n  <ef-tornado-item primary-value=\"22\" primary-label=\"22%\" secondary-value=\"78\" secondary-label=\"78%\">United\n    States</ef-tornado-item>\n  <ef-tornado-item primary-value=\"10\" primary-label=\"10%\" secondary-value=\"90\" secondary-label=\"90%\">Britain</ef-tornado-item>\n  <ef-tornado-item primary-value=\"5\" primary-label=\"5%\" secondary-value=\"95\" secondary-label=\"95%\">Finland</ef-tornado-item>\n</ef-tornado-chart>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"ef-tornado-chart.custom-color {\n  padding-top: 30px;\n  --primary-color: #bf5f82;\n  --secondary-color: #f48fb1;\n}\n\nef-tornado-item.highlight-color {\n  --primary-color: #a00037;\n  --secondary-color: #d81b60;\n}","tagName":"pre"},{"text":"<style>\n  ef-tornado-chart.custom-color {\n    --primary-color: #bf5f82;\n    --secondary-color: #f48fb1;\n  }\n\n  ef-tornado-item.highlight-color {\n    --primary-color: #a00037;\n    --secondary-color: #d81b60;\n  }\n</style>","tagName":"pre"},{"text":"<ef-tornado-chart class=\"custom-color\">\n  <ef-tornado-item>...</ef-tornado-item>\n  <ef-tornado-item>...</ef-tornado-item>\n  <ef-tornado-item class=\"highlight-color\">...</ef-tornado-item>\n  <ef-tornado-item>...</ef-tornado-item>\n</ef-tornado-chart>","tagName":"pre"},{"text":"Responsiveness","tagName":"h3"},{"text":"Tornado chart has a default breakpoint value, specified in the theme file, to reflow the layout to a vertical style when it is too small. You can override the value by using css variable, --responsive-width.","tagName":"p"},{"text":"<ef-tornado-chart responsive primary=\"7+ hours\" secondary=\"less than 7 hours\">\n  <ef-tornado-item primary-value=\"61\" primary-label=\"61%\" secondary-value=\"39\" secondary-label=\"39%\">India</ef-tornado-item>\n  <ef-tornado-item primary-value=\"35\" primary-label=\"35%\" secondary-value=\"65\" secondary-label=\"65%\">China</ef-tornado-item>\n  <ef-tornado-item primary-value=\"28\" primary-label=\"28%\" secondary-value=\"72\" secondary-label=\"72%\">Singapore</ef-tornado-item>\n  <ef-tornado-item primary-value=\"25\" primary-label=\"25%\" secondary-value=\"75\" secondary-label=\"75%\" highlighted class=\"highlight-color\">Global Average</ef-tornado-item>\n  <ef-tornado-item primary-value=\"22\" primary-label=\"22%\" secondary-value=\"78\" secondary-label=\"78%\">United\n    States</ef-tornado-item>\n  <ef-tornado-item primary-value=\"10\" primary-label=\"10%\" secondary-value=\"90\" secondary-label=\"90%\">Britain</ef-tornado-item>\n  <ef-tornado-item primary-value=\"5\" primary-label=\"5%\" secondary-value=\"95\" secondary-label=\"95%\">Finland</ef-tornado-item>\n</ef-tornado-chart>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"[responsive] {\n  --responsive-width: 400;\n  width: 380px;\n}\n\nef-tornado-chart {\n  padding-top: 30px;\n}","tagName":"pre"},{"text":"<style>\n  ef-tornado-chart {\n    --responsive-width: 400;\n  }\n</style>","tagName":"pre"},{"text":"CSS Variables","tagName":"h3"},{"text":"Tornado chart provides CSS variables to customize the chart.","tagName":"p"},{"text":"\nCSS Variables Name\nDescription\n","tagName":"tr"},{"text":"\n--responsive-width\nOverride the theme's breakpoint value to show vertical chart style, e.g. 400\n","tagName":"tr"},{"text":"\n--primary-color\nCustom primary bar color\n","tagName":"tr"},{"text":"\n--secondary-color\nCustom secondary bar color\n","tagName":"tr"},{"text":"Slots","tagName":"h2"},{"text":"API Reference","tagName":"h2"},{"text":"Attributes","tagName":"h3"},{"text":"Properties","tagName":"h3"}]},{"title":"Flag","filename":"elements/flag.html","contents":[{"text":"<ef-flag flag=\"us\"></ef-flag>\n<ef-flag flag=\"gb\"></ef-flag>\n<ef-flag flag=\"jp\"></ef-flag>\n<ef-flag flag=\"th\"></ef-flag>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"ef-flag {\n  font-size: 4em;\n}","tagName":"pre"},{"text":"ef-flag provides a collection of country flags. The list of available flags and flags code can be found in the Flag Page.","tagName":"p"},{"text":"Flag Page","tagName":"a"},{"text":"Basic usage","tagName":"h2"},{"text":"You can set a flag's code via the flag attribute to display the flag. Alternatively, instead of using the flag attribute, you can manually provide the url of an svg flag using the src attribute.","tagName":"p"},{"text":"<ef-flag flag=\"br\"></ef-flag>\n<ef-flag flag=\"ar\"></ef-flag>\n<ef-flag flag=\"co\"></ef-flag>\n\n<ef-flag src=\"https://cdn.refinitiv.com/public/libs/elf/assets/elf-theme-halo/resources/flags/bo.svg\"></ef-flag>\n<ef-flag src=\"https://cdn.refinitiv.com/public/libs/elf/assets/elf-theme-halo/resources/flags/pe.svg\"></ef-flag>\n<ef-flag src=\"https://cdn.refinitiv.com/public/libs/elf/assets/elf-theme-halo/resources/flags/cl.svg\"></ef-flag>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"<ef-flag flag=\"br\"></ef-flag>\n<ef-flag flag=\"ar\"></ef-flag>\n<ef-flag flag=\"co\"></ef-flag>\n\n<ef-flag src=\"https://cdn.refinitiv.com/public/libs/elf/assets/elf-theme-halo/resources/flags/bo.svg\"></ef-flag>\n<ef-flag src=\"https://cdn.refinitiv.com/public/libs/elf/assets/elf-theme-halo/resources/flags/pe.svg\"></ef-flag>\n<ef-flag src=\"https://cdn.refinitiv.com/public/libs/elf/assets/elf-theme-halo/resources/flags/cl.svg\"></ef-flag>","tagName":"pre"},{"text":"Changing size","tagName":"h2"},{"text":"Flags are displayed in 4:3 aspect ratio. Flag size can be set using font-size.","tagName":"p"},{"text":"<ef-flag class=\"small\" flag=\"gb\"></ef-flag>\n<ef-flag class=\"medium\" flag=\"gb\"></ef-flag>\n<ef-flag class=\"large\" flag=\"gb\"></ef-flag>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":".small {\n  font-size: 1em;\n}\n\n.medium {\n  font-size: 2em;\n}\n\n.large {\n  font-size: 60px;\n}","tagName":"pre"},{"text":"<style>\n.small {\n  font-size: 1em;\n}\n.medium {\n  font-size: 2em;\n}\n.large {\n  font-size: 60px;\n}\n</style>","tagName":"pre"},{"text":"<ef-flag class=\"small\" flag=\"gb\"></ef-flag>\n<ef-flag class=\"medium\" flag=\"gb\"></ef-flag>\n<ef-flag class=\"large\" flag=\"gb\"></ef-flag>","tagName":"pre"},{"text":"Preloading","tagName":"h2"},{"text":"ef-flag has the helper function to preload a set of flags. It could help to load flags faster if you have a known set of flags for use in the app. It accepts both flag name or svg location, either single flag or multiple.","tagName":"p"},{"text":"Preload of flags will be deferred until the first ef-flag component created.","tagName":"p"},{"text":"import { preload } from \"@refinitiv-ui/elements/lib/flag\";\n\npreload(\"us\");\npreload(\"au\", \"nz\");\npreload(\n  \"https://cdn.refinitiv.com/public/libs/elf/assets/elf-theme-halo/resources/flags/au.svg\",\n  \"https://cdn.refinitiv.com/public/libs/elf/assets/elf-theme-halo/resources/flags/nz.svg\",\n);","tagName":"pre"},{"text":"API Reference","tagName":"h2"},{"text":"Attributes","tagName":"h3"},{"text":"Properties","tagName":"h3"}]},{"title":"Icon","filename":"elements/icon.html","contents":[{"text":"<ef-icon icon=\"tick\"></ef-icon>\n<ef-icon icon=\"search\"></ef-icon>\n<ef-icon icon=\"word\"></ef-icon>\n<ef-icon icon=\"excel\"></ef-icon>\n<ef-icon id=\"powerpoint\" src=\"https://cdn.refinitiv.com/public/libs/elf/assets/elf-theme-halo/resources/icons/buzz.svg\"></ef-icon>\n<ef-icon id=\"pdf\" src=\"https://cdn.refinitiv.com/public/libs/elf/assets/elf-theme-halo/resources/icons/chart-area.svg\"></ef-icon>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"Icons are provided as part of a theme. Icons also support pointing to urls of svg files. The size and coloring of icons can be changed using standard CSS.","tagName":"p"},{"text":"Basic usage","tagName":"h3"},{"text":"You can set an icon's name using the ef-icon attribute. Alternatively, you can set the url of an svg icon file using the src attribute.","tagName":"p"},{"text":"The list of available icons can be accessed on the Icon Page.","tagName":"p"},{"text":"Icon Page","tagName":"a"},{"text":"<ef-icon icon=\"tick\"></ef-icon>\n<ef-icon icon=\"search\"></ef-icon>\n<ef-icon icon=\"save\"></ef-icon>\n\n<ef-icon id=\"filter\" src=\"https://cdn.refinitiv.com/public/libs/elf/assets/elf-theme-halo/resources/icons/filter.svg\"></ef-icon>\n<ef-icon id=\"favorites\" src=\"https://cdn.refinitiv.com/public/libs/elf/assets/elf-theme-halo/resources/icons/favorites.svg\"></ef-icon>\n<ef-icon id=\"help\" src=\"https://cdn.refinitiv.com/public/libs/elf/assets/elf-theme-halo/resources/icons/help.svg\"></ef-icon>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"<ef-icon icon=\"tick\"></ef-icon>\n<ef-icon icon=\"search\"></ef-icon>\n<ef-icon icon=\"save\"></ef-icon>\n\n<ef-icon id=\"filter\" src=\"https://cdn.refinitiv.com/public/libs/elf/assets/elf-theme-halo/resources/icons/filter.svg\"></ef-icon>\n<ef-icon id=\"favorites\" src=\"https://cdn.refinitiv.com/public/libs/elf/assets/elf-theme-halo/resources/icons/favorites.svg\"></ef-icon>\n<ef-icon id=\"help\" src=\"https://cdn.refinitiv.com/public/libs/elf/assets/elf-theme-halo/resources/icons/help.svg\"></ef-icon>","tagName":"pre"},{"text":"Changing size and color","tagName":"h3"},{"text":"The size and color of an icon can be changed using standard CSS styling.","tagName":"p"},{"text":"<ef-icon class=\"small\" icon=\"flag-2\"></ef-icon>\n<ef-icon class=\"medium\" icon=\"flag-2\"></ef-icon>\n<ef-icon class=\"large\" icon=\"flag-2\"></ef-icon>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"[icon=flag-2].small {\n  color: #309054;\n  font-size: 12px;\n}\n\n[icon=flag-2].medium {\n  color: #309054;\n  font-size: 16px;\n}\n\n[icon=flag-2].large {\n  color: #309054;\n  font-size: 24px;\n}","tagName":"pre"},{"text":"<style>\n[icon=flag-2].small {\n  color: #309054;\n  font-size: 12px;\n}\n[icon=flag-2].medium {\n  color: #309054;\n  font-size: 16px;\n}\n[icon=flag-2].large {\n  color: #309054;\n  font-size: 24px;\n}\n</style>","tagName":"pre"},{"text":"<ef-icon class=\"small\" icon=\"flag-2\"></ef-icon>\n<ef-icon class=\"medium\" icon=\"flag-2\"></ef-icon>\n<ef-icon class=\"large\" icon=\"flag-2\"></ef-icon>","tagName":"pre"},{"text":"Icon preloading","tagName":"h3"},{"text":"ef-icon has a helper function to preload a set of icons. Icons can be loaded faster if you have a known set of icons for use in the app.","tagName":"p"},{"text":"Preloading icons will be deferred until the first ef-icon component is created.","tagName":"p"},{"text":"import { preload } from '@refinitiv-ui/elements/lib/icon';\n\n// preload function supports both icon name or svg location, either single icon or multiple.\npreload('eye');\npreload('https://cdn.io/eye.svg');\npreload('eye', 'heart', 'like', 'arrow-up');\npreload(\n  'https://cdn.io/eye.svg',\n  'https://cdn.io/heart.svg',\n  'https://cdn.io/like.svg',\n  'https://cdn.io/arrow-up.svg'\n);","tagName":"pre"},{"text":"API Reference","tagName":"h2"},{"text":"Attributes","tagName":"h3"},{"text":"Properties","tagName":"h3"}]},{"title":"Vanilla","filename":"framework-integration/javascript.html","contents":[{"text":"EF elements are Web Component. They can be used with JavaScript frameworks or without a framework (vanilla JavaScript). This guideline provides how you can use EF elements without a framework, either with bundling tool or without bundling tool.","tagName":"p"},{"text":"Without bundling","tagName":"h2"},{"text":"It's the simplest and the quickest way for creating a quick standalone demo and getting started with EF. However, without any extra tools it will only support browsers that natively support JavaScript module syntax. [see list].","tagName":"p"},{"text":"[see list]","tagName":"a"},{"text":"EF elements are shipped as ES6 module. To use EF elements without a JavaScript framework, simply include a script with type=module into your HTML template.","tagName":"p"},{"text":"The following tutorial will guide you through creating a simple login page using EF.","tagName":"p"},{"text":"Initialize your project","tagName":"h3"},{"text":"Create a new project folder.","tagName":"p"},{"text":"mkdir project-demo\ncd project-demo","tagName":"pre"},{"text":"Use npm init command to initialize the project. It will create package.json file which contains application information and its dependencies.","tagName":"p"},{"text":"npm init","tagName":"pre"},{"text":"Install EF dependencies","tagName":"h3"},{"text":"Install element and theme packages using npm.","tagName":"p"},{"text":"npm i @refinitiv-ui/elements\nnpm i @refinitiv-ui/halo-theme","tagName":"pre"},{"text":"Project setup","tagName":"h3"},{"text":"Initialize HTML template","tagName":"h4"},{"text":"Create file index.html with a typical HTML template.","tagName":"p"},{"text":"<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\" />\n    <title>A Simple HTML</title>\n  </head>\n  <body></body>\n</html>","tagName":"pre"},{"text":"Import component and theme modules","tagName":"h4"},{"text":"Create a script type=\"module\" tag that imports EF dependencies, then include it to index.html.","tagName":"p"},{"text":"<script type=\"module\">\n  import '@refinitiv-ui/elements/lib/button';\n  import '@refinitiv-ui/elements/lib/panel';\n  import '@refinitiv-ui/elements/lib/text-field';\n  import '@refinitiv-ui/elements/lib/password-field';\n\n  import '@refinitiv-ui/halo-theme/dark/imports/native-elements';\n  import '@refinitiv-ui/elements/lib/button/themes/halo/dark';\n  import '@refinitiv-ui/elements/lib/panel/themes/halo/dark';\n  import '@refinitiv-ui/elements/lib/text-field/themes/halo/dark';\n  import '@refinitiv-ui/elements/lib/password-field/themes/halo/dark';\n</script>","tagName":"pre"},{"text":"Create a login page","tagName":"h4"},{"text":"Now, we can start adding elements, styling and logics into index.html.","tagName":"p"},{"text":"<style>\n  ef-panel {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    width: 450px;\n    height: 100%;\n    margin: 40px auto;\n    border: solid 1px #e1e1e1;\n  }\n\n  h1 {\n    margin-top: 40px;\n  }\n</style>\n<ef-panel spacing>\n  <h1>Hello!</h1>\n  <ef-text-field placeholder=\"Username\"></ef-text-field>\n  <ef-password-field placeholder=\"Password\"></ef-password-field>\n  <div>\n    <ef-button disabled>Login</ef-button>\n    <ef-button>Cancel</ef-button>\n  </div>\n</ef-panel>\n<script>\n  const username = document.querySelector(\"ef-text-field\");\n  const password = document.querySelector(\"ef-password-field\");\n  const loginButton = document.querySelector(\"ef-button\");\n\n  const onTextChanges = function () {\n    if (username.value.length === 0 || password.value.length === 0) {\n      loginButton.disabled = true;\n    } else {\n      loginButton.disabled = false;\n    }\n  };\n\n  username.addEventListener(\"value-changed\", onTextChanges);\n  password.addEventListener(\"value-changed\", onTextChanges);\n\n  loginButton.addEventListener(\"tap\", function () {\n    document.querySelector(\"h1\").textContent = \"Done!\";\n  });\n</script>","tagName":"pre"},{"text":"Serving application","tagName":"h3"},{"text":"In order to correctly serve bare modules, we need a tool that rewrites the path. For the simplicity, we are going to use es-dev-server","tagName":"p"},{"text":"es-dev-server","tagName":"a"},{"text":"In the browser, import must get either a relative or absolute URL. Modules without any path are called “bare” modules.","tagName":"p"},{"text":"At root directory in your sample application, run this command to serve the app.","tagName":"p"},{"text":"npx es-dev-server --node-resolve --watch","tagName":"pre"},{"text":"<ef-panel spacing>\n  <h1>Hello!</h1>\n  <ef-text-field placeholder=\"Username\"></ef-text-field>\n  <ef-password-field placeholder=\"Password\"></ef-password-field>\n  <div>\n    <ef-button disabled>Login</ef-button>\n    <ef-button>Cancel</ef-button>\n  </div>\n</ef-panel>","tagName":"pre"},{"text":"const username = document.querySelector('ef-text-field');\nconst password = document.querySelector('ef-password-field');\nconst loginButton = document.querySelector('ef-button');\n\nconst onTextChanges = function() {\n  if (username.value.length === 0 || password.value.length === 0) {\n    loginButton.disabled = true;\n  } else {\n    loginButton.disabled = false;\n  }\n};\n\nusername.addEventListener('value-changed', onTextChanges);\npassword.addEventListener('value-changed', onTextChanges);\n\nloginButton.addEventListener('tap', function() {\n  document.querySelector('h1').textContent = 'Done!';\n});","tagName":"pre"},{"text":"ef-panel {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 450px;\n  height: 100%;\n  margin: 40px auto;\n}\n\nef-button {\n  margin: 15px 5px;\n}\n\nh1 {\n  margin-top: 40px;\n}","tagName":"pre"},{"text":"With bundling","tagName":"h2"},{"text":"On this part of tutorial, you are going to take a step further and look into setting up bundle configuration. In this example, you will build your application to support legacy browsers which are not neither support ES6 nor Web Component.","tagName":"p"},{"text":"We are going to use webpack as it is one of the most popular bundling tool. However, setup of the other bundling tools would be fundamentally similar.","tagName":"p"},{"text":"Installing the tools","tagName":"h3"},{"text":"Webpack","tagName":"h4"},{"text":"webpack is going to resolve modules import path, process and pack them into production-ready files. While webpack-dev-server will serves a webpack app and updates the browser on changes.","tagName":"p"},{"text":"npm i -D webpack@4 webpack-cli webpack-dev-server","tagName":"pre"},{"text":"Babel","tagName":"h4"},{"text":"babel will transpile modern JavaScript syntax (es6 or newer) into es5 which also works on older browsers. However, the bundle size will be larger and so it will have significant impact on the performance. babel relies on @babel/preset-env which will read a provided list of target browsers and compile accordingly.","tagName":"p"},{"text":"@babel/plugin-transform-runtime is a plugin that allows the re-use of Babel's injected helper code to optimize bundle size. This is used along with @babel/runtime, a runtime dependency. more","tagName":"p"},{"text":"more","tagName":"a"},{"text":"npm install -D babel-loader @babel/core @babel/preset-env @babel/plugin-transform-runtime","tagName":"pre"},{"text":"npm install @babel/runtime","tagName":"pre"},{"text":"core-js","tagName":"h4"},{"text":"core-js a module that provides polyfills for es6 and newer. It's required to use with babel.","tagName":"p"},{"text":"npm i core-js@3","tagName":"pre"},{"text":"Project setup","tagName":"h3"},{"text":"In src folder, create index.js and then import EF elements, themes and polyfills.","tagName":"p"},{"text":"// Polyfills\nimport '@refinitiv-ui/polyfills/minimal';\n\n// Components\nimport '@refinitiv-ui/elements/lib/button';\nimport '@refinitiv-ui/elements/lib/panel';\nimport '@refinitiv-ui/elements/lib/text-field';\nimport '@refinitiv-ui/elements/lib/password-field';\n\n// Themes\nimport '@refinitiv-ui/halo-theme/dark/imports/native-elements';\nimport '@refinitiv-ui/elements/lib/button/themes/halo/dark';\nimport '@refinitiv-ui/elements/lib/panel/themes/halo/dark';\nimport '@refinitiv-ui/elements/lib/text-field/themes/halo/dark';\nimport '@refinitiv-ui/elements/lib/password-field/themes/halo/dark';","tagName":"pre"},{"text":"Then at the root directory of the project, create index.html with following content.","tagName":"p"},{"text":"<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Webpack sample</title>\n  </head>\n  <body>\n    <script src=\"./dist/index.js\"></script>\n    <ef-panel class=\"panel\" spacing>\n      <h1>Hello!</h1>\n      <ef-text-field class=\"input\" placeholder=\"Username\"></ef-text-field>\n      <ef-password-field\n        class=\"input\"\n        placeholder=\"Password\"\n      ></ef-password-field>\n      <div class=\"btn-container\">\n        <ef-button cta disabled>Login</ef-button>\n        <ef-button>Cancel</ef-button>\n      </div>\n    </ef-panel>\n    <script>\n      const username = document.querySelector(\"ef-text-field\");\n      const password = document.querySelector(\"ef-password-field\");\n      const loginButton = document.querySelector(\"ef-button\");\n\n      const onTextChanges = function () {\n        if (username.value.length === 0 || password.value.length === 0) {\n          loginButton.disabled = true;\n        } else {\n          loginButton.disabled = false;\n        }\n      };\n\n      username.addEventListener(\"value-changed\", onTextChanges);\n      password.addEventListener(\"value-changed\", onTextChanges);\n\n      loginButton.addEventListener(\"tap\", function () {\n        document.querySelector(\"h1\").textContent = \"Done!\";\n      });\n    </script>\n    <style>\n      .panel {\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        width: 400px;\n        height: 300px;\n        margin: 10em auto;\n      }\n      .input {\n        margin-top: 8px;\n      }\n      .btn-container {\n        display: flex;\n        margin: 12px 0;\n      }\n      .btn-container ef-button {\n        margin: 0 8px;\n      }\n    </style>\n  </body>\n</html>","tagName":"pre"},{"text":"Configurations","tagName":"h3"},{"text":"Create a file name webpack.config.js at the project root and paste the following configuration.","tagName":"p"},{"text":"What this configuration does is setting webpack to bundle and transpile a ./src/index.js and output it to ./dist/index.js. It will also look for files with extension of .mjs and .js in the folders that specified in include section to transpile it down to ES5 by using babel (by default, babel will not transpile any folders in node_modules).","tagName":"p"},{"text":"Note that you may need to update list of folders in the include section as some dependencies might has started to ship the module with ES6 instead of ES5.","tagName":"p"},{"text":"const path = require(\"path\");\n\nmodule.exports = {\n  entry: \"./src/index.js\",\n  output: {\n    filename: \"index.js\",\n    path: path.resolve(__dirname, \"dist\"),\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.m?js$/,\n        include: [\n          path.resolve(__dirname, 'node_modules/@refinitiv-ui'),\n          path.resolve(__dirname, 'node_modules/@webcomponents'),\n          path.resolve(__dirname, 'node_modules/lit-element'),\n          path.resolve(__dirname, 'node_modules/lit-html'),\n          path.resolve(__dirname, 'node_modules/d3-interpolate')\n        ],\n        use: {\n          loader: \"babel-loader\",\n          options: {\n            presets: [\n              [\n                \"@babel/preset-env\",\n                {\n                  corejs: 3,\n                  useBuiltIns: \"usage\",\n                },\n              ],\n            ],\n            plugins: [\"@babel/plugin-transform-runtime\"],\n          },\n        },\n      },\n    ],\n  },\n};","tagName":"pre"},{"text":"Create a file name .browserslistrc with the following content at the application root directory. This is the list of target browsers that we want our application to work on, it will be read by babel.","tagName":"p"},{"text":"ie >= 11\nFirefox >= 63\nChrome >= 61\nSafari >= 11","tagName":"pre"},{"text":"Add scripts to package.json.","tagName":"p"},{"text":"\"scripts\": {\n  \"start\": \"webpack-cli serve --compress --host 0.0.0.0 --mode production\",\n  \"build\": \"webpack --config webpack.config.js --mode production\"\n}","tagName":"pre"},{"text":"Finally, run npm run build and then npm start.","tagName":"p"},{"text":"You should be able to access the application at http://localhost:8080/","tagName":"p"},{"text":"http://localhost:8080/","tagName":"a"}]},{"title":"Angular","filename":"framework-integration/angular.html","contents":[{"text":"angular.io","tagName":"a"},{"text":"This guideline uses Angular's seed project and Angular CLI v12.0.5","tagName":"p"},{"text":"Install Angular CLI.","tagName":"p"},{"text":"npm install -g @angular/cli","tagName":"pre"},{"text":"Initialize your project","tagName":"h2"},{"text":"Create new Angular application using the ng new command.","tagName":"p"},{"text":"ng new my-app && cd my-app","tagName":"pre"},{"text":"Once your app has been created you should be able to serve your application.","tagName":"p"},{"text":"npm start","tagName":"pre"},{"text":"Using web components in Angular","tagName":"h2"},{"text":"First off we need to import the CUSTOM_ELEMENTS_SCHEMA from @angular/core and inject it into the schemas property of our AppModule definition. This property will allow non-Angular elements named with dash case like custom elements to be used in Angular's template.","tagName":"p"},{"text":"Make the following changes to ./src/app/app.module.ts.","tagName":"p"},{"text":"-import { NgModule } from '@angular/core';\n+import { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\n import { BrowserModule } from '@angular/platform-browser';\n\n import { AppComponent } from './app.component';\n\n @NgModule({\n   declarations: [\n     AppComponent\n   ],\n   imports: [\n     BrowserModule\n   ],\n   providers: [],\n-  bootstrap: [AppComponent]\n+  bootstrap: [AppComponent],\n+  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n })\n\n export class AppModule { }","tagName":"pre"},{"text":"Install EF elements","tagName":"h2"},{"text":"EF elements need their class definition and theme to be installed before they can be used.","tagName":"p"},{"text":"Install elements and themes.","tagName":"p"},{"text":"npm install @refinitiv-ui/elements\nnpm install @refinitiv-ui/halo-theme","tagName":"pre"},{"text":"Import the elements and themes into your app, src/app/app.component.ts","tagName":"p"},{"text":"import '@refinitiv-ui/elements/lib/loader';\nimport '@refinitiv-ui/elements/lib/button';\nimport '@refinitiv-ui/elements/lib/panel';\nimport '@refinitiv-ui/elements/lib/text-field';\nimport '@refinitiv-ui/elements/lib/password-field';\n\nimport '@refinitiv-ui/halo-theme/dark/imports/native-elements';\nimport '@refinitiv-ui/elements/lib/loader/themes/halo/dark';\nimport '@refinitiv-ui/elements/lib/button/themes/halo/dark';\nimport '@refinitiv-ui/elements/lib/panel/themes/halo/dark';\nimport '@refinitiv-ui/elements/lib/text-field/themes/halo/dark';\nimport '@refinitiv-ui/elements/lib/password-field/themes/halo/dark';","tagName":"pre"},{"text":"At this stage EF elements should be ready to use!. You can use them like any other native HTML elements.","tagName":"p"},{"text":"Create a login page","tagName":"h2"},{"text":"We need to use ngDefaultControl directive so Angular's Forms can be used with custom elements such as ef-text-field.","tagName":"p"},{"text":"Import ReactiveFormsModule in src/app/app.module.ts.","tagName":"p"},{"text":" import { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\n import { BrowserModule } from '@angular/platform-browser';\n+import { ReactiveFormsModule } from '@angular/forms';\n\n...\n...\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n+   ReactiveFormsModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent],\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\n})","tagName":"pre"},{"text":"Define the view template by replacing the contents in src/app/app.component.html with the following.","tagName":"p"},{"text":"<ef-panel id=\"login-page\" [formGroup]=\"loginForm\" spacing>\n  <ef-loader *ngIf=\"loading\"></ef-loader>\n\n  <ng-container *ngIf=\"!loading\">\n    <h1>{{ title }}</h1>\n    <ef-text-field\n      formControlName=\"username\"\n      placeholder=\"Username\"\n      ngDefaultControl\n    >\n    </ef-text-field>\n    <ef-password-field\n      formControlName=\"password\"\n      placeholder=\"Password\"\n      ngDefaultControl\n    >\n    </ef-password-field>\n    <div id=\"button-group\">\n      <ef-button (click)=\"login()\"\n        [disabled]=\"!loginForm.valid\"\n      >Login</ef-button >\n      <ef-button>Cancel</ef-button>\n    </div>\n  </ng-container>\n</ef-panel>","tagName":"pre"},{"text":"Add styling into src/app/app.component.css","tagName":"p"},{"text":"#login-page {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 450px;\n  height: 200px;\n  margin: 40px auto;\n}\n\n#button-group {\n  margin: 10px 0;\n}","tagName":"pre"},{"text":"Now, we need to add logic to make login page works by updating src/app/app.component.ts.","tagName":"p"},{"text":"import { Component } from '@angular/core';\nimport { timer } from 'rxjs'\nimport { finalize } from 'rxjs/operators'\nimport { FormBuilder, Validators, AbstractControl } from '@angular/forms';\n\nimport '@refinitiv-ui/elements/lib/loader';\nimport '@refinitiv-ui/elements/lib/button';\nimport '@refinitiv-ui/elements/lib/panel';\nimport '@refinitiv-ui/elements/lib/text-field';\nimport '@refinitiv-ui/elements/lib/password-field';\n\nimport '@refinitiv-ui/halo-theme/dark/imports/native-elements';\nimport '@refinitiv-ui/elements/lib/loader/themes/halo/dark';\nimport '@refinitiv-ui/elements/lib/button/themes/halo/dark';\nimport '@refinitiv-ui/elements/lib/panel/themes/halo/dark';\nimport '@refinitiv-ui/elements/lib/text-field/themes/halo/dark';\nimport '@refinitiv-ui/elements/lib/password-field/themes/halo/dark';\n\nconst DEFAULT_TITLE = 'Hello!';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  public loading: boolean = false;\n  public title: string = DEFAULT_TITLE;\n  public loginForm = this.formbuilder.group({\n    username: ['', Validators.required],\n    password: ['', Validators.required]\n  });\n\n  constructor(private formbuilder: FormBuilder) { }\n\n  get username(): AbstractControl {\n    return this.loginForm.value['username'];\n  }\n\n  get password(): AbstractControl {\n    return this.loginForm.value['password'];\n  }\n\n  login(): void {\n    this.loading = true;\n\n    timer(2000).pipe(\n      finalize(() => { this.loading = false }),\n    ).subscribe(() => {\n      this.title = 'Done!';\n      this.loginForm.reset();\n    })\n  }\n}","tagName":"pre"},{"text":"Serve your application.","tagName":"p"},{"text":"npm start","tagName":"pre"},{"text":"Using EF with Angular's form","tagName":"h2"},{"text":"Using third-party form control elements with Angular's forms API requires ControlValueAccessor which acts as a bridge that synchronizes the data between one and another. ControlValueAccessor already covers all the standard native input tags, but not for custom tags like EF components.","tagName":"p"},{"text":"ControlValueAccessor","tagName":"a"},{"text":"However, for element such as ef-text-field, coral-search-field and ef-password-field> that has similar behavior to native input[type=text], you can use DefaultValueAccessor directive (ngDefaultControl).","tagName":"p"},{"text":"DefaultValueAccessor","tagName":"a"},{"text":"<ef-text-field formControlName=\"...\" ngDefaultControl>\n</ef-text-field>","tagName":"pre"},{"text":"For elements which need to have its own ControlValueAccessor implementation in order to work correctly. Implementation varies depending on element's API and use cases.","tagName":"p"},{"text":"@Directive({\n  selector: '[ef-number-field]',\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => NumberFieldValueAccessor),\n      multi: true\n    }\n  ]\n})\nexport class NumberFieldValueAccessor implements ControlValueAccessor {\n  onChange = () => {};\n  onTouched = () => {};\n\n  writeValue (value: string): void { ... }\n  registerOnChange (fn: any): void { ... }\n  registerOnTouched (fn: any): void { ... }\n\n  setDisabledState (isDisabled: boolean): void { ... }\n\n  // listens to value-changed event from number-field, then update the value\n  @HostListener('value-changed', ['$event.detail'])\n  listenForValueChange ({ value }) {\n    this.value = value;\n  }","tagName":"pre"},{"text":"Additional type definition","tagName":"h2"},{"text":"Some EF elements supports i18N features. It uses FormatJS library and some of thier modules are using features that available in new Javascript version. If you see any errors related to @formatjs during project compilation, you may need to add esnext.intl into lib section in tsconfig.json file.","tagName":"p"},{"text":"FormatJS","tagName":"a"},{"text":"\"lib\": [\n  \"es2018\",\n+ \"esnext.intl\"\n  \"dom\"\n]","tagName":"pre"},{"text":"Polyfills","tagName":"h2"},{"text":"Legacy browser does not support Web Component. EF polyfills provides polyfills modules that required. ","tagName":"p"},{"text":"npm i @refinitiv-ui/polyfills","tagName":"pre"},{"text":"Import the following into the end of src/polyfills.ts.","tagName":"p"},{"text":"/***************************************************************************************************\n * APPLICATION IMPORTS\n */\n\nimport '@refinitiv-ui/polyfills/minimal';","tagName":"pre"},{"text":"From Angular 8 onwards, browsers polyfills (core-js) will be automatically handled by Angular build system by using list of target browsers in .browserslistrc configuration. This is the reason why only minimal version of @refinitiv-ui/polyfills is needed.","tagName":"p"},{"text":"In .browserslistrc, updates content for IE11 supports. Adds other browser name and its version that you need to support.","tagName":"p"},{"text":"> 0.5%\nlast 2 versions\nFirefox ESR\nnot dead\n- not IE 11 # Angular supports IE 11 only as an opt-in. To opt-in, remove the 'not' prefix on this line.\n+ IE 11","tagName":"pre"},{"text":"Serving application on IE11","tagName":"h2"},{"text":"In Angular 8 or above, a production build will create two versions of bundles (differential loading) es2015 and es5 version. Angular build system will automatically transpile all of the @refinitiv-ui components into es5 bundle.","tagName":"p"},{"text":"differential loading","tagName":"a"},{"text":"Unfortunately, serving application by using ng serve will not use this feature and it will not work on IE.","tagName":"p"},{"text":"To test on IE, run a production build and use a package like serve or http-server to locally serve the static files.","tagName":"p"},{"text":"ng build --prod","tagName":"pre"},{"text":"npm i -g serve\nserve dist/my-app","tagName":"pre"},{"text":"That's all for now. Contact us at RefinitivUIDev@refinitiv.com, if you need any extra help!","tagName":"p"},{"text":"RefinitivUIDev@refinitiv.com","tagName":"a"}]},{"title":"React","filename":"framework-integration/react.html","contents":[{"text":"reactjs.org","tagName":"a"},{"text":"This guideline uses create-react-app, React v17.0.2 and Yarn v1.22.10.","tagName":"p"},{"text":"Install yarn.","tagName":"p"},{"text":"npm install -g yarn","tagName":"pre"},{"text":"Initialize your project","tagName":"h2"},{"text":"To create a new app, you may choose one of the following methods:","tagName":"p"},{"text":"npx","tagName":"h3"},{"text":"npx create-react-app my-app","tagName":"pre"},{"text":"yarn","tagName":"h3"},{"text":"yarn create react-app my-app","tagName":"pre"},{"text":"It will create a directory called my-app inside the current folder. Inside that directory, it will generate the initial project structure and install the required dependencies.","tagName":"p"},{"text":"Serve your app to check if the project is created correctly.","tagName":"p"},{"text":"cd my-app\nyarn start","tagName":"pre"},{"text":"Install EF elements and themes","tagName":"h2"},{"text":"Installs elements and themes.","tagName":"p"},{"text":"yarn add @refinitiv-ui/elements\nyarn add @refinitiv-ui/halo-theme","tagName":"pre"},{"text":"Import elements that you want to use and theme in src/index.js. You can also import EF components and themes anywhere in react components but for the simplicity we'll import all at once.","tagName":"p"},{"text":"import '@refinitiv-ui/elements/lib/loader';\nimport '@refinitiv-ui/elements/lib/button';\nimport '@refinitiv-ui/elements/lib/panel';\nimport '@refinitiv-ui/elements/lib/text-field';\nimport '@refinitiv-ui/elements/lib/password-field';\n\nimport '@refinitiv-ui/halo-theme/dark/imports/native-elements';\nimport '@refinitiv-ui/elements/lib/loader/themes/halo/dark';\nimport '@refinitiv-ui/elements/lib/button/themes/halo/dark';\nimport '@refinitiv-ui/elements/lib/panel/themes/halo/dark';\nimport '@refinitiv-ui/elements/lib/text-field/themes/halo/dark';\nimport '@refinitiv-ui/elements/lib/password-field/themes/halo/dark';","tagName":"pre"},{"text":"Use EF elements to create a simple login page. Replace the content in src/App.js with the following code.","tagName":"p"},{"text":"import React, { useState } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [title, setTitle] = useState('Hello!');\n  const [loading, setLoading] = useState(false);\n\n  function login() {\n    setLoading(true);\n\n    setTimeout(() => {\n      setTitle('Done!');\n      setLoading(false);\n    }, 2000);\n  }\n\n  return (\n    <ef-panel id=\"login-page\" spacing>\n      {loading ? (\n        <ef-loader></ef-loader>\n      ) : (\n        <>\n          <h1>{title}</h1>\n          <ef-text-field placeholder='Username'></ef-text-field>\n          <ef-password-field placeholder='Password'></ef-password-field>\n          <div id=\"button-group\">\n            <ef-button onClick={login}>Login</ef-button>\n            <ef-button>Cancel</ef-button>\n          </div>\n        </>\n      )}\n    </ef-panel>\n  );\n}\n\nexport default App;","tagName":"pre"},{"text":"And in src/App.css","tagName":"p"},{"text":"#login-page {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 450px;\n  height: 200px;\n  margin: 40px auto;\n}\n\n#button-group {\n  margin: 10px 0;\n}","tagName":"pre"},{"text":"Finally, starting your app and it should automatically open http://localhost:3000/ on your default browser.","tagName":"p"},{"text":"yarn start","tagName":"pre"},{"text":"Using web components in React","tagName":"h2"},{"text":"Web components can be used in React just like any other HTML elements. However, there are a few differences to note.","tagName":"p"},{"text":"class vs className","tagName":"h3"},{"text":"Web component uses class attribute instead of className.","tagName":"p"},{"text":"function Panel() {\n  return (\n    <ef-panel class=\"container\">\n      ...\n    </ef-panel>\n  );\n}","tagName":"pre"},{"text":"Attributes","tagName":"h3"},{"text":"Boolean","tagName":"h4"},{"text":"Boolean attributes such as disabled, readonly, checked are set by the presence of the attribute itself, not the value. To represent a false value in JSX, set the attribute's value to undefined or null or simply remove the attribute. This behavior is the same as HTML specifications.","tagName":"p"},{"text":"HTML specifications","tagName":"a"},{"text":"Regardless of the value, the following code will disable the ef-text-field.","tagName":"p"},{"text":"<ef-text-field disabled></ef-text-field>\n<ef-text-field disabled=\"true\"></ef-text-field>\n<ef-text-field disabled=\"false\"></ef-text-field>\n<ef-text-field disabled={true}></ef-text-field>\n<ef-text-field disabled={false}></ef-text-field>","tagName":"pre"},{"text":"The following will omit disabled attribute and enable ef-text-field.","tagName":"p"},{"text":"<ef-text-field></ef-text-field>\n<ef-text-field disabled={undefined}></ef-text-field>","tagName":"pre"},{"text":"Array and Object","tagName":"h4"},{"text":"React only allows primitive data to be passed through attributes. For Array and Object, you can either pass data through element's property or use JSON.stringify() to parse the data before passing to attribute.","tagName":"p"},{"text":"<ef-sparkline data={JSON.stringify([-2, -3, 4])}></ef-sparkline>","tagName":"pre"},{"text":"or","tagName":"p"},{"text":"function SparklineChart() {\n  const chartRef = React.useRef();\n  React.useLayoutEffect(() => {\n    if (chartRef.current) {\n      chartRef.current.data = [-2, -3, 4];\n    }\n  }, [chartRef]);\n  return <ef-sparkline ref={chartRef}></ef-sparkline>;\n}","tagName":"pre"},{"text":"Events","tagName":"h3"},{"text":"Use ref to access and store DOM element, then add an event-listener inside useLayoutEffect which fires synchronously after the DOM mutation (or componentDidMount in class component). Finally, don't forget to unsubscribe from event-listener when component unmounts.","tagName":"p"},{"text":"function App() {\n  const textFieldRef = React.useRef();\n  const [value, setValue] = React.useState('');\n\n  React.useLayoutEffect(() => {\n    const handleChange = (event) => {\n      setValue(event.detail.value);\n    };\n\n    const { current } = textFieldRef;\n\n    if (current) {\n      current.value = value; // update element's value\n      current.addEventListener('value-changed', handleChange);\n    }\n\n    return () => current.removeEventListener('value-changed', handleChange); // unsubscribe\n  }, [value, textFieldRef]);\n\n  return <ef-text-field ref={textFieldRef}></ef-text-field>;\n}","tagName":"pre"},{"text":"Develop the application on IE11 (or legacy browsers)","tagName":"h2"},{"text":"Legacy browser does not support Web Component and ES2015.","tagName":"p"},{"text":"By default create-react-app does not provide the polyfills. You will have to configure your application to include all necessary polyfills so your app can work on legacy browsers. Polyfills should load at earliest, imports the polyfills at the very top of src\\index.js and followed by elements and themes.","tagName":"p"},{"text":"yarn add react-app-polyfill\nyarn add @refinitiv-ui/polyfills","tagName":"pre"},{"text":"@refinitiv-ui/polyfills/minimal provides polyfills for custom components without any polyfills for ES2015 features so you can use it with react-app-polyfill.","tagName":"p"},{"text":"react-app-polyfill","tagName":"a"},{"text":"For more details about react-app-polyfill, see here.","tagName":"p"},{"text":"here","tagName":"a"},{"text":"Import them before EF polyfills.","tagName":"p"},{"text":"import 'react-app-polyfill/ie11';\nimport '@refinitiv-ui/polyfills/minimal';","tagName":"pre"},{"text":"Once you've included the polyfills, it's still not working when you open your app, http://localhost:3000/, on IE11. This is because development environment is set to run in modern browsers as it's easier for developers to debug.","tagName":"p"},{"text":"To run a development server on IE11, open package.json and add IE 11 to development section at broswerslist configuration.","tagName":"p"},{"text":"  \"browserslist\": {\n    \"production\": [\n      \">0.2%\",\n      \"not dead\",\n      \"not op_mini all\"\n    ],\n    \"development\": [\n      \"last 1 chrome version\",\n      \"last 1 firefox version\",\n      \"last 1 safari version\",\n+     \"IE 11\"\n    ]\n  }","tagName":"pre"},{"text":"For production build, the configuration already supports IE11. You can see the list of browsers it covers by running command:","tagName":"p"},{"text":"npx browserslist","tagName":"pre"},{"text":"You'll see that IE11 is already included the list. You can update the configuration to be suitable with browsers that your app needs to support. For more detail, see browserslist.","tagName":"p"},{"text":"browserslist","tagName":"a"},{"text":"That's all for now. Contact us at RefinitivUIDev@refinitiv.com, if you need any extra help!","tagName":"p"},{"text":"RefinitivUIDev@refinitiv.com","tagName":"a"}]},{"title":"Vue","filename":"framework-integration/vue.html","contents":[{"text":"vuejs.org","tagName":"a"},{"text":"This guideline uses Vue 3 and Vue CLI v4.5.13","tagName":"p"},{"text":"Install Vue CLI.","tagName":"p"},{"text":"npm install -g @vue/cli","tagName":"pre"},{"text":"Initialize your project","tagName":"h2"},{"text":"Create your new Vue application using the vue create command.","tagName":"p"},{"text":"vue create my-app","tagName":"pre"},{"text":"Once your application has been created and configured using the command line prompts, you should be able to serve the application.","tagName":"p"},{"text":"npm run serve","tagName":"pre"},{"text":"Install ELF elements and themes","tagName":"h2"},{"text":"Install EF elements and themes.","tagName":"p"},{"text":"npm install @refinitiv-ui/elements\nnpm install @refinitiv-ui/halo-theme","tagName":"pre"},{"text":"Import elements that you want to use and themes in src/main.js.","tagName":"p"},{"text":"import '@refinitiv-ui/elements/lib/loader';\nimport '@refinitiv-ui/elements/lib/button';\nimport '@refinitiv-ui/elements/lib/panel';\nimport '@refinitiv-ui/elements/lib/text-field';\nimport '@refinitiv-ui/elements/lib/password-field';\n\nimport '@refinitiv-ui/halo-theme/dark/imports/native-elements';\nimport '@refinitiv-ui/elements/lib/loader/themes/halo/dark';\nimport '@refinitiv-ui/elements/lib/button/themes/halo/dark';\nimport '@refinitiv-ui/elements/lib/panel/themes/halo/dark';\nimport '@refinitiv-ui/elements/lib/text-field/themes/halo/dark';\nimport '@refinitiv-ui/elements/lib/password-field/themes/halo/dark';","tagName":"pre"},{"text":"Components can be used like any other native HTMLElement. Try replacing content in src/App.vue with the code below.","tagName":"p"},{"text":"<template>\n  <ef-panel id=\"login-page\" spacing>\n    <ef-loader v-if=\"loading\"></ef-loader>\n    <template v-else>\n      <h1>{{ title }}</h1>\n      <ef-text-field placeholder=\"Username\"></ef-text-field>\n      <ef-password-field placeholder=\"Password\"></ef-password-field>\n      <div id=\"button-group\">\n        <ef-button v-on:click=\"login\">Login</ef-button>\n        <ef-button>Cancel</ef-button>\n      </div>\n    </template>\n  </ef-panel>\n</template>\n\n<script>\nexport default {\n  name: 'app',\n  data: function() {\n    return {\n      title: 'Hello!',\n      loading: false,\n    };\n  },\n  methods: {\n    login: function() {\n      this.loading = true;\n\n      setTimeout(() => {\n        this.title = 'Done!';\n        this.loading = false;\n      }, 3000);\n    },\n  },\n};\n</script>\n\n<style>\n#login-page {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 450px;\n  height: 200px;\n  margin: 40px auto;\n}\n\n#button-group {\n  margin: 10px 0;\n}\n</style>","tagName":"pre"},{"text":"Finally, try starting your app and it should be available to access through http://localhost:8080/.","tagName":"p"},{"text":"npm run serve","tagName":"pre"},{"text":"That's all for now. Contact us at RefinitivUIDev@refinitiv.com, if you need any extra help!","tagName":"p"},{"text":"RefinitivUIDev@refinitiv.com","tagName":"a"}]},{"title":"Typography","filename":"styles/typography.html","contents":[{"text":"In accordance with Refinitiv's Halo Design System, the default font in your application should be Proxima Nova Fin, which is automatically applied when you import native styles from EF themes.","tagName":"p"},{"text":"The font \"Proxima Nova Fin\" shall only be used within Refinitiv products or services. The copyright owner must approve any use of such font outside of Refinitiv products or services, which may be subject to a fee. Please see https://www.fontspring.com/lic/fontspring/webfont#license_text","tagName":"p"},{"text":"https://www.fontspring.com/lic/fontspring/webfont#license_text","tagName":"a"},{"text":"Font styles in Halo theme are only Regular, Semi Bold and Bold. Do not use 'Itatic' style due to the license on Proxima Nova Fin font.","tagName":"p"},{"text":"<h6>Proxima Nova Fin Regular (400)</h6>\n<div class=\"fonts\">\n  A B C D E F G H I J K L M N O P Q R S T U V W X Y Z\n  a b c d e f g h i j k l m n o p q r s t u v w x y z\n  0 1 2 3 4 5 6 7 8 9\n</div>\n<h6>Proxima Nova Fin Semibold (500)</h6>\n<div class=\"fonts semibold\">\n  A B C D E F G H I J K L M N O P Q R S T U V W X Y Z\n  a b c d e f g h i j k l m n o p q r s t u v w x y z\n  0 1 2 3 4 5 6 7 8 9\n</div>\n<h6>Proxima Nova Fin Bold (600)</h6>\n<div class=\"fonts bold\">\n  A B C D E F G H I J K L M N O P Q R S T U V W X Y Z\n  a b c d e f g h i j k l m n o p q r s t u v w x y z\n  0 1 2 3 4 5 6 7 8 9\n</div>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":".semibold {\n  font-weight: 500;\n}\n\n.bold {\n  font-weight: 600;\n}\n\n.fonts {\n  font-size: 24px;\n}","tagName":"pre"},{"text":"The theme also includes heading styles and uses body 3 as the default style for the body tag.","tagName":"p"},{"text":"<table>\n  <thead>\n    <tr>\n      <td>HEADINGS</td>\n      <td>SUBHEADINGS</td>\n      <td>PARAGRAPH</td>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>\n        <h1>Header 1</h1><small>Regular 44px</small>\n      </td>\n      <td>\n        <div class=\"subhead_1\">SUBHEAD 1</div><small>Semibold 16px</small>\n      </td>\n      <td>\n        <div class=\"body_1\">Body 1</div><small>Regular 16px</small>\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <h2>Header 2</h2><small>Regular 36px</small>\n      </td>\n      <td>\n        <div class=\"subhead_2\">SUBHEAD 2</div><small>Semibold 14px</small>\n      </td>\n      <td>\n        <div class=\"body_2\">Body 2</div><small>Regular 14px</small>\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <h3>Header 3</h3><small>Regular 28px</small>\n      </td>\n      <td>\n        <div class=\"subhead_3\">SUBHEAD 3</div><small>Semibold 12px</small>\n      </td>\n      <td>\n        <div class=\"body_3\">Body 3</div><small>Regular 12px</small>\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <h4>Header 4</h4><small>Bold 24px</small>\n      </td>\n      <td></td>\n      <td>\n        <div class=\"body_4\">Body 4</div><small>Regular 12px</small>\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <h5>Header 5</h5><small>Bold 18px</small>\n      </td>\n      <td></td>\n      <td>\n        <div class=\"body_5\">Body 5</div><small>Semibold 14px</small>\n      </td>\n    </tr>\n    <tr>\n      <td>\n        <h6>Header 6</h6><small>Bold 16px</small>\n      </td>\n      <td></td>\n      <td></td>\n    </tr>\n  </tbody>\n</table>","tagName":"pre"},{"text":"","tagName":"pre"},{"text":"h1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n  margin: 0;\n}\n\nthead {\n  font-weight: 600;\n}\n\nthead td {\n  padding-bottom: 15px;\n}\n\ntr {\n  background-color: white;\n}\n\ntd {\n  border-width: 0px;\n  border-right-width: 1px;\n  padding-bottom: 10px;\n}\n\n.subhead_1 {\n  font-weight: 500;\n  font-size: 16px;\n}\n\n.subhead_2 {\n  font-weight: 500;\n  font-size: 14px;\n}\n\n.subhead_3 {\n  font-weight: 500;\n  font-size: 12px\n}\n\n.body_1 {\n  font-size: 16px;\n}\n\n.body_2 {\n  font-size: 14px;\n}\n\n.body_3 {\n  font-size: 12px;\n}\n\n.body_4 {\n  font-weight: 500;\n  font-size: 12px;\n}\n\n.body_5 {\n  font-weight: 500;\n  font-size: 14px;\n}","tagName":"pre"}]},{"title":"Styling Components","filename":"styles/styling-components.html","contents":[{"text":"EF elements are built with using Shadow DOM. Shadow DOM encapsulates internal styles and component structures so they don't leak out, or get interfered with by application-level styles.","tagName":"p"},{"text":"Shadow DOM","tagName":"a"},{"text":"While component's internal styles are protected, applications can override any styles that are available at host scope by using the normal CSS selector.","tagName":"p"},{"text":"<ef-email-field class=\"login-input\"></ef-email-field>\n<ef-password-field class=\"login-input\"></ef-password-field>","tagName":"pre"},{"text":"<style>\n  .login-input {\n    width: 150px;\n    margin-bottom: 5px;\n  }\n</style>","tagName":"pre"},{"text":"CSS Variables","tagName":"h3"},{"text":"Some EF elements provide CSS Variables which allows application to modify its internal styles without hacking into Shadow DOM. CSS Variables are also used to style canvas components. Available CSS variables are in API document of each component.","tagName":"p"},{"text":"CSS Variables","tagName":"a"},{"text":"<ef-led-gauge red-blue-scale></ef-led-gauge>","tagName":"pre"},{"text":"<style>\n  ef-led-gauge[red-blue-scale] {\n    --center-right-segment-color: rgba(60, 60, 200, 0.65);\n    --right-segment-color: rgba(60, 60, 200, 1);\n  }\n</style>","tagName":"pre"},{"text":"IE Support","tagName":"h3"},{"text":"Natively, IE11 does not support CSS variables. However, applications can work around this by using polyfills offered as part of @refinitiv-ui/polyfills.","tagName":"p"},{"text":"npm i @refinitiv-ui/polyfills","tagName":"pre"},{"text":"Imports polyfills and wraps CSS variables with shady-css-scoped tag.","tagName":"p"},{"text":"import '@refinitiv-ui/polyfills/minimals';","tagName":"pre"},{"text":"<shady-css-scoped>\n  <style>\n    ef-led-gauge[red-blue-scale] {\n      --center-right-segment-color: rgba(60, 60, 200, 0.65);\n      --right-segment-color: rgba(60, 60, 200, 1);\n    }\n  </style>\n</shady-css-scoped>\n\n<ef-led-gauge red-blue-scale></ef-led-gauge>","tagName":"pre"},{"text":"For Single Page Applications, the <shady-css-scoped> tag must be placed at the root of the application i.e. index.html.","tagName":"p"}]},{"title":"Icons","filename":"styles/icons.html","contents":[{"text":"Below is a list of available icons in the Halo theme. You can use them with the Icon Element or with elements that provide the icon attribute/property e.g. Button Element.","tagName":"p"},{"text":"Icon Element","tagName":"a"},{"text":"Button Element","tagName":"a"},{"text":"<div class=\"header\"></div>\n<div id=\"loader-content\"></div>\n<div id=\"content\"></div>","tagName":"pre"},{"text":"var ICON_URL = 'https://cdn.refinitiv.com/public/libs/elf/info.json';\nvar content = document.getElementById('content');\nvar theme = 'halo';\n\nfunction request(url, callback) {\n  var xmlHttp = new XMLHttpRequest();\n  xmlHttp.onreadystatechange = function() {\n    if (xmlHttp.readyState == 4 && xmlHttp.status == 200)\n      callback(xmlHttp.responseText);\n  }\n  xmlHttp.open(\"GET\", url, true); // true for asynchronous\n  xmlHttp.send(null);\n}\n\nvar displayIcons = function(data) {\n  var iconList;\n\n  if (data) {\n    data = JSON.parse(data);\n    if (!data || !data[theme] || !data[theme].icon || !data[theme].icon.length) {\n      content.classList.add('no-content');\n      content.innerHTML = 'No icon to display';\n    } else {\n      iconList = data[theme].icon;\n    }\n  }\n\n  for (var i = 0; i < iconList.length; i++) {\n    const name = iconList[i].name;\n    var item = document.createElement('div');\n    item.classList.add('item');\n\n    var icon = document.createElement('ef-icon');\n    icon.setAttribute('icon', name);\n\n    var iconName = document.createElement('div');\n    iconName.classList.add('icon-name');\n    iconName.textContent = name;\n\n    item.appendChild(icon);\n    item.appendChild(iconName);\n\n    content.appendChild(item);\n  }\n\n  var loader = document.getElementById('loader-content');\n  loader.parentNode.removeChild(loader);\n}\n\nfunction displayLoader() {\n  var loader = document.getElementById('loader-content');\n  for (var j = 0; j < 54; j++) {\n    var item = document.createElement('div');\n    item.classList.add('item');\n    loader.appendChild(item);\n  }\n}\n\ndocument.addEventListener('DOMContentLoaded', function() {\n  displayLoader();\n  request(ICON_URL, displayIcons);\n});","tagName":"pre"},{"text":"html {\n  margin-top: 20px;\n}\n\n.item {\n  width: 80px;\n  text-align: center;\n  padding: 7px;\n}\n\n.item:hover {\n  transition: background-color 0.3s cubic-bezier(0.075, 0.82, 0.165, 1);\n  background-color: #dddfe4;\n}\n\n.icon-name {\n  padding-top: 5px;\n  font-size: 15px;\n}\n\n#content {\n  display: flex;\n  flex-wrap: wrap;\n  flex-direction: row;\n  margin: 20px 0;\n  min-height: 300px;\n}\n\n.no-content {\n  justify-content: center;\n  align-items: center;\n  color: #8a8a96;\n  background-color: #fdfdfd;\n}\n\nef-icon {\n  font-size: 30px;\n}\n\n#loader-content {\n  display: flex;\n  flex-wrap: wrap;\n  margin: 20px 0;\n}\n\n#loader-content .item {\n  height: 73px;\n  width: 73px;\n  margin: 3px;\n  background-color: #f3f3f3;\n}","tagName":"pre"}]},{"title":"Flags","filename":"styles/flags.html","contents":[{"text":"Below is a list of available flags in the Halo theme. You can use them with the Flag Element","tagName":"p"},{"text":"Flag Element","tagName":"a"},{"text":"<div class=\"header\"></div>\n<div id=\"loader-content\"></div>\n<div id=\"content\"></div>","tagName":"pre"},{"text":"var FLAG_URL = 'https://cdn.refinitiv.com/public/libs/elf/info.json';\nvar content = document.getElementById('content');\nvar theme = 'halo';\nvar flagFullname = {\n  \"af\": \"Afghanistan\",\n  \"ax\": \"Åland Islands\",\n  \"al\": \"Albania\",\n  \"dz\": \"Algeria\",\n  \"as\": \"American Samoa\",\n  \"ad\": \"Andorra\",\n  \"ao\": \"Angola\",\n  \"ai\": \"Anguilla\",\n  \"aq\": \"Antarctica\",\n  \"ag\": \"Antigua and Barbuda\",\n  \"ar\": \"Argentina\",\n  \"am\": \"Armenia\",\n  \"aw\": \"Aruba\",\n  \"au\": \"Australia\",\n  \"at\": \"Austria\",\n  \"az\": \"Azerbaijan\",\n  \"bs\": \"Bahamas\",\n  \"bh\": \"Bahrain\",\n  \"bd\": \"Bangladesh\",\n  \"bb\": \"Barbados\",\n  \"by\": \"Belarus\",\n  \"be\": \"Belgium\",\n  \"bz\": \"Belize\",\n  \"bj\": \"Benin\",\n  \"bm\": \"Bermuda\",\n  \"bt\": \"Bhutan\",\n  \"bo\": \"Bolivia\",\n  \"bq\": \"Bonaire, Sint Eustatius and Saba\",\n  \"ba\": \"Bosnia and Herzegovina\",\n  \"bw\": \"Botswana\",\n  \"bv\": \"Bouvet Island\",\n  \"br\": \"Brazil\",\n  \"io\": \"British Indian Ocean Territory\",\n  \"bn\": \"Brunei Darussalam\",\n  \"bg\": \"Bulgaria\",\n  \"bf\": \"Burkina Faso\",\n  \"bi\": \"Burundi\",\n  \"cv\": \"Cabo Verde\",\n  \"kh\": \"Cambodia\",\n  \"cm\": \"Cameroon\",\n  \"ca\": \"Canada\",\n  \"ky\": \"Cayman Islands\",\n  \"cf\": \"Central African Republic\",\n  \"td\": \"Chad\",\n  \"cl\": \"Chile\",\n  \"cn\": \"China\",\n  \"cx\": \"Christmas Island\",\n  \"cc\": \"Cocos (Keeling) Islands\",\n  \"co\": \"Colombia\",\n  \"km\": \"Comoros\",\n  \"cd\": \"DR Congo\",\n  \"cg\": \"Congo\",\n  \"ck\": \"Cook Islands\",\n  \"cr\": \"Costa Rica\",\n  \"ci\": \"Côte d'Ivoire\",\n  \"hr\": \"Croatia\",\n  \"cu\": \"Cuba\",\n  \"cw\": \"Curaçao\",\n  \"cy\": \"Cyprus\",\n  \"cz\": \"Czechia\",\n  \"dk\": \"Denmark\",\n  \"dj\": \"Djibouti\",\n  \"dm\": \"Dominica\",\n  \"do\": \"Dominican Republic\",\n  \"ec\": \"Ecuador\",\n  \"eg\": \"Egypt\",\n  \"sv\": \"El Salvador\",\n  \"gq\": \"Equatorial Guinea\",\n  \"er\": \"Eritrea\",\n  \"ee\": \"Estonia\",\n  \"et\": \"Ethiopia\",\n  \"eu\": \"European Union\",\n  \"fk\": \"Falkland Islands [Malvinas]\",\n  \"fo\": \"Faroe Islands\",\n  \"fj\": \"Fiji\",\n  \"fi\": \"Finland\",\n  \"fr\": \"France\",\n  \"gf\": \"French Guiana\",\n  \"pf\": \"French Polynesia\",\n  \"tf\": \"French Southern Territories\",\n  \"ga\": \"Gabon\",\n  \"gm\": \"Gambia\",\n  \"ge\": \"Georgia\",\n  \"de\": \"Germany\",\n  \"gh\": \"Ghana\",\n  \"gi\": \"Gibraltar\",\n  \"gr\": \"Greece\",\n  \"gl\": \"Greenland\",\n  \"gd\": \"Grenada\",\n  \"gp\": \"Guadeloupe\",\n  \"gu\": \"Guam\",\n  \"gt\": \"Guatemala\",\n  \"gg\": \"Guernsey\",\n  \"gn\": \"Guinea\",\n  \"gw\": \"Guinea-Bissau\",\n  \"gy\": \"Guyana\",\n  \"ht\": \"Haiti\",\n  \"hm\": \"Heard Island and McDonald Islands\",\n  \"va\": \"Holy See\",\n  \"hn\": \"Honduras\",\n  \"hk\": \"Hong Kong\",\n  \"hu\": \"Hungary\",\n  \"is\": \"Iceland\",\n  \"in\": \"India\",\n  \"id\": \"Indonesia\",\n  \"ir\": \"Iran\",\n  \"iq\": \"Iraq\",\n  \"ie\": \"Ireland\",\n  \"im\": \"Isle of Man\",\n  \"il\": \"Israel\",\n  \"it\": \"Italy\",\n  \"jm\": \"Jamaica\",\n  \"jp\": \"Japan\",\n  \"je\": \"Jersey\",\n  \"jo\": \"Jordan\",\n  \"kz\": \"Kazakhstan\",\n  \"ke\": \"Kenya\",\n  \"ki\": \"Kiribati\",\n  \"kp\": \"North Korea\",\n  \"kr\": \"South Korea\",\n  \"kw\": \"Kuwait\",\n  \"kg\": \"Kyrgyzstan\",\n  \"la\": \"Laos\",\n  \"lv\": \"Latvia\",\n  \"lb\": \"Lebanon\",\n  \"ls\": \"Lesotho\",\n  \"lr\": \"Liberia\",\n  \"ly\": \"Libya\",\n  \"li\": \"Liechtenstein\",\n  \"lt\": \"Lithuania\",\n  \"lu\": \"Luxembourg\",\n  \"mo\": \"Macao\",\n  \"mk\": \"Macedonia\",\n  \"mg\": \"Madagascar\",\n  \"mw\": \"Malawi\",\n  \"my\": \"Malaysia\",\n  \"mv\": \"Maldives\",\n  \"ml\": \"Mali\",\n  \"mt\": \"Malta\",\n  \"mh\": \"Marshall Islands\",\n  \"mq\": \"Martinique\",\n  \"mr\": \"Mauritania\",\n  \"mu\": \"Mauritius\",\n  \"yt\": \"Mayotte\",\n  \"mx\": \"Mexico\",\n  \"fm\": \"Micronesia\",\n  \"md\": \"Moldova\",\n  \"mc\": \"Monaco\",\n  \"mn\": \"Mongolia\",\n  \"me\": \"Montenegro\",\n  \"ms\": \"Montserrat\",\n  \"ma\": \"Morocco\",\n  \"mz\": \"Mozambique\",\n  \"mm\": \"Myanmar\",\n  \"na\": \"Namibia\",\n  \"nr\": \"Nauru\",\n  \"np\": \"Nepal\",\n  \"nl\": \"Netherlands\",\n  \"nc\": \"New Caledonia\",\n  \"nz\": \"New Zealand\",\n  \"ni\": \"Nicaragua\",\n  \"ne\": \"Niger\",\n  \"ng\": \"Nigeria\",\n  \"nu\": \"Niue\",\n  \"nf\": \"Norfolk Island\",\n  \"mp\": \"Northern Mariana Islands\",\n  \"no\": \"Norway\",\n  \"om\": \"Oman\",\n  \"pk\": \"Pakistan\",\n  \"pw\": \"Palau\",\n  \"ps\": \"Palestine\",\n  \"pa\": \"Panama\",\n  \"pg\": \"Papua New Guinea\",\n  \"py\": \"Paraguay\",\n  \"pe\": \"Peru\",\n  \"ph\": \"Philippines\",\n  \"pn\": \"Pitcairn\",\n  \"pl\": \"Poland\",\n  \"pt\": \"Portugal\",\n  \"pr\": \"Puerto Rico\",\n  \"qa\": \"Qatar\",\n  \"re\": \"Réunion\",\n  \"ro\": \"Romania\",\n  \"ru\": \"Russia\",\n  \"rw\": \"Rwanda\",\n  \"bl\": \"Saint Barthélemy\",\n  \"sh\": \"Saint Helena, Ascension and Tristan da Cunha\",\n  \"kn\": \"Saint Kitts and Nevis\",\n  \"lc\": \"Saint Lucia\",\n  \"mf\": \"Saint Martin (French part)\",\n  \"pm\": \"Saint Pierre and Miquelon\",\n  \"vc\": \"Saint Vincent and the Grenadines\",\n  \"ws\": \"Samoa\",\n  \"sm\": \"San Marino\",\n  \"st\": \"Sao Tome and Principe\",\n  \"sa\": \"Saudi Arabia\",\n  \"gb-sct\": \"Scotland\",\n  \"sn\": \"Senegal\",\n  \"rs\": \"Serbia\",\n  \"sc\": \"Seychelles\",\n  \"sl\": \"Sierra Leone\",\n  \"sg\": \"Singapore\",\n  \"sx\": \"Sint Maarten (Dutch part)\",\n  \"sk\": \"Slovakia\",\n  \"si\": \"Slovenia\",\n  \"sb\": \"Solomon Islands\",\n  \"so\": \"Somalia\",\n  \"za\": \"South Africa\",\n  \"gs\": \"South Georgia and the South Sandwich Islands\",\n  \"ss\": \"South Sudan\",\n  \"es\": \"Spain\",\n  \"lk\": \"Sri Lanka\",\n  \"sd\": \"Sudan\",\n  \"sr\": \"Suriname\",\n  \"sj\": \"Svalbard and Jan Mayen\",\n  \"sz\": \"Swaziland\",\n  \"se\": \"Sweden\",\n  \"ch\": \"Switzerland\",\n  \"sy\": \"Syria\",\n  \"tw\": \"Taiwan\",\n  \"tj\": \"Tajikistan\",\n  \"tz\": \"Tanzania\",\n  \"th\": \"Thailand\",\n  \"tl\": \"Timor-Leste\",\n  \"tg\": \"Togo\",\n  \"tk\": \"Tokelau\",\n  \"to\": \"Tonga\",\n  \"tt\": \"Trinidad and Tobago\",\n  \"tn\": \"Tunisia\",\n  \"tr\": \"Turkey\",\n  \"tm\": \"Turkmenistan\",\n  \"tc\": \"Turks and Caicos Islands\",\n  \"tv\": \"Tuvalu\",\n  \"ug\": \"Uganda\",\n  \"ua\": \"Ukraine\",\n  \"ae\": \"United Arab Emirates\",\n  \"gb\": \"United Kingdom\",\n  \"un\": \"United Nations\",\n  \"um\": \"United States Minor Outlying Islands\",\n  \"us\": \"United States of America\",\n  \"uy\": \"Uruguay\",\n  \"uz\": \"Uzbekistan\",\n  \"vu\": \"Vanuatu\",\n  \"ve\": \"Venezuela\",\n  \"vn\": \"Viet Nam\",\n  \"vg\": \"Virgin Islands (British)\",\n  \"vi\": \"Virgin Islands (U.S.)\",\n  \"gb-wls\": \"Wales\",\n  \"wf\": \"Wallis and Futuna\",\n  \"eh\": \"Western Sahara\",\n  \"ye\": \"Yemen\",\n  \"zm\": \"Zambia\",\n  \"zw\": \"Zimbabwe\",\n  \"es-ca\": \"Senyera (Catalonia)\",\n  \"es-ga\": \"Galicia\",\n  \"gb-eng\": \"England\",\n  \"gb-nir\": \"Northern Ireland\",\n  \"xk\": \"Palau\"\n}\n\nfunction request(url, callback) {\n  var xmlHttp = new XMLHttpRequest();\n  xmlHttp.onreadystatechange = function() {\n    if (xmlHttp.readyState == 4 && xmlHttp.status == 200)\n      callback(xmlHttp.responseText);\n  }\n  xmlHttp.open(\"GET\", url, true); // true for asynchronous\n  xmlHttp.send(null);\n}\n\nvar displayFlags = function(data) {\n  var flagList;\n\n  if (data) {\n    data = JSON.parse(data);\n    if (!data || !data[theme] || !data[theme].flag || !data[theme].flag.length) {\n      content.classList.add('no-content');\n      content.innerHTML = 'No flag to display';\n    } else {\n      flagList = data[theme].flag;\n    }\n  }\n\n  for (var i = 0; i < flagList.length; i++) {\n    const name = flagList[i].name;\n    var item = document.createElement('div');\n    item.classList.add('item');\n\n    var flag = document.createElement('ef-flag');\n    flag.setAttribute('flag', name);\n\n    var flagName = document.createElement('div');\n    flagName.classList.add('flag-name');\n    flagName.textContent = name;\n\n    var fullname = document.createElement('div');\n    fullname.classList.add('flag-fullname');\n    fullname.textContent = flagFullname[name] || \"\";\n\n    item.appendChild(flag);\n    item.appendChild(fullname);\n    item.appendChild(flagName);\n\n    content.appendChild(item);\n  }\n\n  var loader = document.getElementById('loader-content');\n  loader.parentNode.removeChild(loader);\n}\n\nfunction displayLoader() {\n  var loader = document.getElementById('loader-content');\n  for (var j = 0; j < 54; j++) {\n    var item = document.createElement('div');\n    item.classList.add('item');\n    loader.appendChild(item);\n  }\n}\n\ndocument.addEventListener('DOMContentLoaded', function() {\n  displayLoader();\n  request(FLAG_URL, displayFlags);\n});","tagName":"pre"},{"text":"html {\n  margin-top: 20px;\n}\n\n.item {\n  width: 100px;\n  text-align: center;\n  margin: 7px;\n  border: solid 1px #aaa;\n  padding-top: 20px;\n}\n\n.item:hover {\n  transition: background-color 0.3s cubic-bezier(0.075, 0.82, 0.165, 1);\n  background-color: #dddfe4;\n}\n\n.flag-name {\n  font-size: 13px;\n  border-top: solid 1px #aaa;\n  margin-bottom: 5px;\n  font-weight: 500;\n}\n\n.flag-fullname {\n  padding-top: 5px;\n  font-size: 13px;\n  height: 50px;\n}\n\n#content {\n  display: flex;\n  flex-wrap: wrap;\n  flex-direction: row;\n  margin: 20px 0;\n  min-height: 300px;\n}\n\n.no-content {\n  justify-content: center;\n  align-items: center;\n  color: #8a8a96;\n  background-color: #fdfdfd;\n}\n\nef-flag {\n  font-size: 30px;\n}\n\n#loader-content {\n  display: flex;\n  flex-wrap: wrap;\n  margin: 20px 0;\n}\n\n#loader-content .item {\n  height: 73px;\n  width: 73px;\n  margin: 3px;\n  background-color: #f3f3f3;\n}","tagName":"pre"}]},{"title":"Movement Colours","filename":"styles/movement-colors.html","contents":[{"text":"EF themes provide a set of colors to use for instrument movement colors. Positive and negative are represented using different colors depending on the culture. For example, red is culturally seen as a positive color in China.","tagName":"p"},{"text":"You can set the movement color profile in your application by using movement-color-profile attribute to html tag. The American profile will be used if the attribute is not present.","tagName":"p"},{"text":"<html movement-color-profile=\"asian1\">","tagName":"pre"},{"text":"Supported value are:","tagName":"p"},{"text":"Colors are provided as CSS variables. The variables are set at html tag. It will be cascaded and becomes available within any elements.","tagName":"p"},{"text":"\nVariable Name\nDescription\n","tagName":"tr"},{"text":"\n--color-scheme-negative\nUse to style negative value.\n","tagName":"tr"},{"text":"\n--color-scheme-neutral\nUse to style unchanged value.\n","tagName":"tr"},{"text":"\n--color-scheme-positive\nUse to style positive value.\n","tagName":"tr"},{"text":"\n--color-scheme-tickup\nUse to style up tick icon.\n","tagName":"tr"},{"text":"\n--color-scheme-tickdown\nUse to style down tick icon.\n","tagName":"tr"},{"text":"\n--color-scheme-ticktext\nUse to style text color when the value ticks up, unchanged or down.\n","tagName":"tr"},{"text":"In application, the colors can be used with CSS class and apply it to any html elements.","tagName":"p"},{"text":"<style>\n  .positive {\n    color: var(--color-scheme-positive);\n  }\n  .neutral {\n    color: var(--color-scheme-neutral);\n  }\n  .negative {\n    color: var(--color-scheme-negative);\n  }\n  .tick-up {\n    color: var(--color-scheme-tickup);\n  }\n  .tick-down {\n    color: var(--color-scheme-tickdown);\n  }\n  .up-change {\n    background-color: var(--color-scheme-positive);\n    color: var(--color-scheme-ticktext);\n  }\n  .unchanged {\n    background-color: var(--color-scheme-neutral);\n    color: var(--color-scheme-ticktext);\n  }\n  .down-change {\n    background-color: var(--color-scheme-negative);\n    color: var(--color-scheme-ticktext);\n  }\n</style>","tagName":"pre"},{"text":"<div class=\"menu\">\n  <ef-button-bar managed>\n    <ef-button toggles active id=\"american\" class=\"button\">American</ef-button>\n    <ef-button toggles id=\"asian1\" class=\"button\">Asian1</ef-button>\n    <ef-button toggles id=\"asian2\" class=\"button\">Asian2</ef-button>\n    <ef-button toggles id=\"european\" class=\"button\">European</ef-button>\n  </ef-button-bar>\n</div>\n<div class=\"container\">\n  <ef-panel>\n    <table>\n      <tr>\n        <td>Up Tick:</td>\n        <td>\n          <coral-icon icon=\"arrow-up-fill\" class=\"tick-up\"></coral-icon>\n        </td>\n      </tr>\n      <tr>\n        <td>Down Tick:</td>\n        <td>\n          <coral-icon icon=\"arrow-down-fill\" class=\"tick-down\"></coral-icon>\n        </td>\n      </tr>\n      <tr>\n        <td>Up:</td>\n        <td class=\"positive\">12.30</td>\n      </tr>\n      <tr>\n        <td>Unchange:</td>\n        <td class=\"unchange\">12.29<p></p>\n        </td>\n      </tr>\n      <tr>\n        <td>Down:</td>\n        <td class=\"negative\">-12.28<p></p>\n        </td>\n      </tr>\n      <tr>\n        <td>Up Change:</td>\n        <td id=\"upChange\" class=\"positive-change positive\">1.04%<p></p>\n        </td>\n      </tr>\n      <tr>\n        <td>Unchange:</td>\n        <td id=\"unChange\" class=\"neutral-change negative\">-0.51%<p></p>\n        </td>\n      </tr>\n      <tr>\n        <td>Down Change:</td>\n        <td id=\"downChange\" class=\"negative-change positive\">2.35%<p></p>\n        </td>\n      </tr>\n    </table>\n  </ef-panel>\n</div>","tagName":"pre"},{"text":"function changeRegion(region) {\n  document.documentElement.setAttribute('movement-color-profile', region);\n}\n\nfunction registerClickEvent(id) {\n  document.getElementById(id).addEventListener('click', function() { changeRegion(id) });\n}\nregisterClickEvent('american');\nregisterClickEvent('asian1');\nregisterClickEvent('asian2');\nregisterClickEvent('european');\n\nconst upChange = document.getElementById('upChange');\n\nsetInterval(function() {\n  if (upChange.classList.length > 1) {\n    upChange.classList.remove('positive-change');\n  } else {\n    upChange.classList.add('positive-change');\n  }\n}, 500)\n\nsetInterval(function() {\n  if (unChange.classList.length > 1) {\n    unChange.classList.remove('neutral-change');\n  } else {\n    unChange.classList.add('neutral-change');\n  }\n}, 900)\n\nsetInterval(function() {\n  if (downChange.classList.length > 1) {\n    downChange.classList.remove('negative-change');\n  } else {\n    downChange.classList.add('negative-change');\n  }\n}, 700)","tagName":"pre"},{"text":".menu {\n  text-align: center;\n  padding-top: 20px;\n}\n\nef-panel {\n  width: 100%;\n}\n\ntd {\n  border: none !important;\n  transition: background-color 0.3ms ease;\n}\n\ntr {\n  background-color: transparent !important;\n}\n\ntr:hover td {\n  background-color: unset;\n  color: inherit;\n}\n\ntd.positive-change {\n  background-color: var(--color-scheme-positive) !important;\n  color: var(--color-scheme-ticktext) !important;\n}\n\ntd.neutral-change {\n  background-color: var(--color-scheme-neutral) !important;\n  color: var(--color-scheme-ticktext) !important;\n}\n\ntd.negative-change {\n  background-color: var(--color-scheme-negative) !important;\n  color: var(--color-scheme-ticktext) !important;\n}\n\np {\n  margin: 0;\n  font-weight: 600;\n  text-align: center;\n  color: var(--color-scheme-primary);\n  text-transform: capitalize;\n}\n\ntd:nth-child(even) {\n  text-align: center;\n}\n\n.container {\n  display: block;\n  padding: 20px;\n  max-width: 275px;\n  margin: 0 auto;\n}\n\n.positive {\n  color: var(--color-scheme-positive) !important;\n}\n\n.unchange {\n  color: var(--color-scheme-neutral) !important;\n}\n\n.negative {\n  color: var(--color-scheme-negative) !important;\n}\n\n.tick-up {\n  margin-right: 10px;\n  color: var(--color-scheme-tickup);\n}\n\n.tick-down {\n  margin-right: 10px;\n  color: var(--color-scheme-tickdown);\n}","tagName":"pre"},{"text":"<div class=\"menu\">\n  <ef-button-bar managed>\n    <ef-button toggles active id=\"american\" class=\"button\">American</ef-button>\n    <ef-button toggles id=\"asian1\" class=\"button\">Asian1</ef-button>\n    <ef-button toggles id=\"asian2\" class=\"button\">Asian2</ef-button>\n    <ef-button toggles id=\"european\" class=\"button\">European</ef-button>\n  </ef-button-bar>\n</div>\n<div class=\"container\">\n  <ef-panel>\n    <table>\n      <tr>\n        <td>Up Tick:</td>\n        <td>\n          <coral-icon icon=\"arrow-up-fill\" class=\"tick-up\"></coral-icon>\n        </td>\n      </tr>\n      <tr>\n        <td>Down Tick:</td>\n        <td>\n          <coral-icon icon=\"arrow-down-fill\" class=\"tick-down\"></coral-icon>\n        </td>\n      </tr>\n      <tr>\n        <td>Up:</td>\n        <td class=\"positive\">12.30</td>\n      </tr>\n      <tr>\n        <td>Unchange:</td>\n        <td class=\"unchange\">12.29<p></p>\n        </td>\n      </tr>\n      <tr>\n        <td>Down:</td>\n        <td class=\"negative\">-12.28<p></p>\n        </td>\n      </tr>\n      <tr>\n        <td>Up Change:</td>\n        <td id=\"upChange\" class=\"positive-change positive\">1.04%<p></p>\n        </td>\n      </tr>\n      <tr>\n        <td>Unchange:</td>\n        <td id=\"unChange\" class=\"neutral-change negative\">-0.51%<p></p>\n        </td>\n      </tr>\n      <tr>\n        <td>Down Change:</td>\n        <td id=\"downChange\" class=\"negative-change positive\">2.35%<p></p>\n        </td>\n      </tr>\n    </table>\n  </ef-panel>\n</div>","tagName":"pre"},{"text":"function changeRegion(region) {\n  document.documentElement.setAttribute('movement-color-profile', region);\n}\n\nfunction registerClickEvent(id) {\n  document.getElementById(id).addEventListener('click', function() { changeRegion(id) });\n}\nregisterClickEvent('american');\nregisterClickEvent('asian1');\nregisterClickEvent('asian2');\nregisterClickEvent('european');\n\nconst upChange = document.getElementById('upChange');\n\nsetInterval(function() {\n  if (upChange.classList.length > 1) {\n    upChange.classList.remove('positive-change');\n  } else {\n    upChange.classList.add('positive-change');\n  }\n}, 500)\n\nsetInterval(function() {\n  if (unChange.classList.length > 1) {\n    unChange.classList.remove('neutral-change');\n  } else {\n    unChange.classList.add('neutral-change');\n  }\n}, 900)\n\nsetInterval(function() {\n  if (downChange.classList.length > 1) {\n    downChange.classList.remove('negative-change');\n  } else {\n    downChange.classList.add('negative-change');\n  }\n}, 700)","tagName":"pre"},{"text":".menu {\n  text-align: center;\n  padding-top: 20px;\n}\n\nef-panel {\n  width: 100%;\n}\n\ntd {\n  border: none !important;\n  transition: background-color 0.3ms ease;\n}\n\ntr {\n  background-color: transparent !important;\n}\n\ntr:hover td {\n  background-color: unset;\n  color: inherit;\n}\n\ntd.positive-change {\n  background-color: var(--color-scheme-positive) !important;\n  color: var(--color-scheme-ticktext) !important;\n}\n\ntd.neutral-change {\n  background-color: var(--color-scheme-neutral) !important;\n  color: var(--color-scheme-ticktext) !important;\n}\n\ntd.negative-change {\n  background-color: var(--color-scheme-negative) !important;\n  color: var(--color-scheme-ticktext) !important;\n}\n\np {\n  margin: 0;\n  font-weight: 600;\n  text-align: center;\n  color: var(--color-scheme-primary);\n  text-transform: capitalize;\n}\n\ntd:nth-child(even) {\n  text-align: center;\n}\n\n.container {\n  display: block;\n  padding: 20px;\n  max-width: 275px;\n  margin: 0 auto;\n}\n\n.positive {\n  color: var(--color-scheme-positive) !important;\n}\n\n.unchange {\n  color: var(--color-scheme-neutral) !important;\n}\n\n.negative {\n  color: var(--color-scheme-negative) !important;\n}\n\n.tick-up {\n  margin-right: 10px;\n  color: var(--color-scheme-tickup);\n}\n\n.tick-down {\n  margin-right: 10px;\n  color: var(--color-scheme-tickdown);\n}","tagName":"pre"}]},{"title":"Language Support","filename":"localization/languages.html","contents":[{"text":"EF uses the global lang attribute to determine the font-family for different languages and to show localized messages in elements. Supporting languages are English, Deutsch, Japanese, Traditional Chinese and Simplified Chinese.","tagName":"p"},{"text":"For more information about localization and how is it applied in different contexts see Localization.","tagName":"p"},{"text":"Localization","tagName":"a"},{"text":"<html lang=\"ja-JP\">","tagName":"pre"},{"text":"<ef-panel spacing>\n  <p>\n    &#x51AC;&#x304C;&#x6765;&#x305F;&#x3002;<br>\n    &#x767D;&#x3044;&#x6A39;&#x6A39;&#x306E;&#x5149;&#x3092;<br>\n    &#x4F53;&#x306E;&#x3046;&#x3061;&#x306B;&#x84C4;&#x7A4D;&#x3057;&#x3066;&#x304A;&#x3044;&#x3066;&#x3001;<br>\n    &#x591C;&#x6DF1;&#x304F;&#x7720;&#x308B;<br>\n  </p>\n</ef-panel>","tagName":"pre"},{"text":"document.documentElement.setAttribute('lang', 'ja-JP');","tagName":"pre"},{"text":"body {\n  background: none;\n}","tagName":"pre"},{"text":"<html lang=\"zh-CN\">","tagName":"pre"},{"text":"<ef-panel spacing>\n  <p>\n    &#x674E;&#x7EC5; &#x300A;&#x60AF;&#x519C;&#x300B;<br>\n    &#x9504;&#x79BE;&#x65E5;&#x5F53;&#x5348;<br>\n    &#x6C57;&#x6EF4;&#x79BE;&#x4E0B;&#x571F;&#x3002;<br>\n    &#x8C01;&#x77E5;&#x76D8;&#x4E2D;&#x9910;<br>\n    &#x7C92;&#x7C92;&#x7686;&#x8F9B;&#x82E6;&#x3002;\n  </p>\n</ef-panel>","tagName":"pre"},{"text":"document.documentElement.setAttribute('lang', 'zh-CN');","tagName":"pre"},{"text":"body {\n  background: none;\n}","tagName":"pre"}]},{"title":"App Developers","filename":"localization/app-developers.html","contents":[{"text":"EF components support localization, including translated messages and formatting. In your app, setting the html lang attribute will trigger that language to be applied to relevant elements.","tagName":"p"},{"text":"<html lang=\"ja\">","tagName":"pre"},{"text":"Alternatively, setting the lang attribute directly on elements will have the same effect.","tagName":"p"},{"text":"lang on an element supersedes the html lang, meaning multiple languages can exist on the same page.","tagName":"p"},{"text":"Currently, the following languages are supported:","tagName":"p"},{"text":"\nLanguage\nlang value\n","tagName":"tr"},{"text":"\nEnglish (default)\nen\n","tagName":"tr"},{"text":"\nJapanese\nja\n","tagName":"tr"},{"text":"\nGerman\nde\n","tagName":"tr"},{"text":"\nSimplified Chinese\nzh\n","tagName":"tr"},{"text":"\nTraditional Chinese\nzh-Hant\n","tagName":"tr"},{"text":"If an unsupported language is set, English is the default fallback.","tagName":"p"},{"text":"Regionals","tagName":"h2"},{"text":"Adding region country codes will format all numbers and dates accordingly. For region specific languages to be applied, there must be additional region translations for that language.","tagName":"p"},{"text":"If no country code is applied, the browser default is used.","tagName":"p"},{"text":"Using in your app","tagName":"h2"},{"text":"EF elements are packaged with English translations only. The application developer must ensure that the additional languages are included, by importing any additional translation files.","tagName":"p"},{"text":"The translation is selected using the following algorithm:","tagName":"p"},{"text":"There are many ways to load translations. Below are typical configurations, but it is up to the developer to pick the most appropriate solution.","tagName":"p"},{"text":"Static Imports","tagName":"h3"},{"text":"The simplest way is to include translations in a bundle, for instance:","tagName":"p"},{"text":"// # translations.js\n\n// ef-tree-select, Japanese and German locales\nimport '@refinitiv-ui/phrasebook/lib/locale/ja/tree-select';\nimport '@refinitiv-ui/phrasebook/lib/locale/de/tree-select';\n\n// ef-pagination, Simplified and Traditional Chinese locales\nimport '@refinitiv-ui/phrasebook/lib/locale/zh/pagination';\nimport '@refinitiv-ui/phrasebook/lib/locale/zh-hant/pagination';","tagName":"pre"},{"text":"Including translations in such a way will increase the bundle size, but has the benefit that translations are available immediately on application load.","tagName":"p"},{"text":"Dynamic Import","tagName":"h3"},{"text":"If your application supports dynamic module resolution, you can load translations on demand.  For instance:","tagName":"p"},{"text":"dynamic module resolution","tagName":"a"},{"text":"import { supportedLocales } from '@formatjs/intl-utils';\n\n// load language from your app's service\nApp.Settings.Language.read(value => {\n  // set html lang tag\n  document.documentElement.lang = value;\n  // resolve regional locale into support locale.\n  // for instance: if value === 'de-AT', then locale = 'de'\n  const locale = supportedLocales(['ja', 'de'], [value])[0];\n  if (locale) {\n    // use dynamic import. Element will update itself once locale is loaded\n    import(`@refinitiv-ui/phrasebook/lib/locale/${locale}/pagination`);\n  }\n});","tagName":"pre"},{"text":"From The Server","tagName":"h3"},{"text":"You can store translations as JSON on the app server or CDN. In this case you may want to extract JSON content to upload to the server.","tagName":"p"},{"text":"import { supportedLocales } from '@formatjs/intl-utils';\nimport { Phrasebook } from '@refinitiv-ui/phrasebook';\n\n// resolve locale from HTML lang attribute or navigator language\nconst locale = supportedLocales(['ja', 'de'], [document.documentElement.lang || navigator.language])[0];\n\n// fetch locale\nfetch(`static/locale/${locale}/pagination.json`).then(translations => {\n  // define translation within Phrasebook to be available for EF elements\n  Phrasebook.define('de', 'ef-pagination', translations);\n});","tagName":"pre"},{"text":"Support IE11","tagName":"h2"},{"text":"IE11 lacks some features in the Intl object that are used in localization. You can choose how to address this, but the simplest appraoch is to install the @formatjs/intl-getcanonicallocales, @formatjs/intl-locale and @formatjs/intl-pluralrules polyfills and import them into your app. The polyfill is not included in EF by default, as not all apps support IE11.","tagName":"p"},{"text":"npm install @formatjs/intl-getcanonicallocales @formatjs/intl-locale @formatjs/intl-pluralrules","tagName":"pre"},{"text":"// polyfills for IE11 for i18n\nimport '@formatjs/intl-getcanonicallocales/polyfill';\nimport '@formatjs/intl-locale/polyfill';\nimport '@formatjs/intl-pluralrules/polyfill';\nimport '@formatjs/intl-pluralrules/locale-data/en';\nimport '@formatjs/intl-pluralrules/locale-data/ja';\nimport '@formatjs/intl-pluralrules/locale-data/zh';","tagName":"pre"},{"text":"There are additional polyfills available for more advanced translation messages. You can get additional information at formatjs.io.","tagName":"p"},{"text":"formatjs.io","tagName":"a"}]},{"title":"Theme Switching","filename":"more-resources/theme-switching.html","contents":[{"text":"EF provides packages for elements and themes separately. This decoupling allows more flexibility for applications to implement theme switching.","tagName":"p"},{"text":"The techniques for implementing theme switching can vary, depending on how the application is structured. This guideline shows one approach.","tagName":"p"},{"text":"In this example, we recommend splitting components and themes into different bundle files, so you can load another theme without having to reload the component bundle. That approach will reduce duplicate code in the bundle and keep the overall bundle size in your application smaller.","tagName":"p"},{"text":"1. Install EF theme","tagName":"h2"},{"text":" npm install @refinitiv-ui/halo-theme","tagName":"pre"},{"text":"2. Create theme entry point","tagName":"h2"},{"text":"The Halo theme contains dark and light variants. Let's make one entry point for one variant.","tagName":"p"},{"text":"// theme.dark.js\n\nimport '@refinitiv-ui/halo-theme/dark/imports/native-elements';\nimport '@refinitiv-ui/elements/lib/panel/themes/halo/dark';\nimport '@refinitiv-ui/elements/lib/header/themes/halo/dark';","tagName":"pre"},{"text":"// theme.light.js\n\nimport '@refinitiv-ui/halo-theme/light/imports/native-elements';\nimport '@refinitiv-ui/elements/lib/panel/themes/halo/light';\nimport '@refinitiv-ui/elements/lib/header/themes/halo/light';","tagName":"pre"},{"text":"3. Create theme loader","tagName":"h2"},{"text":"We'll assume that your application sets the user preferred theme as the theme attribute in the document body. We will use this information to determine which theme entry point the app should load.","tagName":"p"},{"text":"In the same directory, create a theme loader that dynamically imports the theme variant accordingly.","tagName":"p"},{"text":"// theme-loader.js\nexport function loadTheme() {\n  const theme = document.body.getAttribute(\"theme\"); // value can be `light` or `dark`\n  return import(`./theme.${theme}`); // provided that theme.light.js & theme.dark.js are in the same directory\n}","tagName":"pre"},{"text":"4. Add theme loader","tagName":"h2"},{"text":"Your application can add an event listenter to the theme attribute and call onThemeChanges() whenever the value is changed.","tagName":"p"},{"text":"import '@refinitiv-ui/elements/lib/panel';\nimport '@refinitiv-ui/elements/lib/header';\n\nimport { loadTheme } from './theme-loader';\n\nfunction onThemeChanges() {\n  loadTheme();\n}","tagName":"pre"}]},{"title":"Data Collection Composer","filename":"more-resources/collection-composer.html","contents":[{"text":"The Collection Composer is an API wrapper for data objects that conforms to the CollectionItem interface. This wrapper enables a fast and consistent approach to manipulating flat and nested data within elements, without affecting the original data object.","tagName":"p"},{"text":"CollectionItem","tagName":"a"},{"text":"All elements with data properties use a Collection Composer to manage their data internally. These elements apply the generic DataItem interface. Some elements may even support being controlled using an external composer.","tagName":"p"},{"text":"DataItem","tagName":"a"},{"text":"Installation","tagName":"h3"},{"text":"This module is available as part of @refinitiv-ui/utils.","tagName":"p"},{"text":"npm i @refinitiv-ui/utils","tagName":"pre"},{"text":"Usage","tagName":"h3"},{"text":"The module can be imported like any of the elements.","tagName":"p"},{"text":"import { CollectionComposer, CollectionItem } from '@refinitiv-ui/utils';\n\n// Custom data interface\ninterface MyData extends CollectionItem {\n  src: string;\n  type: string;\n}\n\n// Create data array\nconst data: MyData[] = [{\n  src: 'media.refinitiv.com/video1.webm',\n  type: 'video/webm'\n},\n{\n  src: 'media.refinitiv.com/video1.mp4',\n  type: 'video/mp4'\n}];\n\n// Initialize composer, using the data array\nconst composer = new CollectionComposer(data);\n\n// Use composer to return useful data\nconst modernMedia = composer.queryItemsByPropertyValue('type', 'video/webm');","tagName":"pre"},{"text":"CollectionItem","tagName":"h2"},{"text":"This interface is the minimum requirement for data passed to a Collection Composer.","tagName":"p"},{"text":"interface CollectionItem {\n  /**\n   * Child items collection.\n   * Used for nested data structures.\n   */\n  items?: this[];\n}","tagName":"pre"},{"text":"DataItem","tagName":"h2"},{"text":"This is the common interface to extend for elements with data properties.","tagName":"p"},{"text":"interface DataItem extends CollectionItem {\n  /**\n   * Value of the data item.\n   * This is usually the value which is returned,\n   * when the item is selected.\n   */\n  value?: string;\n  /**\n   * Whether to show or hide\n   * the item from the renderer.\n   */\n  hidden?: boolean;\n  /**\n   * Sets the item to be readonly.\n   * Read only items cannot be selected by a user.\n   */\n  readonly?: boolean;\n  /**\n   * Sets the highlight state of the item.\n   * This is usually used for navigating over items,\n   * without affecting focus, or, highlighting a multiple selection.\n   */\n  highlighted?: boolean;\n  /**\n   * Sets the selection state of the item.\n   * This is usually used for returning selected values.\n   */\n  selected?: boolean;\n  /**\n   * Sets the item to be disabled.\n   * This completely prevents the\n   * item from being interacted with.\n   */\n  disabled?: boolean;\n}","tagName":"pre"}]}]